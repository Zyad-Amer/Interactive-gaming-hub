
gaming_hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  0800564c  0800564c  0000664c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db0  08005db0  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005db0  08005db0  00006db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db8  08005db8  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db8  08005db8  00006db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005dbc  08005dbc  00006dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005dc0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a478  20000064  08005e24  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a4dc  08005e24  000074dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004b8e  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a7  00000000  00000000  0000bc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000d3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00003811  00000000  00000000  0000da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000504e  00000000  00000000  00011289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000c3a1  00000000  00000000  000162d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00022678  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000004d9  00000000  00000000  000226bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020e4  00000000  00000000  00022b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00024c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005634 	.word	0x08005634

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08005634 	.word	0x08005634

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HMATH_btnACallback>:
    {0x61, 0x51, 0x49, 0x45, 0x43}, // Z
};

/* Interrupt callback functions */
void HMATH_btnACallback(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    btnAPressed = 1;
 8000284:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <HMATH_btnACallback+0x14>)
 8000286:	2201      	movs	r2, #1
 8000288:	701a      	strb	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	2000a092 	.word	0x2000a092

08000298 <HMATH_btnBCallback>:

void HMATH_btnBCallback(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
    btnBPressed = 1;
 800029c:	4b03      	ldr	r3, [pc, #12]	@ (80002ac <HMATH_btnBCallback+0x14>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	2000a093 	.word	0x2000a093

080002b0 <HMATH_btnCCallback>:

void HMATH_btnCCallback(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    btnCPressed = 1;
 80002b4:	4b03      	ldr	r3, [pc, #12]	@ (80002c4 <HMATH_btnCCallback+0x14>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	2000a094 	.word	0x2000a094

080002c8 <HMATH_voidInit>:

/* ------------ Public implementations ------------- */

void HMATH_voidInit(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
    /* Configure EXTI for Math Quiz buttons */
    // A button - EXTI8
    MEXTI_voidSetInterruptPort(EXTI_Line8, EXTI_PORTA);
 80002cc:	2100      	movs	r1, #0
 80002ce:	2008      	movs	r0, #8
 80002d0:	f002 fc7a 	bl	8002bc8 <MEXTI_voidSetInterruptPort>
    MEXTI_voidSetTrigger(EXTI_Line8, EXTI_Falling);
 80002d4:	2100      	movs	r1, #0
 80002d6:	2008      	movs	r0, #8
 80002d8:	f002 fcc8 	bl	8002c6c <MEXTI_voidSetTrigger>
    MEXTI_voidCallBack(HMATH_btnCCallback, EXTI_Line8);
 80002dc:	2108      	movs	r1, #8
 80002de:	481b      	ldr	r0, [pc, #108]	@ (800034c <HMATH_voidInit+0x84>)
 80002e0:	f002 fd20 	bl	8002d24 <MEXTI_voidCallBack>
    MEXTI_voidEnable(EXTI_Line8);
 80002e4:	2008      	movs	r0, #8
 80002e6:	f002 fca9 	bl	8002c3c <MEXTI_voidEnable>

    // B button - EXTI9
    MEXTI_voidSetInterruptPort(EXTI_Line9, EXTI_PORTA);
 80002ea:	2100      	movs	r1, #0
 80002ec:	2009      	movs	r0, #9
 80002ee:	f002 fc6b 	bl	8002bc8 <MEXTI_voidSetInterruptPort>
    MEXTI_voidSetTrigger(EXTI_Line9, EXTI_Falling);
 80002f2:	2100      	movs	r1, #0
 80002f4:	2009      	movs	r0, #9
 80002f6:	f002 fcb9 	bl	8002c6c <MEXTI_voidSetTrigger>
    MEXTI_voidCallBack(HMATH_btnBCallback, EXTI_Line9);
 80002fa:	2109      	movs	r1, #9
 80002fc:	4814      	ldr	r0, [pc, #80]	@ (8000350 <HMATH_voidInit+0x88>)
 80002fe:	f002 fd11 	bl	8002d24 <MEXTI_voidCallBack>
    MEXTI_voidEnable(EXTI_Line9);
 8000302:	2009      	movs	r0, #9
 8000304:	f002 fc9a 	bl	8002c3c <MEXTI_voidEnable>

    // C button - EXTI10
    MEXTI_voidSetInterruptPort(EXTI_Line10, EXTI_PORTA);
 8000308:	2100      	movs	r1, #0
 800030a:	200a      	movs	r0, #10
 800030c:	f002 fc5c 	bl	8002bc8 <MEXTI_voidSetInterruptPort>
    MEXTI_voidSetTrigger(EXTI_Line10, EXTI_Falling);
 8000310:	2100      	movs	r1, #0
 8000312:	200a      	movs	r0, #10
 8000314:	f002 fcaa 	bl	8002c6c <MEXTI_voidSetTrigger>
    MEXTI_voidCallBack(HMATH_btnACallback, EXTI_Line10);
 8000318:	210a      	movs	r1, #10
 800031a:	480e      	ldr	r0, [pc, #56]	@ (8000354 <HMATH_voidInit+0x8c>)
 800031c:	f002 fd02 	bl	8002d24 <MEXTI_voidCallBack>
    MEXTI_voidEnable(EXTI_Line10);
 8000320:	200a      	movs	r0, #10
 8000322:	f002 fc8b 	bl	8002c3c <MEXTI_voidEnable>

    /* Enable NVIC interrupts */
    MNVIC_voidEnable(40); // EXTI15_10 (covers EXTI10)
 8000326:	2028      	movs	r0, #40	@ 0x28
 8000328:	f003 f93a 	bl	80035a0 <MNVIC_voidEnable>
    MNVIC_voidEnable(23); // EXTI9_5 (covers EXTI8, EXTI9)
 800032c:	2017      	movs	r0, #23
 800032e:	f003 f937 	bl	80035a0 <MNVIC_voidEnable>
    
    /* Initialize TFT display */
    HTFT_voidInit();
 8000332:	f001 fee9 	bl	8002108 <HTFT_voidInit>
    
    /* Initialize random seed */
    HMATH_voidInitRandom();
 8000336:	f000 fc85 	bl	8000c44 <HMATH_voidInitRandom>
    
    /* Reset game */
    HMATH_voidResetGame();
 800033a:	f000 f80d 	bl	8000358 <HMATH_voidResetGame>
    
    /* Initial display */
    HMATH_voidDisplayQuestion();
 800033e:	f000 f973 	bl	8000628 <HMATH_voidDisplayQuestion>
    HMATH_voidDisplayScore();
 8000342:	f000 fa15 	bl	8000770 <HMATH_voidDisplayScore>
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	080002b1 	.word	0x080002b1
 8000350:	08000299 	.word	0x08000299
 8000354:	08000281 	.word	0x08000281

08000358 <HMATH_voidResetGame>:

void HMATH_voidResetGame(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
    score = 0;
 800035c:	4b07      	ldr	r3, [pc, #28]	@ (800037c <HMATH_voidResetGame+0x24>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
    question_number = 1;
 8000362:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <HMATH_voidResetGame+0x28>)
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
    selected_option = 0;
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <HMATH_voidResetGame+0x2c>)
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
    game_state = MATH_STATE_QUESTION;
 800036e:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <HMATH_voidResetGame+0x30>)
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
    HMATH_voidGenerateQuestion();
 8000374:	f000 f8d2 	bl	800051c <HMATH_voidGenerateQuestion>
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	2000a08f 	.word	0x2000a08f
 8000380:	2000a090 	.word	0x2000a090
 8000384:	2000a091 	.word	0x2000a091
 8000388:	2000a08e 	.word	0x2000a08e

0800038c <HMATH_u16GetFrameBuffer>:

const u16* HMATH_u16GetFrameBuffer(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
    return GlobalFrameBuffer;
 8000390:	4b02      	ldr	r3, [pc, #8]	@ (800039c <HMATH_u16GetFrameBuffer+0x10>)
}
 8000392:	4618      	mov	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	20000080 	.word	0x20000080

080003a0 <HMATH_voidPoll>:
{
    return question_number;
}

void HMATH_voidPoll(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
    u32 now = HMATH_u32GetMillis();
 80003a6:	f000 fc01 	bl	8000bac <HMATH_u32GetMillis>
 80003aa:	6078      	str	r0, [r7, #4]
    
    switch (game_state) {
 80003ac:	4b53      	ldr	r3, [pc, #332]	@ (80004fc <HMATH_voidPoll+0x15c>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d007      	beq.n	80003c4 <HMATH_voidPoll+0x24>
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	f2c0 8096 	blt.w	80004e6 <HMATH_voidPoll+0x146>
 80003ba:	3b01      	subs	r3, #1
 80003bc:	2b01      	cmp	r3, #1
 80003be:	f200 8092 	bhi.w	80004e6 <HMATH_voidPoll+0x146>
 80003c2:	e07a      	b.n	80004ba <HMATH_voidPoll+0x11a>
        case MATH_STATE_QUESTION:
            /* Handle answer selection using interrupt flags */
            if (btnAPressed) {
 80003c4:	4b4e      	ldr	r3, [pc, #312]	@ (8000500 <HMATH_voidPoll+0x160>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d023      	beq.n	8000416 <HMATH_voidPoll+0x76>
                btnAPressed = 0; // Clear flag
 80003ce:	4b4c      	ldr	r3, [pc, #304]	@ (8000500 <HMATH_voidPoll+0x160>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	701a      	strb	r2, [r3, #0]
                selected_option = 0;
 80003d4:	4b4b      	ldr	r3, [pc, #300]	@ (8000504 <HMATH_voidPoll+0x164>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	701a      	strb	r2, [r3, #0]
                u8 correct = HMATH_u8CheckAnswer(0);
 80003da:	2000      	movs	r0, #0
 80003dc:	f000 f9f4 	bl	80007c8 <HMATH_u8CheckAnswer>
 80003e0:	4603      	mov	r3, r0
 80003e2:	707b      	strb	r3, [r7, #1]
                HMATH_voidShowFeedback(correct, 0);
 80003e4:	787b      	ldrb	r3, [r7, #1]
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fa03 	bl	80007f4 <HMATH_voidShowFeedback>
                if (correct) {
 80003ee:	787b      	ldrb	r3, [r7, #1]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d009      	beq.n	8000408 <HMATH_voidPoll+0x68>
                    score++;
 80003f4:	4b44      	ldr	r3, [pc, #272]	@ (8000508 <HMATH_voidPoll+0x168>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	3301      	adds	r3, #1
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	4b42      	ldr	r3, [pc, #264]	@ (8000508 <HMATH_voidPoll+0x168>)
 80003fe:	701a      	strb	r2, [r3, #0]
                    game_state = MATH_STATE_CORRECT;
 8000400:	4b3e      	ldr	r3, [pc, #248]	@ (80004fc <HMATH_voidPoll+0x15c>)
 8000402:	2201      	movs	r2, #1
 8000404:	701a      	strb	r2, [r3, #0]
 8000406:	e002      	b.n	800040e <HMATH_voidPoll+0x6e>
                } else {
                    game_state = MATH_STATE_WRONG;
 8000408:	4b3c      	ldr	r3, [pc, #240]	@ (80004fc <HMATH_voidPoll+0x15c>)
 800040a:	2202      	movs	r2, #2
 800040c:	701a      	strb	r2, [r3, #0]
                }
                feedback_start_time = now;
 800040e:	4a3f      	ldr	r2, [pc, #252]	@ (800050c <HMATH_voidPoll+0x16c>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	6013      	str	r3, [r2, #0]
                } else {
                    game_state = MATH_STATE_WRONG;
                }
                feedback_start_time = now;
            }
            break;
 8000414:	e06b      	b.n	80004ee <HMATH_voidPoll+0x14e>
            else if (btnBPressed) {
 8000416:	4b3e      	ldr	r3, [pc, #248]	@ (8000510 <HMATH_voidPoll+0x170>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	b2db      	uxtb	r3, r3
 800041c:	2b00      	cmp	r3, #0
 800041e:	d023      	beq.n	8000468 <HMATH_voidPoll+0xc8>
                btnBPressed = 0; // Clear flag
 8000420:	4b3b      	ldr	r3, [pc, #236]	@ (8000510 <HMATH_voidPoll+0x170>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
                selected_option = 1;
 8000426:	4b37      	ldr	r3, [pc, #220]	@ (8000504 <HMATH_voidPoll+0x164>)
 8000428:	2201      	movs	r2, #1
 800042a:	701a      	strb	r2, [r3, #0]
                u8 correct = HMATH_u8CheckAnswer(1);
 800042c:	2001      	movs	r0, #1
 800042e:	f000 f9cb 	bl	80007c8 <HMATH_u8CheckAnswer>
 8000432:	4603      	mov	r3, r0
 8000434:	70bb      	strb	r3, [r7, #2]
                HMATH_voidShowFeedback(correct, 1);
 8000436:	78bb      	ldrb	r3, [r7, #2]
 8000438:	2101      	movs	r1, #1
 800043a:	4618      	mov	r0, r3
 800043c:	f000 f9da 	bl	80007f4 <HMATH_voidShowFeedback>
                if (correct) {
 8000440:	78bb      	ldrb	r3, [r7, #2]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d009      	beq.n	800045a <HMATH_voidPoll+0xba>
                    score++;
 8000446:	4b30      	ldr	r3, [pc, #192]	@ (8000508 <HMATH_voidPoll+0x168>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	3301      	adds	r3, #1
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b2e      	ldr	r3, [pc, #184]	@ (8000508 <HMATH_voidPoll+0x168>)
 8000450:	701a      	strb	r2, [r3, #0]
                    game_state = MATH_STATE_CORRECT;
 8000452:	4b2a      	ldr	r3, [pc, #168]	@ (80004fc <HMATH_voidPoll+0x15c>)
 8000454:	2201      	movs	r2, #1
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	e002      	b.n	8000460 <HMATH_voidPoll+0xc0>
                    game_state = MATH_STATE_WRONG;
 800045a:	4b28      	ldr	r3, [pc, #160]	@ (80004fc <HMATH_voidPoll+0x15c>)
 800045c:	2202      	movs	r2, #2
 800045e:	701a      	strb	r2, [r3, #0]
                feedback_start_time = now;
 8000460:	4a2a      	ldr	r2, [pc, #168]	@ (800050c <HMATH_voidPoll+0x16c>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6013      	str	r3, [r2, #0]
            break;
 8000466:	e042      	b.n	80004ee <HMATH_voidPoll+0x14e>
            else if (btnCPressed) {
 8000468:	4b2a      	ldr	r3, [pc, #168]	@ (8000514 <HMATH_voidPoll+0x174>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2b00      	cmp	r3, #0
 8000470:	d03d      	beq.n	80004ee <HMATH_voidPoll+0x14e>
                btnCPressed = 0; // Clear flag
 8000472:	4b28      	ldr	r3, [pc, #160]	@ (8000514 <HMATH_voidPoll+0x174>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]
                selected_option = 2;
 8000478:	4b22      	ldr	r3, [pc, #136]	@ (8000504 <HMATH_voidPoll+0x164>)
 800047a:	2202      	movs	r2, #2
 800047c:	701a      	strb	r2, [r3, #0]
                u8 correct = HMATH_u8CheckAnswer(2);
 800047e:	2002      	movs	r0, #2
 8000480:	f000 f9a2 	bl	80007c8 <HMATH_u8CheckAnswer>
 8000484:	4603      	mov	r3, r0
 8000486:	70fb      	strb	r3, [r7, #3]
                HMATH_voidShowFeedback(correct, 2);
 8000488:	78fb      	ldrb	r3, [r7, #3]
 800048a:	2102      	movs	r1, #2
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f9b1 	bl	80007f4 <HMATH_voidShowFeedback>
                if (correct) {
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d009      	beq.n	80004ac <HMATH_voidPoll+0x10c>
                    score++;
 8000498:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <HMATH_voidPoll+0x168>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b19      	ldr	r3, [pc, #100]	@ (8000508 <HMATH_voidPoll+0x168>)
 80004a2:	701a      	strb	r2, [r3, #0]
                    game_state = MATH_STATE_CORRECT;
 80004a4:	4b15      	ldr	r3, [pc, #84]	@ (80004fc <HMATH_voidPoll+0x15c>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e002      	b.n	80004b2 <HMATH_voidPoll+0x112>
                    game_state = MATH_STATE_WRONG;
 80004ac:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <HMATH_voidPoll+0x15c>)
 80004ae:	2202      	movs	r2, #2
 80004b0:	701a      	strb	r2, [r3, #0]
                feedback_start_time = now;
 80004b2:	4a16      	ldr	r2, [pc, #88]	@ (800050c <HMATH_voidPoll+0x16c>)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6013      	str	r3, [r2, #0]
            break;
 80004b8:	e019      	b.n	80004ee <HMATH_voidPoll+0x14e>
            
        case MATH_STATE_CORRECT:
        case MATH_STATE_WRONG:
            /* Show feedback for a while, then move to next question */
            if (now - feedback_start_time > MATH_FEEDBACK_DELAY) {
 80004ba:	4b14      	ldr	r3, [pc, #80]	@ (800050c <HMATH_voidPoll+0x16c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	2b37      	cmp	r3, #55	@ 0x37
 80004c4:	d915      	bls.n	80004f2 <HMATH_voidPoll+0x152>
                question_number++;
 80004c6:	4b14      	ldr	r3, [pc, #80]	@ (8000518 <HMATH_voidPoll+0x178>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	3301      	adds	r3, #1
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <HMATH_voidPoll+0x178>)
 80004d0:	701a      	strb	r2, [r3, #0]
                HMATH_voidGenerateQuestion();
 80004d2:	f000 f823 	bl	800051c <HMATH_voidGenerateQuestion>
                HMATH_voidDisplayQuestion();
 80004d6:	f000 f8a7 	bl	8000628 <HMATH_voidDisplayQuestion>
                HMATH_voidDisplayScore();
 80004da:	f000 f949 	bl	8000770 <HMATH_voidDisplayScore>
                game_state = MATH_STATE_QUESTION;
 80004de:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <HMATH_voidPoll+0x15c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80004e4:	e005      	b.n	80004f2 <HMATH_voidPoll+0x152>
            
        default:
            game_state = MATH_STATE_QUESTION;
 80004e6:	4b05      	ldr	r3, [pc, #20]	@ (80004fc <HMATH_voidPoll+0x15c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
            break;
 80004ec:	e002      	b.n	80004f4 <HMATH_voidPoll+0x154>
            break;
 80004ee:	bf00      	nop
 80004f0:	e000      	b.n	80004f4 <HMATH_voidPoll+0x154>
            break;
 80004f2:	bf00      	nop
    }
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	2000a08e 	.word	0x2000a08e
 8000500:	2000a092 	.word	0x2000a092
 8000504:	2000a091 	.word	0x2000a091
 8000508:	2000a08f 	.word	0x2000a08f
 800050c:	2000a098 	.word	0x2000a098
 8000510:	2000a093 	.word	0x2000a093
 8000514:	2000a094 	.word	0x2000a094
 8000518:	2000a090 	.word	0x2000a090

0800051c <HMATH_voidGenerateQuestion>:

/* ------------ Private implementations ------------- */

static void HMATH_voidGenerateQuestion(void)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
    /* Generate random numbers */
    current_question.num1 = HMATH_u16GetRandom(MATH_NUMBER_RANGE + 1);
 8000522:	2015      	movs	r0, #21
 8000524:	f000 fb52 	bl	8000bcc <HMATH_u16GetRandom>
 8000528:	4603      	mov	r3, r0
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b3d      	ldr	r3, [pc, #244]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 800052e:	701a      	strb	r2, [r3, #0]
    current_question.num2 = HMATH_u16GetRandom(MATH_NUMBER_RANGE + 1);
 8000530:	2015      	movs	r0, #21
 8000532:	f000 fb4b 	bl	8000bcc <HMATH_u16GetRandom>
 8000536:	4603      	mov	r3, r0
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b3a      	ldr	r3, [pc, #232]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 800053c:	705a      	strb	r2, [r3, #1]
    
    /* Choose random operation */
    current_question.operation = (MATH_Operation_t)HMATH_u16GetRandom(3);
 800053e:	2003      	movs	r0, #3
 8000540:	f000 fb44 	bl	8000bcc <HMATH_u16GetRandom>
 8000544:	4603      	mov	r3, r0
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b36      	ldr	r3, [pc, #216]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 800054a:	709a      	strb	r2, [r3, #2]
    
    /* Calculate correct answer */
    switch (current_question.operation) {
 800054c:	4b35      	ldr	r3, [pc, #212]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 800054e:	789b      	ldrb	r3, [r3, #2]
 8000550:	2b02      	cmp	r3, #2
 8000552:	d01c      	beq.n	800058e <HMATH_voidGenerateQuestion+0x72>
 8000554:	2b02      	cmp	r3, #2
 8000556:	dc26      	bgt.n	80005a6 <HMATH_voidGenerateQuestion+0x8a>
 8000558:	2b00      	cmp	r3, #0
 800055a:	d002      	beq.n	8000562 <HMATH_voidGenerateQuestion+0x46>
 800055c:	2b01      	cmp	r3, #1
 800055e:	d00b      	beq.n	8000578 <HMATH_voidGenerateQuestion+0x5c>
 8000560:	e021      	b.n	80005a6 <HMATH_voidGenerateQuestion+0x8a>
        case MATH_OP_ADD:
            current_question.correct_answer = current_question.num1 + current_question.num2;
 8000562:	4b30      	ldr	r3, [pc, #192]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	461a      	mov	r2, r3
 8000568:	4b2e      	ldr	r3, [pc, #184]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 800056a:	785b      	ldrb	r3, [r3, #1]
 800056c:	4413      	add	r3, r2
 800056e:	b29b      	uxth	r3, r3
 8000570:	b21a      	sxth	r2, r3
 8000572:	4b2c      	ldr	r3, [pc, #176]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 8000574:	809a      	strh	r2, [r3, #4]
            break;
 8000576:	e016      	b.n	80005a6 <HMATH_voidGenerateQuestion+0x8a>
        case MATH_OP_SUB:
            current_question.correct_answer = current_question.num1 - current_question.num2;
 8000578:	4b2a      	ldr	r3, [pc, #168]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b29      	ldr	r3, [pc, #164]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 8000580:	785b      	ldrb	r3, [r3, #1]
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	b29b      	uxth	r3, r3
 8000586:	b21a      	sxth	r2, r3
 8000588:	4b26      	ldr	r3, [pc, #152]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 800058a:	809a      	strh	r2, [r3, #4]
            break;
 800058c:	e00b      	b.n	80005a6 <HMATH_voidGenerateQuestion+0x8a>
        case MATH_OP_MUL:
            current_question.correct_answer = current_question.num1 * current_question.num2;
 800058e:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	4b23      	ldr	r3, [pc, #140]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	fb12 f303 	smulbb	r3, r2, r3
 800059c:	b29b      	uxth	r3, r3
 800059e:	b21a      	sxth	r2, r3
 80005a0:	4b20      	ldr	r3, [pc, #128]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 80005a2:	809a      	strh	r2, [r3, #4]
            break;
 80005a4:	bf00      	nop
    }
    
    /* Choose random position for correct answer (0, 1, or 2) */
    current_question.correct_index = HMATH_u16GetRandom(3);
 80005a6:	2003      	movs	r0, #3
 80005a8:	f000 fb10 	bl	8000bcc <HMATH_u16GetRandom>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 80005b2:	731a      	strb	r2, [r3, #12]
    
    /* Place correct answer */
    current_question.options[current_question.correct_index] = current_question.correct_answer;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 80005b6:	7b1b      	ldrb	r3, [r3, #12]
 80005b8:	4618      	mov	r0, r3
 80005ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 80005bc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80005c0:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 80005c2:	0043      	lsls	r3, r0, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	460a      	mov	r2, r1
 80005c8:	80da      	strh	r2, [r3, #6]
    
    /* Generate wrong answers */
    for (u8 i = 0; i < 3; i++) {
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]
 80005ce:	e021      	b.n	8000614 <HMATH_voidGenerateQuestion+0xf8>
        if (i != current_question.correct_index) {
 80005d0:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 80005d2:	7b1b      	ldrb	r3, [r3, #12]
 80005d4:	79fa      	ldrb	r2, [r7, #7]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d019      	beq.n	800060e <HMATH_voidGenerateQuestion+0xf2>
            s16 wrong_answer;
            do {
                /* Generate wrong answer within reasonable range */
                wrong_answer = current_question.correct_answer + (HMATH_u16GetRandom(21) - 10);
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 80005dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005e0:	b29c      	uxth	r4, r3
 80005e2:	2015      	movs	r0, #21
 80005e4:	f000 faf2 	bl	8000bcc <HMATH_u16GetRandom>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4423      	add	r3, r4
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	3b0a      	subs	r3, #10
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	80bb      	strh	r3, [r7, #4]
            } while (wrong_answer == current_question.correct_answer);
 80005f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 80005f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005fa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d0eb      	beq.n	80005da <HMATH_voidGenerateQuestion+0xbe>
            current_question.options[i] = wrong_answer;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4a07      	ldr	r2, [pc, #28]	@ (8000624 <HMATH_voidGenerateQuestion+0x108>)
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4413      	add	r3, r2
 800060a:	88ba      	ldrh	r2, [r7, #4]
 800060c:	80da      	strh	r2, [r3, #6]
    for (u8 i = 0; i < 3; i++) {
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	3301      	adds	r3, #1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d9da      	bls.n	80005d0 <HMATH_voidGenerateQuestion+0xb4>
        }
    }
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	2000a080 	.word	0x2000a080

08000628 <HMATH_voidDisplayQuestion>:

static void HMATH_voidDisplayQuestion(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
    HMATH_voidClearFrame();
 800062e:	f000 f929 	bl	8000884 <HMATH_voidClearFrame>
    
    /* Display question number and score at top */
    HMATH_voidDisplayScore();
 8000632:	f000 f89d 	bl	8000770 <HMATH_voidDisplayScore>
    
    /* Display the math problem */
    char op_char;
    switch (current_question.operation) {
 8000636:	4b4d      	ldr	r3, [pc, #308]	@ (800076c <HMATH_voidDisplayQuestion+0x144>)
 8000638:	789b      	ldrb	r3, [r3, #2]
 800063a:	2b02      	cmp	r3, #2
 800063c:	d00c      	beq.n	8000658 <HMATH_voidDisplayQuestion+0x30>
 800063e:	2b02      	cmp	r3, #2
 8000640:	dc0d      	bgt.n	800065e <HMATH_voidDisplayQuestion+0x36>
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <HMATH_voidDisplayQuestion+0x24>
 8000646:	2b01      	cmp	r3, #1
 8000648:	d003      	beq.n	8000652 <HMATH_voidDisplayQuestion+0x2a>
 800064a:	e008      	b.n	800065e <HMATH_voidDisplayQuestion+0x36>
        case MATH_OP_ADD: op_char = '+'; break;
 800064c:	232b      	movs	r3, #43	@ 0x2b
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e008      	b.n	8000664 <HMATH_voidDisplayQuestion+0x3c>
        case MATH_OP_SUB: op_char = '-'; break;
 8000652:	232d      	movs	r3, #45	@ 0x2d
 8000654:	73fb      	strb	r3, [r7, #15]
 8000656:	e005      	b.n	8000664 <HMATH_voidDisplayQuestion+0x3c>
        case MATH_OP_MUL: op_char = '*'; break;
 8000658:	232a      	movs	r3, #42	@ 0x2a
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	e002      	b.n	8000664 <HMATH_voidDisplayQuestion+0x3c>
        default: op_char = '+'; break;
 800065e:	232b      	movs	r3, #43	@ 0x2b
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	bf00      	nop
    }
    
    /* Center the question */
    u16 question_x = MATH_SCREEN_WIDTH / 2;
 8000664:	2340      	movs	r3, #64	@ 0x40
 8000666:	81bb      	strh	r3, [r7, #12]
    u16 question_y = MATH_QUESTION_Y;
 8000668:	2323      	movs	r3, #35	@ 0x23
 800066a:	817b      	strh	r3, [r7, #10]
    
    /* Draw numbers and operator */
    u16 x_pos = 20;
 800066c:	2314      	movs	r3, #20
 800066e:	813b      	strh	r3, [r7, #8]
    HMATH_voidDrawNumber(current_question.num1, x_pos, question_y, MATH_COLOR_TEXT);
 8000670:	4b3e      	ldr	r3, [pc, #248]	@ (800076c <HMATH_voidDisplayQuestion+0x144>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b218      	sxth	r0, r3
 8000676:	897a      	ldrh	r2, [r7, #10]
 8000678:	8939      	ldrh	r1, [r7, #8]
 800067a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800067e:	f000 f99b 	bl	80009b8 <HMATH_voidDrawNumber>
    x_pos += HMATH_u8GetNumberWidth(current_question.num1) + 8;
 8000682:	4b3a      	ldr	r3, [pc, #232]	@ (800076c <HMATH_voidDisplayQuestion+0x144>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b21b      	sxth	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fae9 	bl	8000c60 <HMATH_u8GetNumberWidth>
 800068e:	4603      	mov	r3, r0
 8000690:	3308      	adds	r3, #8
 8000692:	b29a      	uxth	r2, r3
 8000694:	893b      	ldrh	r3, [r7, #8]
 8000696:	4413      	add	r3, r2
 8000698:	813b      	strh	r3, [r7, #8]
    
    HMATH_voidDrawChar(op_char, x_pos, question_y, MATH_COLOR_TEXT);
 800069a:	897a      	ldrh	r2, [r7, #10]
 800069c:	8939      	ldrh	r1, [r7, #8]
 800069e:	7bf8      	ldrb	r0, [r7, #15]
 80006a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006a4:	f000 f936 	bl	8000914 <HMATH_voidDrawChar>
    x_pos += 13;
 80006a8:	893b      	ldrh	r3, [r7, #8]
 80006aa:	330d      	adds	r3, #13
 80006ac:	813b      	strh	r3, [r7, #8]
    
    HMATH_voidDrawNumber(current_question.num2, x_pos, question_y, MATH_COLOR_TEXT);
 80006ae:	4b2f      	ldr	r3, [pc, #188]	@ (800076c <HMATH_voidDisplayQuestion+0x144>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	b218      	sxth	r0, r3
 80006b4:	897a      	ldrh	r2, [r7, #10]
 80006b6:	8939      	ldrh	r1, [r7, #8]
 80006b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006bc:	f000 f97c 	bl	80009b8 <HMATH_voidDrawNumber>
    x_pos += HMATH_u8GetNumberWidth(current_question.num2) + 8;
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <HMATH_voidDisplayQuestion+0x144>)
 80006c2:	785b      	ldrb	r3, [r3, #1]
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 faca 	bl	8000c60 <HMATH_u8GetNumberWidth>
 80006cc:	4603      	mov	r3, r0
 80006ce:	3308      	adds	r3, #8
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	893b      	ldrh	r3, [r7, #8]
 80006d4:	4413      	add	r3, r2
 80006d6:	813b      	strh	r3, [r7, #8]
    
    HMATH_voidDrawChar('=', x_pos, question_y, MATH_COLOR_TEXT);
 80006d8:	897a      	ldrh	r2, [r7, #10]
 80006da:	8939      	ldrh	r1, [r7, #8]
 80006dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006e0:	203d      	movs	r0, #61	@ 0x3d
 80006e2:	f000 f917 	bl	8000914 <HMATH_voidDrawChar>
    x_pos += 13;
 80006e6:	893b      	ldrh	r3, [r7, #8]
 80006e8:	330d      	adds	r3, #13
 80006ea:	813b      	strh	r3, [r7, #8]
    
    HMATH_voidDrawChar('?', x_pos, question_y, MATH_COLOR_TEXT);
 80006ec:	897a      	ldrh	r2, [r7, #10]
 80006ee:	8939      	ldrh	r1, [r7, #8]
 80006f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006f4:	203f      	movs	r0, #63	@ 0x3f
 80006f6:	f000 f90d 	bl	8000914 <HMATH_voidDrawChar>
    
    /* Display answer options */
    for (u8 i = 0; i < 3; i++) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	73bb      	strb	r3, [r7, #14]
 80006fe:	e02c      	b.n	800075a <HMATH_voidDisplayQuestion+0x132>
        u16 option_y = MATH_OPTION_START_Y + (i * MATH_OPTION_SPACING);
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	b29b      	uxth	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	0092      	lsls	r2, r2, #2
 8000708:	4413      	add	r3, r2
 800070a:	461a      	mov	r2, r3
 800070c:	0091      	lsls	r1, r2, #2
 800070e:	461a      	mov	r2, r3
 8000710:	460b      	mov	r3, r1
 8000712:	4413      	add	r3, r2
 8000714:	b29b      	uxth	r3, r3
 8000716:	333c      	adds	r3, #60	@ 0x3c
 8000718:	80fb      	strh	r3, [r7, #6]
        char option_letter = 'A' + i;
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	3341      	adds	r3, #65	@ 0x41
 800071e:	717b      	strb	r3, [r7, #5]
        
        HMATH_voidDrawChar(option_letter, MATH_TEXT_MARGIN, option_y, MATH_COLOR_TEXT);
 8000720:	88fa      	ldrh	r2, [r7, #6]
 8000722:	7978      	ldrb	r0, [r7, #5]
 8000724:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000728:	2105      	movs	r1, #5
 800072a:	f000 f8f3 	bl	8000914 <HMATH_voidDrawChar>
        HMATH_voidDrawChar(')', MATH_TEXT_MARGIN + 8, option_y, MATH_COLOR_TEXT);
 800072e:	88fa      	ldrh	r2, [r7, #6]
 8000730:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000734:	210d      	movs	r1, #13
 8000736:	2029      	movs	r0, #41	@ 0x29
 8000738:	f000 f8ec 	bl	8000914 <HMATH_voidDrawChar>
        HMATH_voidDrawNumber(current_question.options[i], MATH_TEXT_MARGIN + 20, option_y, MATH_COLOR_TEXT);
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	4a0b      	ldr	r2, [pc, #44]	@ (800076c <HMATH_voidDisplayQuestion+0x144>)
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4413      	add	r3, r2
 8000744:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8000748:	88fa      	ldrh	r2, [r7, #6]
 800074a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800074e:	2119      	movs	r1, #25
 8000750:	f000 f932 	bl	80009b8 <HMATH_voidDrawNumber>
    for (u8 i = 0; i < 3; i++) {
 8000754:	7bbb      	ldrb	r3, [r7, #14]
 8000756:	3301      	adds	r3, #1
 8000758:	73bb      	strb	r3, [r7, #14]
 800075a:	7bbb      	ldrb	r3, [r7, #14]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d9cf      	bls.n	8000700 <HMATH_voidDisplayQuestion+0xd8>
    }
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000a080 	.word	0x2000a080

08000770 <HMATH_voidDisplayScore>:

static void HMATH_voidDisplayScore(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    /* Display score */
    HMATH_voidDrawText("Q:", 5, MATH_SCORE_Y, MATH_COLOR_TEXT);
 8000774:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000778:	220a      	movs	r2, #10
 800077a:	2105      	movs	r1, #5
 800077c:	480e      	ldr	r0, [pc, #56]	@ (80007b8 <HMATH_voidDisplayScore+0x48>)
 800077e:	f000 f89d 	bl	80008bc <HMATH_voidDrawText>
    HMATH_voidDrawNumber(question_number, 20, MATH_SCORE_Y, MATH_COLOR_TEXT);
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <HMATH_voidDisplayScore+0x4c>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b218      	sxth	r0, r3
 8000788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800078c:	220a      	movs	r2, #10
 800078e:	2114      	movs	r1, #20
 8000790:	f000 f912 	bl	80009b8 <HMATH_voidDrawNumber>
    
    HMATH_voidDrawText("S:", 88, MATH_SCORE_Y, MATH_COLOR_TEXT);
 8000794:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000798:	220a      	movs	r2, #10
 800079a:	2158      	movs	r1, #88	@ 0x58
 800079c:	4808      	ldr	r0, [pc, #32]	@ (80007c0 <HMATH_voidDisplayScore+0x50>)
 800079e:	f000 f88d 	bl	80008bc <HMATH_voidDrawText>
    HMATH_voidDrawNumber(score, 110, MATH_SCORE_Y, MATH_COLOR_TEXT);
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HMATH_voidDisplayScore+0x54>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b218      	sxth	r0, r3
 80007a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007ac:	220a      	movs	r2, #10
 80007ae:	216e      	movs	r1, #110	@ 0x6e
 80007b0:	f000 f902 	bl	80009b8 <HMATH_voidDrawNumber>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	0800564c 	.word	0x0800564c
 80007bc:	2000a090 	.word	0x2000a090
 80007c0:	08005650 	.word	0x08005650
 80007c4:	2000a08f 	.word	0x2000a08f

080007c8 <HMATH_u8CheckAnswer>:

static u8 HMATH_u8CheckAnswer(u8 selected_option)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
    return (selected_option == current_question.correct_index) ? 1 : 0;
 80007d2:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <HMATH_u8CheckAnswer+0x28>)
 80007d4:	7b1b      	ldrb	r3, [r3, #12]
 80007d6:	79fa      	ldrb	r2, [r7, #7]
 80007d8:	429a      	cmp	r2, r3
 80007da:	bf0c      	ite	eq
 80007dc:	2301      	moveq	r3, #1
 80007de:	2300      	movne	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	2000a080 	.word	0x2000a080

080007f4 <HMATH_voidShowFeedback>:

static void HMATH_voidShowFeedback(u8 is_correct, u8 selected_option)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	4613      	mov	r3, r2
 8000802:	71bb      	strb	r3, [r7, #6]
    /* Clear area and show feedback */
    HMATH_voidFillRect(0, MATH_OPTION_START_Y + 3 * MATH_OPTION_SPACING, 
 8000804:	2300      	movs	r3, #0
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	239f      	movs	r3, #159	@ 0x9f
 800080a:	227f      	movs	r2, #127	@ 0x7f
 800080c:	2187      	movs	r1, #135	@ 0x87
 800080e:	2000      	movs	r0, #0
 8000810:	f000 f950 	bl	8000ab4 <HMATH_voidFillRect>
                       MATH_SCREEN_WIDTH - 1, MATH_SCREEN_HEIGHT - 1, MATH_COLOR_BG);
    
    u16 feedback_y = MATH_OPTION_START_Y + 3 * MATH_OPTION_SPACING + 10;
 8000814:	2391      	movs	r3, #145	@ 0x91
 8000816:	81fb      	strh	r3, [r7, #14]
    
    if (is_correct) {
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d007      	beq.n	800082e <HMATH_voidShowFeedback+0x3a>
        HMATH_voidDrawText("CORRECT!", 30, feedback_y, MATH_COLOR_CORRECT);
 800081e:	89fa      	ldrh	r2, [r7, #14]
 8000820:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000824:	211e      	movs	r1, #30
 8000826:	4813      	ldr	r0, [pc, #76]	@ (8000874 <HMATH_voidShowFeedback+0x80>)
 8000828:	f000 f848 	bl	80008bc <HMATH_voidDrawText>
 800082c:	e01a      	b.n	8000864 <HMATH_voidShowFeedback+0x70>
    } else {
        HMATH_voidDrawText("WRONG!", 35, feedback_y, MATH_COLOR_WRONG);
 800082e:	89fa      	ldrh	r2, [r7, #14]
 8000830:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000834:	2123      	movs	r1, #35	@ 0x23
 8000836:	4810      	ldr	r0, [pc, #64]	@ (8000878 <HMATH_voidShowFeedback+0x84>)
 8000838:	f000 f840 	bl	80008bc <HMATH_voidDrawText>
        HMATH_voidDrawText("Answer:", 20, feedback_y + 15, MATH_COLOR_TEXT);
 800083c:	89fb      	ldrh	r3, [r7, #14]
 800083e:	330f      	adds	r3, #15
 8000840:	b29a      	uxth	r2, r3
 8000842:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000846:	2114      	movs	r1, #20
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <HMATH_voidShowFeedback+0x88>)
 800084a:	f000 f837 	bl	80008bc <HMATH_voidDrawText>
        HMATH_voidDrawNumber(current_question.correct_answer, 70, feedback_y + 15, MATH_COLOR_CORRECT);
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <HMATH_voidShowFeedback+0x8c>)
 8000850:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8000854:	89fb      	ldrh	r3, [r7, #14]
 8000856:	330f      	adds	r3, #15
 8000858:	b29a      	uxth	r2, r3
 800085a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800085e:	2146      	movs	r1, #70	@ 0x46
 8000860:	f000 f8aa 	bl	80009b8 <HMATH_voidDrawNumber>
    }
    
    /* Update display immediately */
    HTFT_voidDisplay(IMAGE_SIZE);
 8000864:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
 8000868:	f001 fcc5 	bl	80021f6 <HTFT_voidDisplay>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	08005654 	.word	0x08005654
 8000878:	08005660 	.word	0x08005660
 800087c:	08005668 	.word	0x08005668
 8000880:	2000a080 	.word	0x2000a080

08000884 <HMATH_voidClearFrame>:

static void HMATH_voidClearFrame(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
    for (u32 i = 0; i < IMAGE_SIZE; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	e007      	b.n	80008a0 <HMATH_voidClearFrame+0x1c>
        MATH_frame[i] = MATH_COLOR_BG;
 8000890:	4a09      	ldr	r2, [pc, #36]	@ (80008b8 <HMATH_voidClearFrame+0x34>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2100      	movs	r1, #0
 8000896:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (u32 i = 0; i < IMAGE_SIZE; i++) {
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3301      	adds	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80008a6:	d3f3      	bcc.n	8000890 <HMATH_voidClearFrame+0xc>
    }
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000080 	.word	0x20000080

080008bc <HMATH_voidDrawText>:

static void HMATH_voidDrawText(const char* text, u16 x, u16 y, u16 color)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	4608      	mov	r0, r1
 80008c6:	4611      	mov	r1, r2
 80008c8:	461a      	mov	r2, r3
 80008ca:	4603      	mov	r3, r0
 80008cc:	817b      	strh	r3, [r7, #10]
 80008ce:	460b      	mov	r3, r1
 80008d0:	813b      	strh	r3, [r7, #8]
 80008d2:	4613      	mov	r3, r2
 80008d4:	80fb      	strh	r3, [r7, #6]
    u16 char_x = x;
 80008d6:	897b      	ldrh	r3, [r7, #10]
 80008d8:	82fb      	strh	r3, [r7, #22]
    u8 i = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	757b      	strb	r3, [r7, #21]
    
    while (text[i] != '\0') {
 80008de:	e00e      	b.n	80008fe <HMATH_voidDrawText+0x42>
        HMATH_voidDrawChar(text[i], char_x, y, color);
 80008e0:	7d7b      	ldrb	r3, [r7, #21]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	4413      	add	r3, r2
 80008e6:	7818      	ldrb	r0, [r3, #0]
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	893a      	ldrh	r2, [r7, #8]
 80008ec:	8af9      	ldrh	r1, [r7, #22]
 80008ee:	f000 f811 	bl	8000914 <HMATH_voidDrawChar>
        char_x += 8;
 80008f2:	8afb      	ldrh	r3, [r7, #22]
 80008f4:	3308      	adds	r3, #8
 80008f6:	82fb      	strh	r3, [r7, #22]
        i++;
 80008f8:	7d7b      	ldrb	r3, [r7, #21]
 80008fa:	3301      	adds	r3, #1
 80008fc:	757b      	strb	r3, [r7, #21]
    while (text[i] != '\0') {
 80008fe:	7d7b      	ldrb	r3, [r7, #21]
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1ea      	bne.n	80008e0 <HMATH_voidDrawText+0x24>
    }
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <HMATH_voidDrawChar>:

static void HMATH_voidDrawChar(char c, u16 x, u16 y, u16 color)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	4604      	mov	r4, r0
 800091c:	4608      	mov	r0, r1
 800091e:	4611      	mov	r1, r2
 8000920:	461a      	mov	r2, r3
 8000922:	4623      	mov	r3, r4
 8000924:	71fb      	strb	r3, [r7, #7]
 8000926:	4603      	mov	r3, r0
 8000928:	80bb      	strh	r3, [r7, #4]
 800092a:	460b      	mov	r3, r1
 800092c:	807b      	strh	r3, [r7, #2]
 800092e:	4613      	mov	r3, r2
 8000930:	803b      	strh	r3, [r7, #0]
    if (c < 32 || c > 126) return; /* Out of range */
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b1f      	cmp	r3, #31
 8000936:	d938      	bls.n	80009aa <HMATH_voidDrawChar+0x96>
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b7e      	cmp	r3, #126	@ 0x7e
 800093c:	d835      	bhi.n	80009aa <HMATH_voidDrawChar+0x96>
    
    const u8* char_data = font5x7[c - 32];
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f1a3 0220 	sub.w	r2, r3, #32
 8000944:	4613      	mov	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	4a1a      	ldr	r2, [pc, #104]	@ (80009b4 <HMATH_voidDrawChar+0xa0>)
 800094c:	4413      	add	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
    
    for (u8 col = 0; col < 5; col++) {
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e025      	b.n	80009a2 <HMATH_voidDrawChar+0x8e>
        for (u8 row = 0; row < 8; row++) {
 8000956:	2300      	movs	r3, #0
 8000958:	73bb      	strb	r3, [r7, #14]
 800095a:	e01c      	b.n	8000996 <HMATH_voidDrawChar+0x82>
            if (char_data[col] & (1 << row)) {
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	4413      	add	r3, r2
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	7bbb      	ldrb	r3, [r7, #14]
 8000968:	fa42 f303 	asr.w	r3, r2, r3
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00d      	beq.n	8000990 <HMATH_voidDrawChar+0x7c>
                HMATH_voidSetPixel(x + col, y + row, color);
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	b29a      	uxth	r2, r3
 8000978:	88bb      	ldrh	r3, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	b298      	uxth	r0, r3
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	b29a      	uxth	r2, r3
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	4413      	add	r3, r2
 8000986:	b29b      	uxth	r3, r3
 8000988:	883a      	ldrh	r2, [r7, #0]
 800098a:	4619      	mov	r1, r3
 800098c:	f000 f8ee 	bl	8000b6c <HMATH_voidSetPixel>
        for (u8 row = 0; row < 8; row++) {
 8000990:	7bbb      	ldrb	r3, [r7, #14]
 8000992:	3301      	adds	r3, #1
 8000994:	73bb      	strb	r3, [r7, #14]
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	2b07      	cmp	r3, #7
 800099a:	d9df      	bls.n	800095c <HMATH_voidDrawChar+0x48>
    for (u8 col = 0; col < 5; col++) {
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	3301      	adds	r3, #1
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	d9d6      	bls.n	8000956 <HMATH_voidDrawChar+0x42>
 80009a8:	e000      	b.n	80009ac <HMATH_voidDrawChar+0x98>
    if (c < 32 || c > 126) return; /* Out of range */
 80009aa:	bf00      	nop
            }
        }
    }
}
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd90      	pop	{r4, r7, pc}
 80009b2:	bf00      	nop
 80009b4:	08005728 	.word	0x08005728

080009b8 <HMATH_voidDrawNumber>:

static void HMATH_voidDrawNumber(s16 number, u16 x, u16 y, u16 color)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b087      	sub	sp, #28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4604      	mov	r4, r0
 80009c0:	4608      	mov	r0, r1
 80009c2:	4611      	mov	r1, r2
 80009c4:	461a      	mov	r2, r3
 80009c6:	4623      	mov	r3, r4
 80009c8:	80fb      	strh	r3, [r7, #6]
 80009ca:	4603      	mov	r3, r0
 80009cc:	80bb      	strh	r3, [r7, #4]
 80009ce:	460b      	mov	r3, r1
 80009d0:	807b      	strh	r3, [r7, #2]
 80009d2:	4613      	mov	r3, r2
 80009d4:	803b      	strh	r3, [r7, #0]
    if (number == 0) {
 80009d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d106      	bne.n	80009ec <HMATH_voidDrawNumber+0x34>
        HMATH_voidDrawChar('0', x, y, color);
 80009de:	883b      	ldrh	r3, [r7, #0]
 80009e0:	887a      	ldrh	r2, [r7, #2]
 80009e2:	88b9      	ldrh	r1, [r7, #4]
 80009e4:	2030      	movs	r0, #48	@ 0x30
 80009e6:	f7ff ff95 	bl	8000914 <HMATH_voidDrawChar>
 80009ea:	e05e      	b.n	8000aaa <HMATH_voidDrawNumber+0xf2>
        return;
    }
    
    char num_str[8];
    u8 i = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	75fb      	strb	r3, [r7, #23]
    u8 is_negative = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	75bb      	strb	r3, [r7, #22]
    
    if (number < 0) {
 80009f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	da27      	bge.n	8000a4c <HMATH_voidDrawNumber+0x94>
        is_negative = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	75bb      	strb	r3, [r7, #22]
        number = -number;
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	425b      	negs	r3, r3
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	80fb      	strh	r3, [r7, #6]
    }
    
    /* Convert to string (reverse order) */
    while (number > 0) {
 8000a08:	e020      	b.n	8000a4c <HMATH_voidDrawNumber+0x94>
        num_str[i++] = '0' + (number % 10);
 8000a0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a0e:	4b28      	ldr	r3, [pc, #160]	@ (8000ab0 <HMATH_voidDrawNumber+0xf8>)
 8000a10:	fb83 1302 	smull	r1, r3, r3, r2
 8000a14:	1099      	asrs	r1, r3, #2
 8000a16:	17d3      	asrs	r3, r2, #31
 8000a18:	1ac9      	subs	r1, r1, r3
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	440b      	add	r3, r1
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	1c59      	adds	r1, r3, #1
 8000a2c:	75f9      	strb	r1, [r7, #23]
 8000a2e:	3230      	adds	r2, #48	@ 0x30
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	3318      	adds	r3, #24
 8000a34:	443b      	add	r3, r7
 8000a36:	f803 2c10 	strb.w	r2, [r3, #-16]
        number /= 10;
 8000a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab0 <HMATH_voidDrawNumber+0xf8>)
 8000a40:	fb82 1203 	smull	r1, r2, r2, r3
 8000a44:	1092      	asrs	r2, r2, #2
 8000a46:	17db      	asrs	r3, r3, #31
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	80fb      	strh	r3, [r7, #6]
    while (number > 0) {
 8000a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	dcda      	bgt.n	8000a0a <HMATH_voidDrawNumber+0x52>
    }
    
    u16 draw_x = x;
 8000a54:	88bb      	ldrh	r3, [r7, #4]
 8000a56:	82bb      	strh	r3, [r7, #20]
    
    /* Draw negative sign if needed */
    if (is_negative) {
 8000a58:	7dbb      	ldrb	r3, [r7, #22]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d008      	beq.n	8000a70 <HMATH_voidDrawNumber+0xb8>
        HMATH_voidDrawChar('-', draw_x, y, color);
 8000a5e:	883b      	ldrh	r3, [r7, #0]
 8000a60:	887a      	ldrh	r2, [r7, #2]
 8000a62:	8ab9      	ldrh	r1, [r7, #20]
 8000a64:	202d      	movs	r0, #45	@ 0x2d
 8000a66:	f7ff ff55 	bl	8000914 <HMATH_voidDrawChar>
        draw_x += 8;
 8000a6a:	8abb      	ldrh	r3, [r7, #20]
 8000a6c:	3308      	adds	r3, #8
 8000a6e:	82bb      	strh	r3, [r7, #20]
    }
    
    /* Draw digits in correct order */
    for (s8 j = i - 1; j >= 0; j--) {
 8000a70:	7dfb      	ldrb	r3, [r7, #23]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	74fb      	strb	r3, [r7, #19]
 8000a78:	e013      	b.n	8000aa2 <HMATH_voidDrawNumber+0xea>
        HMATH_voidDrawChar(num_str[j], draw_x, y, color);
 8000a7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000a7e:	3318      	adds	r3, #24
 8000a80:	443b      	add	r3, r7
 8000a82:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	887a      	ldrh	r2, [r7, #2]
 8000a8a:	8ab9      	ldrh	r1, [r7, #20]
 8000a8c:	f7ff ff42 	bl	8000914 <HMATH_voidDrawChar>
        draw_x += 8;
 8000a90:	8abb      	ldrh	r3, [r7, #20]
 8000a92:	3308      	adds	r3, #8
 8000a94:	82bb      	strh	r3, [r7, #20]
    for (s8 j = i - 1; j >= 0; j--) {
 8000a96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	74fb      	strb	r3, [r7, #19]
 8000aa2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	dae7      	bge.n	8000a7a <HMATH_voidDrawNumber+0xc2>
    }
}
 8000aaa:	371c      	adds	r7, #28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	66666667 	.word	0x66666667

08000ab4 <HMATH_voidFillRect>:

static void HMATH_voidFillRect(u16 x0, u16 y0, u16 x1, u16 y1, u16 color)
{
 8000ab4:	b490      	push	{r4, r7}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4604      	mov	r4, r0
 8000abc:	4608      	mov	r0, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	80fb      	strh	r3, [r7, #6]
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80bb      	strh	r3, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	807b      	strh	r3, [r7, #2]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	803b      	strh	r3, [r7, #0]
    if (x1 < x0) { u16 t = x0; x0 = x1; x1 = t; }
 8000ad2:	887a      	ldrh	r2, [r7, #2]
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d205      	bcs.n	8000ae6 <HMATH_voidFillRect+0x32>
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	827b      	strh	r3, [r7, #18]
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	80fb      	strh	r3, [r7, #6]
 8000ae2:	8a7b      	ldrh	r3, [r7, #18]
 8000ae4:	807b      	strh	r3, [r7, #2]
    if (y1 < y0) { u16 t = y0; y0 = y1; y1 = t; }
 8000ae6:	883a      	ldrh	r2, [r7, #0]
 8000ae8:	88bb      	ldrh	r3, [r7, #4]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d205      	bcs.n	8000afa <HMATH_voidFillRect+0x46>
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	823b      	strh	r3, [r7, #16]
 8000af2:	883b      	ldrh	r3, [r7, #0]
 8000af4:	80bb      	strh	r3, [r7, #4]
 8000af6:	8a3b      	ldrh	r3, [r7, #16]
 8000af8:	803b      	strh	r3, [r7, #0]
    if (x0 >= MATH_SCREEN_WIDTH) return;
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000afe:	d82b      	bhi.n	8000b58 <HMATH_voidFillRect+0xa4>
    if (y0 >= MATH_SCREEN_HEIGHT) return;
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	2b9f      	cmp	r3, #159	@ 0x9f
 8000b04:	d82a      	bhi.n	8000b5c <HMATH_voidFillRect+0xa8>
    if (x1 >= MATH_SCREEN_WIDTH) x1 = MATH_SCREEN_WIDTH - 1;
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b0a:	d901      	bls.n	8000b10 <HMATH_voidFillRect+0x5c>
 8000b0c:	237f      	movs	r3, #127	@ 0x7f
 8000b0e:	807b      	strh	r3, [r7, #2]
    if (y1 >= MATH_SCREEN_HEIGHT) y1 = MATH_SCREEN_HEIGHT - 1;
 8000b10:	883b      	ldrh	r3, [r7, #0]
 8000b12:	2b9f      	cmp	r3, #159	@ 0x9f
 8000b14:	d901      	bls.n	8000b1a <HMATH_voidFillRect+0x66>
 8000b16:	239f      	movs	r3, #159	@ 0x9f
 8000b18:	803b      	strh	r3, [r7, #0]

    for (u16 y = y0; y <= y1; y++) {
 8000b1a:	88bb      	ldrh	r3, [r7, #4]
 8000b1c:	82fb      	strh	r3, [r7, #22]
 8000b1e:	e016      	b.n	8000b4e <HMATH_voidFillRect+0x9a>
        u32 base = (u32)y * MATH_SCREEN_WIDTH;
 8000b20:	8afb      	ldrh	r3, [r7, #22]
 8000b22:	01db      	lsls	r3, r3, #7
 8000b24:	60fb      	str	r3, [r7, #12]
        for (u16 x = x0; x <= x1; x++) {
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	82bb      	strh	r3, [r7, #20]
 8000b2a:	e009      	b.n	8000b40 <HMATH_voidFillRect+0x8c>
            MATH_frame[base + x] = color;
 8000b2c:	8aba      	ldrh	r2, [r7, #20]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4413      	add	r3, r2
 8000b32:	490d      	ldr	r1, [pc, #52]	@ (8000b68 <HMATH_voidFillRect+0xb4>)
 8000b34:	8c3a      	ldrh	r2, [r7, #32]
 8000b36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (u16 x = x0; x <= x1; x++) {
 8000b3a:	8abb      	ldrh	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	82bb      	strh	r3, [r7, #20]
 8000b40:	8aba      	ldrh	r2, [r7, #20]
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d9f1      	bls.n	8000b2c <HMATH_voidFillRect+0x78>
    for (u16 y = y0; y <= y1; y++) {
 8000b48:	8afb      	ldrh	r3, [r7, #22]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	82fb      	strh	r3, [r7, #22]
 8000b4e:	8afa      	ldrh	r2, [r7, #22]
 8000b50:	883b      	ldrh	r3, [r7, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d9e4      	bls.n	8000b20 <HMATH_voidFillRect+0x6c>
 8000b56:	e002      	b.n	8000b5e <HMATH_voidFillRect+0xaa>
    if (x0 >= MATH_SCREEN_WIDTH) return;
 8000b58:	bf00      	nop
 8000b5a:	e000      	b.n	8000b5e <HMATH_voidFillRect+0xaa>
    if (y0 >= MATH_SCREEN_HEIGHT) return;
 8000b5c:	bf00      	nop
        }
    }
}
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc90      	pop	{r4, r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000080 	.word	0x20000080

08000b6c <HMATH_voidSetPixel>:

static void HMATH_voidSetPixel(u16 x, u16 y, u16 color)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
 8000b76:	460b      	mov	r3, r1
 8000b78:	80bb      	strh	r3, [r7, #4]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	807b      	strh	r3, [r7, #2]
    if (x >= MATH_SCREEN_WIDTH || y >= MATH_SCREEN_HEIGHT) return;
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b82:	d80b      	bhi.n	8000b9c <HMATH_voidSetPixel+0x30>
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	2b9f      	cmp	r3, #159	@ 0x9f
 8000b88:	d808      	bhi.n	8000b9c <HMATH_voidSetPixel+0x30>
    MATH_frame[(u32)y * MATH_SCREEN_WIDTH + x] = color;
 8000b8a:	88bb      	ldrh	r3, [r7, #4]
 8000b8c:	01da      	lsls	r2, r3, #7
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	4413      	add	r3, r2
 8000b92:	4905      	ldr	r1, [pc, #20]	@ (8000ba8 <HMATH_voidSetPixel+0x3c>)
 8000b94:	887a      	ldrh	r2, [r7, #2]
 8000b96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000b9a:	e000      	b.n	8000b9e <HMATH_voidSetPixel+0x32>
    if (x >= MATH_SCREEN_WIDTH || y >= MATH_SCREEN_HEIGHT) return;
 8000b9c:	bf00      	nop
}
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	20000080 	.word	0x20000080

08000bac <HMATH_u32GetMillis>:

static u32 HMATH_u32GetMillis(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
    /* Simple millisecond counter using static variable */
    static u32 t = 0;
    t += 20; /* Assume poll called every ~20ms */
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <HMATH_u32GetMillis+0x1c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3314      	adds	r3, #20
 8000bb6:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <HMATH_u32GetMillis+0x1c>)
 8000bb8:	6013      	str	r3, [r2, #0]
    return t;
 8000bba:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <HMATH_u32GetMillis+0x1c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	2000a09c 	.word	0x2000a09c

08000bcc <HMATH_u16GetRandom>:

static u16 HMATH_u16GetRandom(u16 max)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
    /* Simple Linear Feedback Shift Register for pseudo-random numbers */
    u16 bit = ((lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 5)) & 1;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <HMATH_u16GetRandom+0x74>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <HMATH_u16GetRandom+0x74>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	4053      	eors	r3, r2
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <HMATH_u16GetRandom+0x74>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	08db      	lsrs	r3, r3, #3
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4053      	eors	r3, r2
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <HMATH_u16GetRandom+0x74>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	4053      	eors	r3, r2
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	81fb      	strh	r3, [r7, #14]
    lfsr = (lfsr >> 1) | (bit << 15);
 8000c04:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <HMATH_u16GetRandom+0x74>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	085b      	lsrs	r3, r3, #1
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c12:	03db      	lsls	r3, r3, #15
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <HMATH_u16GetRandom+0x74>)
 8000c1e:	801a      	strh	r2, [r3, #0]
    return lfsr % max;
 8000c20:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <HMATH_u16GetRandom+0x74>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	88fa      	ldrh	r2, [r7, #6]
 8000c26:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c2a:	fb01 f202 	mul.w	r2, r1, r2
 8000c2e:	1a9b      	subs	r3, r3, r2
 8000c30:	b29b      	uxth	r3, r3
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000000 	.word	0x20000000

08000c44 <HMATH_voidInitRandom>:

static void HMATH_voidInitRandom(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
    /* Initialize with a non-zero seed */
    lfsr = 0xBCE1;
 8000c48:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <HMATH_voidInitRandom+0x18>)
 8000c4a:	f64b 42e1 	movw	r2, #48353	@ 0xbce1
 8000c4e:	801a      	strh	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000000 	.word	0x20000000

08000c60 <HMATH_u8GetNumberWidth>:
    while (text[i] != '\0') i++;
    return i * 8; /* Each character is 8 pixels wide including spacing */
}

static u8 HMATH_u8GetNumberWidth(s16 number)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
    if (number == 0) return 8;
 8000c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <HMATH_u8GetNumberWidth+0x16>
 8000c72:	2308      	movs	r3, #8
 8000c74:	e024      	b.n	8000cc0 <HMATH_u8GetNumberWidth+0x60>
    
    u8 digits = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
    u8 is_negative = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73bb      	strb	r3, [r7, #14]
    
    if (number < 0) {
 8000c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	da12      	bge.n	8000cac <HMATH_u8GetNumberWidth+0x4c>
        is_negative = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73bb      	strb	r3, [r7, #14]
        number = -number;
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	80fb      	strh	r3, [r7, #6]
    }
    
    while (number > 0) {
 8000c92:	e00b      	b.n	8000cac <HMATH_u8GetNumberWidth+0x4c>
        digits++;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	3301      	adds	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
        number /= 10;
 8000c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ccc <HMATH_u8GetNumberWidth+0x6c>)
 8000ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca4:	1092      	asrs	r2, r2, #2
 8000ca6:	17db      	asrs	r3, r3, #31
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	80fb      	strh	r3, [r7, #6]
    while (number > 0) {
 8000cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dcef      	bgt.n	8000c94 <HMATH_u8GetNumberWidth+0x34>
    }
    
    return (digits + is_negative) * 8;
 8000cb4:	7bfa      	ldrb	r2, [r7, #15]
 8000cb6:	7bbb      	ldrb	r3, [r7, #14]
 8000cb8:	4413      	add	r3, r2
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	b2db      	uxtb	r3, r3
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	66666667 	.word	0x66666667

08000cd0 <HMEM_btnFlipCallback>:
/* Card symbols - simple patterns for 8 different symbols */
static const u8 HMEM_symbols[8] = {1, 2, 3, 4, 5, 6, 7, 8};

/* Interrupt callback functions */
void HMEM_btnFlipCallback(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
    btnFlipPressed = 1;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <HMEM_btnFlipCallback+0x14>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	2000a0bc 	.word	0x2000a0bc

08000ce8 <HMEM_btnNextCallback>:

void HMEM_btnNextCallback(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
    btnNextPressed = 1;
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <HMEM_btnNextCallback+0x14>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	2000a0bd 	.word	0x2000a0bd

08000d00 <HMEM_btnResetCallback>:

void HMEM_btnResetCallback(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
    btnResetPressed = 1;
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HMEM_btnResetCallback+0x14>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	2000a0be 	.word	0x2000a0be

08000d18 <HMEM_voidInit>:
static void HMEM_voidDrawLine(int x0, int y0, int x1, int y1, u16 color);

/* ------------ Public implementations ------------- */

void HMEM_voidInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    /* Configure EXTI for Memory game buttons */
    // FLIP button - EXTI8
    MEXTI_voidSetInterruptPort(EXTI_Line8, EXTI_PORTA);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2008      	movs	r0, #8
 8000d20:	f001 ff52 	bl	8002bc8 <MEXTI_voidSetInterruptPort>
    MEXTI_voidSetTrigger(EXTI_Line8, EXTI_Falling);
 8000d24:	2100      	movs	r1, #0
 8000d26:	2008      	movs	r0, #8
 8000d28:	f001 ffa0 	bl	8002c6c <MEXTI_voidSetTrigger>
    MEXTI_voidCallBack(HMEM_btnFlipCallback, EXTI_Line8);
 8000d2c:	2108      	movs	r1, #8
 8000d2e:	481a      	ldr	r0, [pc, #104]	@ (8000d98 <HMEM_voidInit+0x80>)
 8000d30:	f001 fff8 	bl	8002d24 <MEXTI_voidCallBack>
    MEXTI_voidEnable(EXTI_Line8);
 8000d34:	2008      	movs	r0, #8
 8000d36:	f001 ff81 	bl	8002c3c <MEXTI_voidEnable>

    // NEXT button - EXTI9
    MEXTI_voidSetInterruptPort(EXTI_Line9, EXTI_PORTA);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2009      	movs	r0, #9
 8000d3e:	f001 ff43 	bl	8002bc8 <MEXTI_voidSetInterruptPort>
    MEXTI_voidSetTrigger(EXTI_Line9, EXTI_Falling);
 8000d42:	2100      	movs	r1, #0
 8000d44:	2009      	movs	r0, #9
 8000d46:	f001 ff91 	bl	8002c6c <MEXTI_voidSetTrigger>
    MEXTI_voidCallBack(HMEM_btnNextCallback, EXTI_Line9);
 8000d4a:	2109      	movs	r1, #9
 8000d4c:	4813      	ldr	r0, [pc, #76]	@ (8000d9c <HMEM_voidInit+0x84>)
 8000d4e:	f001 ffe9 	bl	8002d24 <MEXTI_voidCallBack>
    MEXTI_voidEnable(EXTI_Line9);
 8000d52:	2009      	movs	r0, #9
 8000d54:	f001 ff72 	bl	8002c3c <MEXTI_voidEnable>

    // RESET button - EXTI10
    MEXTI_voidSetInterruptPort(EXTI_Line10, EXTI_PORTA);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f001 ff34 	bl	8002bc8 <MEXTI_voidSetInterruptPort>
    MEXTI_voidSetTrigger(EXTI_Line10, EXTI_Falling);
 8000d60:	2100      	movs	r1, #0
 8000d62:	200a      	movs	r0, #10
 8000d64:	f001 ff82 	bl	8002c6c <MEXTI_voidSetTrigger>
    MEXTI_voidCallBack(HMEM_btnResetCallback, EXTI_Line10);
 8000d68:	210a      	movs	r1, #10
 8000d6a:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <HMEM_voidInit+0x88>)
 8000d6c:	f001 ffda 	bl	8002d24 <MEXTI_voidCallBack>
    MEXTI_voidEnable(EXTI_Line10);
 8000d70:	200a      	movs	r0, #10
 8000d72:	f001 ff63 	bl	8002c3c <MEXTI_voidEnable>

    /* Enable NVIC interrupts */
    MNVIC_voidEnable(40); // EXTI15_10 (covers EXTI10)
 8000d76:	2028      	movs	r0, #40	@ 0x28
 8000d78:	f002 fc12 	bl	80035a0 <MNVIC_voidEnable>
    MNVIC_voidEnable(23); // EXTI9_5 (covers EXTI8, EXTI9)
 8000d7c:	2017      	movs	r0, #23
 8000d7e:	f002 fc0f 	bl	80035a0 <MNVIC_voidEnable>

    /* Initialize display */
    HTFT_voidInit();
 8000d82:	f001 f9c1 	bl	8002108 <HTFT_voidInit>
    
    /* Start new game */
    HMEM_voidResetGame();
 8000d86:	f000 f80f 	bl	8000da8 <HMEM_voidResetGame>
    
    /* Initial render */
    HMEM_voidDrawFrame();
 8000d8a:	f000 fa93 	bl	80012b4 <HMEM_voidDrawFrame>
    HTFT_voidDisplay(HMEM_frame);
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <HMEM_voidInit+0x8c>)
 8000d90:	f001 fa31 	bl	80021f6 <HTFT_voidDisplay>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08000cd1 	.word	0x08000cd1
 8000d9c:	08000ce9 	.word	0x08000ce9
 8000da0:	08000d01 	.word	0x08000d01
 8000da4:	20000080 	.word	0x20000080

08000da8 <HMEM_voidResetGame>:

void HMEM_voidResetGame(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
    /* Initialize game state */
    HMEM_cursor_row = 0;
 8000dae:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <HMEM_voidResetGame+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
    HMEM_cursor_col = 0;
 8000db4:	4b26      	ldr	r3, [pc, #152]	@ (8000e50 <HMEM_voidResetGame+0xa8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
    HMEM_game_state = HMEM_STATE_PLAYING;
 8000dba:	4b26      	ldr	r3, [pc, #152]	@ (8000e54 <HMEM_voidResetGame+0xac>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
    HMEM_move_count = 0;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <HMEM_voidResetGame+0xb0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	801a      	strh	r2, [r3, #0]
    HMEM_flipped_count = 0;
 8000dc6:	4b25      	ldr	r3, [pc, #148]	@ (8000e5c <HMEM_voidResetGame+0xb4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]

    /* Clear framebuffer */
    memset(HMEM_frame, 0, sizeof(HMEM_frame));
 8000dcc:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4823      	ldr	r0, [pc, #140]	@ (8000e60 <HMEM_voidResetGame+0xb8>)
 8000dd4:	f003 fd95 	bl	8004902 <memset>

    /* Initialize board with pairs of symbols */
    /* We assume HMEM_TOTAL_CARDS == HMEM_GRID_ROWS * HMEM_GRID_COLS and even */
    u16 symbol_index = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	80fb      	strh	r3, [r7, #6]
    for (u8 r = 0; r < HMEM_GRID_ROWS; ++r) {
 8000ddc:	2300      	movs	r3, #0
 8000dde:	717b      	strb	r3, [r7, #5]
 8000de0:	e02b      	b.n	8000e3a <HMEM_voidResetGame+0x92>
        for (u8 c = 0; c < HMEM_GRID_COLS; ++c) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	713b      	strb	r3, [r7, #4]
 8000de6:	e022      	b.n	8000e2e <HMEM_voidResetGame+0x86>
            /* Each symbol should appear exactly twice; use symbols array cyclically if needed */
            u8 sym = HMEM_symbols[(symbol_index / 2) % (sizeof(HMEM_symbols)/sizeof(HMEM_symbols[0]))];
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	085b      	lsrs	r3, r3, #1
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e64 <HMEM_voidResetGame+0xbc>)
 8000df4:	5cd3      	ldrb	r3, [r2, r3]
 8000df6:	70fb      	strb	r3, [r7, #3]
            HMEM_board[r][c].symbol = sym;
 8000df8:	797a      	ldrb	r2, [r7, #5]
 8000dfa:	7939      	ldrb	r1, [r7, #4]
 8000dfc:	481a      	ldr	r0, [pc, #104]	@ (8000e68 <HMEM_voidResetGame+0xc0>)
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	78fa      	ldrb	r2, [r7, #3]
 8000e08:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
            HMEM_board[r][c].state = HMEM_CARD_FACE_DOWN;
 8000e0c:	797a      	ldrb	r2, [r7, #5]
 8000e0e:	7939      	ldrb	r1, [r7, #4]
 8000e10:	4815      	ldr	r0, [pc, #84]	@ (8000e68 <HMEM_voidResetGame+0xc0>)
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4403      	add	r3, r0
 8000e1e:	2200      	movs	r2, #0
 8000e20:	705a      	strb	r2, [r3, #1]
            ++symbol_index;
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	3301      	adds	r3, #1
 8000e26:	80fb      	strh	r3, [r7, #6]
        for (u8 c = 0; c < HMEM_GRID_COLS; ++c) {
 8000e28:	793b      	ldrb	r3, [r7, #4]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	713b      	strb	r3, [r7, #4]
 8000e2e:	793b      	ldrb	r3, [r7, #4]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d9d9      	bls.n	8000de8 <HMEM_voidResetGame+0x40>
    for (u8 r = 0; r < HMEM_GRID_ROWS; ++r) {
 8000e34:	797b      	ldrb	r3, [r7, #5]
 8000e36:	3301      	adds	r3, #1
 8000e38:	717b      	strb	r3, [r7, #5]
 8000e3a:	797b      	ldrb	r3, [r7, #5]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d9d0      	bls.n	8000de2 <HMEM_voidResetGame+0x3a>
        }
    }
    
    /* Shuffle the cards */
    HMEM_voidShuffleCards();
 8000e40:	f000 f972 	bl	8001128 <HMEM_voidShuffleCards>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000a0ac 	.word	0x2000a0ac
 8000e50:	2000a0ad 	.word	0x2000a0ad
 8000e54:	2000a0ae 	.word	0x2000a0ae
 8000e58:	2000a0b0 	.word	0x2000a0b0
 8000e5c:	2000a0b6 	.word	0x2000a0b6
 8000e60:	20000080 	.word	0x20000080
 8000e64:	08005908 	.word	0x08005908
 8000e68:	2000a0a0 	.word	0x2000a0a0

08000e6c <HMEM_u16GetFrameBuffer>:

const u16* HMEM_u16GetFrameBuffer(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
    return GlobalFrameBuffer;
 8000e70:	4b02      	ldr	r3, [pc, #8]	@ (8000e7c <HMEM_u16GetFrameBuffer+0x10>)
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	20000080 	.word	0x20000080

08000e80 <HMEM_voidPoll>:
{
    return HMEM_move_count;
}

void HMEM_voidPoll(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af02      	add	r7, sp, #8
    u32 now = HMEM_u32GetMillis();
 8000e86:	f000 f93f 	bl	8001108 <HMEM_u32GetMillis>
 8000e8a:	60f8      	str	r0, [r7, #12]

    /* Handle game state transitions */
    if (HMEM_game_state == HMEM_STATE_SHOWING_MISMATCH) {
 8000e8c:	4b8e      	ldr	r3, [pc, #568]	@ (80010c8 <HMEM_voidPoll+0x248>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d130      	bne.n	8000ef6 <HMEM_voidPoll+0x76>
        if (now - HMEM_mismatch_start_time >= HMEM_FLIP_DELAY_MS) {
 8000e94:	4b8d      	ldr	r3, [pc, #564]	@ (80010cc <HMEM_voidPoll+0x24c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b45      	cmp	r3, #69	@ 0x45
 8000e9e:	f240 810f 	bls.w	80010c0 <HMEM_voidPoll+0x240>
            /* Flip mismatched cards back face down */
            HMEM_board[HMEM_first_flipped_row][HMEM_first_flipped_col].state = HMEM_CARD_FACE_DOWN;
 8000ea2:	4b8b      	ldr	r3, [pc, #556]	@ (80010d0 <HMEM_voidPoll+0x250>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4b8a      	ldr	r3, [pc, #552]	@ (80010d4 <HMEM_voidPoll+0x254>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	4a8a      	ldr	r2, [pc, #552]	@ (80010d8 <HMEM_voidPoll+0x258>)
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	440b      	add	r3, r1
 8000eb6:	4403      	add	r3, r0
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	705a      	strb	r2, [r3, #1]
            HMEM_board[HMEM_second_flipped_row][HMEM_second_flipped_col].state = HMEM_CARD_FACE_DOWN;
 8000ec0:	4b86      	ldr	r3, [pc, #536]	@ (80010dc <HMEM_voidPoll+0x25c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4b86      	ldr	r3, [pc, #536]	@ (80010e0 <HMEM_voidPoll+0x260>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	4a82      	ldr	r2, [pc, #520]	@ (80010d8 <HMEM_voidPoll+0x258>)
 8000ece:	460b      	mov	r3, r1
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	440b      	add	r3, r1
 8000ed4:	4403      	add	r3, r0
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	2200      	movs	r2, #0
 8000edc:	705a      	strb	r2, [r3, #1]
            HMEM_flipped_count = 0;
 8000ede:	4b81      	ldr	r3, [pc, #516]	@ (80010e4 <HMEM_voidPoll+0x264>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
            HMEM_game_state = HMEM_STATE_PLAYING;
 8000ee4:	4b78      	ldr	r3, [pc, #480]	@ (80010c8 <HMEM_voidPoll+0x248>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
            
            /* Redraw the frame */
            HMEM_voidDrawFrame();
 8000eea:	f000 f9e3 	bl	80012b4 <HMEM_voidDrawFrame>
            HTFT_voidDisplay(HMEM_frame);
 8000eee:	487e      	ldr	r0, [pc, #504]	@ (80010e8 <HMEM_voidPoll+0x268>)
 8000ef0:	f001 f981 	bl	80021f6 <HTFT_voidDisplay>
        }
        return; /* Don't process buttons during mismatch display */
 8000ef4:	e0e4      	b.n	80010c0 <HMEM_voidPoll+0x240>
    }

    /* Check button flags set by interrupts */
    if (btnResetPressed) {
 8000ef6:	4b7d      	ldr	r3, [pc, #500]	@ (80010ec <HMEM_voidPoll+0x26c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d009      	beq.n	8000f14 <HMEM_voidPoll+0x94>
        btnResetPressed = 0; // Clear flag
 8000f00:	4b7a      	ldr	r3, [pc, #488]	@ (80010ec <HMEM_voidPoll+0x26c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
        HMEM_voidResetGame();
 8000f06:	f7ff ff4f 	bl	8000da8 <HMEM_voidResetGame>
        HMEM_voidDrawFrame();
 8000f0a:	f000 f9d3 	bl	80012b4 <HMEM_voidDrawFrame>
        HTFT_voidDisplay(HMEM_frame);
 8000f0e:	4876      	ldr	r0, [pc, #472]	@ (80010e8 <HMEM_voidPoll+0x268>)
 8000f10:	f001 f971 	bl	80021f6 <HTFT_voidDisplay>
    }

    if (btnNextPressed) {
 8000f14:	4b76      	ldr	r3, [pc, #472]	@ (80010f0 <HMEM_voidPoll+0x270>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d021      	beq.n	8000f62 <HMEM_voidPoll+0xe2>
        btnNextPressed = 0; // Clear flag
 8000f1e:	4b74      	ldr	r3, [pc, #464]	@ (80010f0 <HMEM_voidPoll+0x270>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
        
        /* Move to next position */
        HMEM_cursor_col++;
 8000f24:	4b73      	ldr	r3, [pc, #460]	@ (80010f4 <HMEM_voidPoll+0x274>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b71      	ldr	r3, [pc, #452]	@ (80010f4 <HMEM_voidPoll+0x274>)
 8000f2e:	701a      	strb	r2, [r3, #0]
        if (HMEM_cursor_col >= HMEM_GRID_COLS) {
 8000f30:	4b70      	ldr	r3, [pc, #448]	@ (80010f4 <HMEM_voidPoll+0x274>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d90f      	bls.n	8000f58 <HMEM_voidPoll+0xd8>
            HMEM_cursor_col = 0;
 8000f38:	4b6e      	ldr	r3, [pc, #440]	@ (80010f4 <HMEM_voidPoll+0x274>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
            HMEM_cursor_row++;
 8000f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80010f8 <HMEM_voidPoll+0x278>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b6c      	ldr	r3, [pc, #432]	@ (80010f8 <HMEM_voidPoll+0x278>)
 8000f48:	701a      	strb	r2, [r3, #0]
            if (HMEM_cursor_row >= HMEM_GRID_ROWS) {
 8000f4a:	4b6b      	ldr	r3, [pc, #428]	@ (80010f8 <HMEM_voidPoll+0x278>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d902      	bls.n	8000f58 <HMEM_voidPoll+0xd8>
                HMEM_cursor_row = 0;
 8000f52:	4b69      	ldr	r3, [pc, #420]	@ (80010f8 <HMEM_voidPoll+0x278>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
            }
        }
        
        /* Redraw frame with new cursor position */
        HMEM_voidDrawFrame();
 8000f58:	f000 f9ac 	bl	80012b4 <HMEM_voidDrawFrame>
        HTFT_voidDisplay(HMEM_frame);
 8000f5c:	4862      	ldr	r0, [pc, #392]	@ (80010e8 <HMEM_voidPoll+0x268>)
 8000f5e:	f001 f94a 	bl	80021f6 <HTFT_voidDisplay>
    }

    if (btnFlipPressed && HMEM_game_state == HMEM_STATE_PLAYING) {
 8000f62:	4b66      	ldr	r3, [pc, #408]	@ (80010fc <HMEM_voidPoll+0x27c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d07f      	beq.n	800106c <HMEM_voidPoll+0x1ec>
 8000f6c:	4b56      	ldr	r3, [pc, #344]	@ (80010c8 <HMEM_voidPoll+0x248>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d17b      	bne.n	800106c <HMEM_voidPoll+0x1ec>
        btnFlipPressed = 0; // Clear flag
 8000f74:	4b61      	ldr	r3, [pc, #388]	@ (80010fc <HMEM_voidPoll+0x27c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
        
        HMEM_Card_t* current_card = &HMEM_board[HMEM_cursor_row][HMEM_cursor_col];
 8000f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80010f8 <HMEM_voidPoll+0x278>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b5c      	ldr	r3, [pc, #368]	@ (80010f4 <HMEM_voidPoll+0x274>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4a51      	ldr	r2, [pc, #324]	@ (80010d8 <HMEM_voidPoll+0x258>)
 8000f92:	4413      	add	r3, r2
 8000f94:	60bb      	str	r3, [r7, #8]
        
        /* Only flip face-down cards */
        if (current_card->state == HMEM_CARD_FACE_DOWN) {
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	785b      	ldrb	r3, [r3, #1]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d166      	bne.n	800106c <HMEM_voidPoll+0x1ec>
            current_card->state = HMEM_CARD_FACE_UP;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	705a      	strb	r2, [r3, #1]
            
            if (HMEM_flipped_count == 0) {
 8000fa4:	4b4f      	ldr	r3, [pc, #316]	@ (80010e4 <HMEM_voidPoll+0x264>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10b      	bne.n	8000fc4 <HMEM_voidPoll+0x144>
                /* First card flipped */
                HMEM_first_flipped_row = HMEM_cursor_row;
 8000fac:	4b52      	ldr	r3, [pc, #328]	@ (80010f8 <HMEM_voidPoll+0x278>)
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	4b47      	ldr	r3, [pc, #284]	@ (80010d0 <HMEM_voidPoll+0x250>)
 8000fb2:	701a      	strb	r2, [r3, #0]
                HMEM_first_flipped_col = HMEM_cursor_col;
 8000fb4:	4b4f      	ldr	r3, [pc, #316]	@ (80010f4 <HMEM_voidPoll+0x274>)
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	4b46      	ldr	r3, [pc, #280]	@ (80010d4 <HMEM_voidPoll+0x254>)
 8000fba:	701a      	strb	r2, [r3, #0]
                HMEM_flipped_count = 1;
 8000fbc:	4b49      	ldr	r3, [pc, #292]	@ (80010e4 <HMEM_voidPoll+0x264>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e04e      	b.n	8001062 <HMEM_voidPoll+0x1e2>
            } else if (HMEM_flipped_count == 1) {
 8000fc4:	4b47      	ldr	r3, [pc, #284]	@ (80010e4 <HMEM_voidPoll+0x264>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d14a      	bne.n	8001062 <HMEM_voidPoll+0x1e2>
                /* Second card flipped */
                HMEM_second_flipped_row = HMEM_cursor_row;
 8000fcc:	4b4a      	ldr	r3, [pc, #296]	@ (80010f8 <HMEM_voidPoll+0x278>)
 8000fce:	781a      	ldrb	r2, [r3, #0]
 8000fd0:	4b42      	ldr	r3, [pc, #264]	@ (80010dc <HMEM_voidPoll+0x25c>)
 8000fd2:	701a      	strb	r2, [r3, #0]
                HMEM_second_flipped_col = HMEM_cursor_col;
 8000fd4:	4b47      	ldr	r3, [pc, #284]	@ (80010f4 <HMEM_voidPoll+0x274>)
 8000fd6:	781a      	ldrb	r2, [r3, #0]
 8000fd8:	4b41      	ldr	r3, [pc, #260]	@ (80010e0 <HMEM_voidPoll+0x260>)
 8000fda:	701a      	strb	r2, [r3, #0]
                HMEM_flipped_count = 2;
 8000fdc:	4b41      	ldr	r3, [pc, #260]	@ (80010e4 <HMEM_voidPoll+0x264>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	701a      	strb	r2, [r3, #0]
                HMEM_move_count++;
 8000fe2:	4b47      	ldr	r3, [pc, #284]	@ (8001100 <HMEM_voidPoll+0x280>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b45      	ldr	r3, [pc, #276]	@ (8001100 <HMEM_voidPoll+0x280>)
 8000fec:	801a      	strh	r2, [r3, #0]
                
                /* Check for match */
                HMEM_Card_t* first_card = &HMEM_board[HMEM_first_flipped_row][HMEM_first_flipped_col];
 8000fee:	4b38      	ldr	r3, [pc, #224]	@ (80010d0 <HMEM_voidPoll+0x250>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b37      	ldr	r3, [pc, #220]	@ (80010d4 <HMEM_voidPoll+0x254>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	440b      	add	r3, r1
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4a34      	ldr	r2, [pc, #208]	@ (80010d8 <HMEM_voidPoll+0x258>)
 8001006:	4413      	add	r3, r2
 8001008:	607b      	str	r3, [r7, #4]
                HMEM_Card_t* second_card = &HMEM_board[HMEM_second_flipped_row][HMEM_second_flipped_col];
 800100a:	4b34      	ldr	r3, [pc, #208]	@ (80010dc <HMEM_voidPoll+0x25c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <HMEM_voidPoll+0x260>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	440b      	add	r3, r1
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4a2d      	ldr	r2, [pc, #180]	@ (80010d8 <HMEM_voidPoll+0x258>)
 8001022:	4413      	add	r3, r2
 8001024:	603b      	str	r3, [r7, #0]
                
                if (first_card->symbol == second_card->symbol) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d111      	bne.n	8001056 <HMEM_voidPoll+0x1d6>
                    /* Match found */
                    first_card->state = HMEM_CARD_MATCHED;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2202      	movs	r2, #2
 8001036:	705a      	strb	r2, [r3, #1]
                    second_card->state = HMEM_CARD_MATCHED;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2202      	movs	r2, #2
 800103c:	705a      	strb	r2, [r3, #1]
                    HMEM_flipped_count = 0;
 800103e:	4b29      	ldr	r3, [pc, #164]	@ (80010e4 <HMEM_voidPoll+0x264>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
                    
                    /* Check for win condition */
                    if (HMEM_u8CheckWin()) {
 8001044:	f000 f90a 	bl	800125c <HMEM_u8CheckWin>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d009      	beq.n	8001062 <HMEM_voidPoll+0x1e2>
                        HMEM_game_state = HMEM_STATE_WON;
 800104e:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <HMEM_voidPoll+0x248>)
 8001050:	2202      	movs	r2, #2
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e005      	b.n	8001062 <HMEM_voidPoll+0x1e2>
                    }
                } else {
                    /* No match - start mismatch display timer */
                    HMEM_game_state = HMEM_STATE_SHOWING_MISMATCH;
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <HMEM_voidPoll+0x248>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
                    HMEM_mismatch_start_time = now;
 800105c:	4a1b      	ldr	r2, [pc, #108]	@ (80010cc <HMEM_voidPoll+0x24c>)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6013      	str	r3, [r2, #0]
                }
            }
            
            /* Redraw frame */
            HMEM_voidDrawFrame();
 8001062:	f000 f927 	bl	80012b4 <HMEM_voidDrawFrame>
            HTFT_voidDisplay(HMEM_frame);
 8001066:	4820      	ldr	r0, [pc, #128]	@ (80010e8 <HMEM_voidPoll+0x268>)
 8001068:	f001 f8c5 	bl	80021f6 <HTFT_voidDisplay>
        }
    }

    /* Handle win state */
    if (HMEM_game_state == HMEM_STATE_WON) {
 800106c:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <HMEM_voidPoll+0x248>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d126      	bne.n	80010c2 <HMEM_voidPoll+0x242>
        /* Flash screen green briefly */
        static u32 win_flash_start = 0;
        if (win_flash_start == 0) {
 8001074:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <HMEM_voidPoll+0x284>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10f      	bne.n	800109c <HMEM_voidPoll+0x21c>
            win_flash_start = now;
 800107c:	4a21      	ldr	r2, [pc, #132]	@ (8001104 <HMEM_voidPoll+0x284>)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6013      	str	r3, [r2, #0]
            HMEM_voidFillRect(0, 0, HMEM_SCREEN_WIDTH-1, HMEM_SCREEN_HEIGHT-1, HMEM_COLOR_MATCHED);
 8001082:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	239f      	movs	r3, #159	@ 0x9f
 800108a:	227f      	movs	r2, #127	@ 0x7f
 800108c:	2100      	movs	r1, #0
 800108e:	2000      	movs	r0, #0
 8001090:	f000 fcee 	bl	8001a70 <HMEM_voidFillRect>
            HTFT_voidDisplay(HMEM_frame);
 8001094:	4814      	ldr	r0, [pc, #80]	@ (80010e8 <HMEM_voidPoll+0x268>)
 8001096:	f001 f8ae 	bl	80021f6 <HTFT_voidDisplay>
 800109a:	e012      	b.n	80010c2 <HMEM_voidPoll+0x242>
        } else if (now - win_flash_start >= 2000) {
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HMEM_voidPoll+0x284>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80010a8:	d30b      	bcc.n	80010c2 <HMEM_voidPoll+0x242>
            /* Auto-reset after 2 seconds */
            win_flash_start = 0;
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HMEM_voidPoll+0x284>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
            HMEM_voidResetGame();
 80010b0:	f7ff fe7a 	bl	8000da8 <HMEM_voidResetGame>
            HMEM_voidDrawFrame();
 80010b4:	f000 f8fe 	bl	80012b4 <HMEM_voidDrawFrame>
            HTFT_voidDisplay(HMEM_frame);
 80010b8:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <HMEM_voidPoll+0x268>)
 80010ba:	f001 f89c 	bl	80021f6 <HTFT_voidDisplay>
 80010be:	e000      	b.n	80010c2 <HMEM_voidPoll+0x242>
        return; /* Don't process buttons during mismatch display */
 80010c0:	bf00      	nop
        }
    }
}
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000a0ae 	.word	0x2000a0ae
 80010cc:	2000a0b8 	.word	0x2000a0b8
 80010d0:	2000a0b2 	.word	0x2000a0b2
 80010d4:	2000a0b3 	.word	0x2000a0b3
 80010d8:	2000a0a0 	.word	0x2000a0a0
 80010dc:	2000a0b4 	.word	0x2000a0b4
 80010e0:	2000a0b5 	.word	0x2000a0b5
 80010e4:	2000a0b6 	.word	0x2000a0b6
 80010e8:	20000080 	.word	0x20000080
 80010ec:	2000a0be 	.word	0x2000a0be
 80010f0:	2000a0bd 	.word	0x2000a0bd
 80010f4:	2000a0ad 	.word	0x2000a0ad
 80010f8:	2000a0ac 	.word	0x2000a0ac
 80010fc:	2000a0bc 	.word	0x2000a0bc
 8001100:	2000a0b0 	.word	0x2000a0b0
 8001104:	2000a0c0 	.word	0x2000a0c0

08001108 <HMEM_u32GetMillis>:

/* ------------ Private implementations ------------- */

static u32 HMEM_u32GetMillis(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
    /* Simple incrementing counter - in real implementation use proper millisecond timer */
    static u32 t = 0;
    t += 20; /* Assuming poll called every 20ms */
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <HMEM_u32GetMillis+0x1c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3314      	adds	r3, #20
 8001112:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <HMEM_u32GetMillis+0x1c>)
 8001114:	6013      	str	r3, [r2, #0]
    return t;
 8001116:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <HMEM_u32GetMillis+0x1c>)
 8001118:	681b      	ldr	r3, [r3, #0]
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	2000a0c4 	.word	0x2000a0c4

08001128 <HMEM_voidShuffleCards>:

static void HMEM_voidShuffleCards(void)
{
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
    /* Simple shuffle algorithm - Fisher-Yates */
    for (int i = HMEM_TOTAL_CARDS - 1; i > 0; --i) {
 800112e:	2305      	movs	r3, #5
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e085      	b.n	8001240 <HMEM_voidShuffleCards+0x118>
        int j = rand() % (i + 1);
 8001134:	f003 faa2 	bl	800467c <rand>
 8001138:	4602      	mov	r2, r0
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3301      	adds	r3, #1
 800113e:	fb92 f1f3 	sdiv	r1, r2, r3
 8001142:	fb01 f303 	mul.w	r3, r1, r3
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	60bb      	str	r3, [r7, #8]
        
        /* Convert linear indices to row,col */
        u8 i_row = i / HMEM_GRID_COLS;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4a41      	ldr	r2, [pc, #260]	@ (8001254 <HMEM_voidShuffleCards+0x12c>)
 800114e:	fb82 1203 	smull	r1, r2, r2, r3
 8001152:	17db      	asrs	r3, r3, #31
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	71fb      	strb	r3, [r7, #7]
        u8 i_col = i % HMEM_GRID_COLS;
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4b3e      	ldr	r3, [pc, #248]	@ (8001254 <HMEM_voidShuffleCards+0x12c>)
 800115c:	fb83 3102 	smull	r3, r1, r3, r2
 8001160:	17d3      	asrs	r3, r2, #31
 8001162:	1ac9      	subs	r1, r1, r3
 8001164:	460b      	mov	r3, r1
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	440b      	add	r3, r1
 800116a:	1ad1      	subs	r1, r2, r3
 800116c:	460b      	mov	r3, r1
 800116e:	71bb      	strb	r3, [r7, #6]
        u8 j_row = j / HMEM_GRID_COLS;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4a38      	ldr	r2, [pc, #224]	@ (8001254 <HMEM_voidShuffleCards+0x12c>)
 8001174:	fb82 1203 	smull	r1, r2, r2, r3
 8001178:	17db      	asrs	r3, r3, #31
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	717b      	strb	r3, [r7, #5]
        u8 j_col = j % HMEM_GRID_COLS;
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	4b34      	ldr	r3, [pc, #208]	@ (8001254 <HMEM_voidShuffleCards+0x12c>)
 8001182:	fb83 3102 	smull	r3, r1, r3, r2
 8001186:	17d3      	asrs	r3, r2, #31
 8001188:	1ac9      	subs	r1, r1, r3
 800118a:	460b      	mov	r3, r1
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	440b      	add	r3, r1
 8001190:	1ad1      	subs	r1, r2, r3
 8001192:	460b      	mov	r3, r1
 8001194:	713b      	strb	r3, [r7, #4]
        
        /* Swap symbols */
        u8 temp_symbol = HMEM_board[i_row][i_col].symbol;
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	79b9      	ldrb	r1, [r7, #6]
 800119a:	482f      	ldr	r0, [pc, #188]	@ (8001258 <HMEM_voidShuffleCards+0x130>)
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80011a8:	70fb      	strb	r3, [r7, #3]
        HMEM_board[i_row][i_col].symbol = HMEM_board[j_row][j_col].symbol;
 80011aa:	7979      	ldrb	r1, [r7, #5]
 80011ac:	793c      	ldrb	r4, [r7, #4]
 80011ae:	79fa      	ldrb	r2, [r7, #7]
 80011b0:	79b8      	ldrb	r0, [r7, #6]
 80011b2:	4d29      	ldr	r5, [pc, #164]	@ (8001258 <HMEM_voidShuffleCards+0x130>)
 80011b4:	460b      	mov	r3, r1
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	440b      	add	r3, r1
 80011ba:	4423      	add	r3, r4
 80011bc:	f815 4013 	ldrb.w	r4, [r5, r3, lsl #1]
 80011c0:	4925      	ldr	r1, [pc, #148]	@ (8001258 <HMEM_voidShuffleCards+0x130>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	4403      	add	r3, r0
 80011ca:	4622      	mov	r2, r4
 80011cc:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
        HMEM_board[j_row][j_col].symbol = temp_symbol;
 80011d0:	797a      	ldrb	r2, [r7, #5]
 80011d2:	7939      	ldrb	r1, [r7, #4]
 80011d4:	4820      	ldr	r0, [pc, #128]	@ (8001258 <HMEM_voidShuffleCards+0x130>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	440b      	add	r3, r1
 80011de:	78fa      	ldrb	r2, [r7, #3]
 80011e0:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

        /* Also swap states to keep consistency (should be face down anyway) */
        u8 tmp_state = HMEM_board[i_row][i_col].state;
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	79b9      	ldrb	r1, [r7, #6]
 80011e8:	481b      	ldr	r0, [pc, #108]	@ (8001258 <HMEM_voidShuffleCards+0x130>)
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4403      	add	r3, r0
 80011f6:	785b      	ldrb	r3, [r3, #1]
 80011f8:	70bb      	strb	r3, [r7, #2]
        HMEM_board[i_row][i_col].state = HMEM_board[j_row][j_col].state;
 80011fa:	7979      	ldrb	r1, [r7, #5]
 80011fc:	793c      	ldrb	r4, [r7, #4]
 80011fe:	79fa      	ldrb	r2, [r7, #7]
 8001200:	79b8      	ldrb	r0, [r7, #6]
 8001202:	4d15      	ldr	r5, [pc, #84]	@ (8001258 <HMEM_voidShuffleCards+0x130>)
 8001204:	460b      	mov	r3, r1
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	440b      	add	r3, r1
 800120a:	4423      	add	r3, r4
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	442b      	add	r3, r5
 8001210:	785c      	ldrb	r4, [r3, #1]
 8001212:	4911      	ldr	r1, [pc, #68]	@ (8001258 <HMEM_voidShuffleCards+0x130>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	4403      	add	r3, r0
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	440b      	add	r3, r1
 8001220:	4622      	mov	r2, r4
 8001222:	705a      	strb	r2, [r3, #1]
        HMEM_board[j_row][j_col].state = tmp_state;
 8001224:	797a      	ldrb	r2, [r7, #5]
 8001226:	7939      	ldrb	r1, [r7, #4]
 8001228:	480b      	ldr	r0, [pc, #44]	@ (8001258 <HMEM_voidShuffleCards+0x130>)
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	440b      	add	r3, r1
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4403      	add	r3, r0
 8001236:	78ba      	ldrb	r2, [r7, #2]
 8001238:	705a      	strb	r2, [r3, #1]
    for (int i = HMEM_TOTAL_CARDS - 1; i > 0; --i) {
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3b01      	subs	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f73f af76 	bgt.w	8001134 <HMEM_voidShuffleCards+0xc>
    }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bdb0      	pop	{r4, r5, r7, pc}
 8001252:	bf00      	nop
 8001254:	55555556 	.word	0x55555556
 8001258:	2000a0a0 	.word	0x2000a0a0

0800125c <HMEM_u8CheckWin>:

static u8 HMEM_u8CheckWin(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
    /* Check if all cards are matched */
    for (u8 r = 0; r < HMEM_GRID_ROWS; ++r) {
 8001262:	2300      	movs	r3, #0
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	e019      	b.n	800129c <HMEM_u8CheckWin+0x40>
        for (u8 c = 0; c < HMEM_GRID_COLS; ++c) {
 8001268:	2300      	movs	r3, #0
 800126a:	71bb      	strb	r3, [r7, #6]
 800126c:	e010      	b.n	8001290 <HMEM_u8CheckWin+0x34>
            if (HMEM_board[r][c].state != HMEM_CARD_MATCHED) {
 800126e:	79fa      	ldrb	r2, [r7, #7]
 8001270:	79b9      	ldrb	r1, [r7, #6]
 8001272:	480f      	ldr	r0, [pc, #60]	@ (80012b0 <HMEM_u8CheckWin+0x54>)
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	440b      	add	r3, r1
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4403      	add	r3, r0
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d001      	beq.n	800128a <HMEM_u8CheckWin+0x2e>
                return 0;
 8001286:	2300      	movs	r3, #0
 8001288:	e00c      	b.n	80012a4 <HMEM_u8CheckWin+0x48>
        for (u8 c = 0; c < HMEM_GRID_COLS; ++c) {
 800128a:	79bb      	ldrb	r3, [r7, #6]
 800128c:	3301      	adds	r3, #1
 800128e:	71bb      	strb	r3, [r7, #6]
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d9eb      	bls.n	800126e <HMEM_u8CheckWin+0x12>
    for (u8 r = 0; r < HMEM_GRID_ROWS; ++r) {
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	3301      	adds	r3, #1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d9e2      	bls.n	8001268 <HMEM_u8CheckWin+0xc>
            }
        }
    }
    return 1;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	2000a0a0 	.word	0x2000a0a0

080012b4 <HMEM_voidDrawFrame>:

static void HMEM_voidDrawFrame(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af02      	add	r7, sp, #8
    /* Clear background */
    HMEM_voidFillRect(0, 0, HMEM_SCREEN_WIDTH-1, HMEM_SCREEN_HEIGHT-1, HMEM_COLOR_BG);
 80012ba:	2300      	movs	r3, #0
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	239f      	movs	r3, #159	@ 0x9f
 80012c0:	227f      	movs	r2, #127	@ 0x7f
 80012c2:	2100      	movs	r1, #0
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 fbd3 	bl	8001a70 <HMEM_voidFillRect>
    
    /* Draw all cards */
    for (u8 r = 0; r < HMEM_GRID_ROWS; ++r) {
 80012ca:	2300      	movs	r3, #0
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e011      	b.n	80012f4 <HMEM_voidDrawFrame+0x40>
        for (u8 c = 0; c < HMEM_GRID_COLS; ++c) {
 80012d0:	2300      	movs	r3, #0
 80012d2:	73bb      	strb	r3, [r7, #14]
 80012d4:	e008      	b.n	80012e8 <HMEM_voidDrawFrame+0x34>
            HMEM_voidDrawCard(r, c);
 80012d6:	7bba      	ldrb	r2, [r7, #14]
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f841 	bl	8001364 <HMEM_voidDrawCard>
        for (u8 c = 0; c < HMEM_GRID_COLS; ++c) {
 80012e2:	7bbb      	ldrb	r3, [r7, #14]
 80012e4:	3301      	adds	r3, #1
 80012e6:	73bb      	strb	r3, [r7, #14]
 80012e8:	7bbb      	ldrb	r3, [r7, #14]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d9f3      	bls.n	80012d6 <HMEM_voidDrawFrame+0x22>
    for (u8 r = 0; r < HMEM_GRID_ROWS; ++r) {
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	3301      	adds	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d9ea      	bls.n	80012d0 <HMEM_voidDrawFrame+0x1c>
        }
    }
    
    /* Draw cursor */
    HMEM_voidDrawCursor(HMEM_cursor_row, HMEM_cursor_col);
 80012fa:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <HMEM_voidDrawFrame+0xa4>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4a17      	ldr	r2, [pc, #92]	@ (800135c <HMEM_voidDrawFrame+0xa8>)
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f89d 	bl	8001444 <HMEM_voidDrawCursor>
    
    /* Draw move counter at bottom */
    /* Simple text display - just draw some pixels to represent the number */
    u16 moves_display_y = HMEM_SCREEN_HEIGHT - 12;
 800130a:	2394      	movs	r3, #148	@ 0x94
 800130c:	817b      	strh	r3, [r7, #10]
    u16 max_marks = 20;
 800130e:	2314      	movs	r3, #20
 8001310:	813b      	strh	r3, [r7, #8]
    u16 marks = (HMEM_move_count < max_marks) ? HMEM_move_count : max_marks;
 8001312:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <HMEM_voidDrawFrame+0xac>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	893a      	ldrh	r2, [r7, #8]
 8001318:	4293      	cmp	r3, r2
 800131a:	bf28      	it	cs
 800131c:	4613      	movcs	r3, r2
 800131e:	80fb      	strh	r3, [r7, #6]
    for (u8 i = 0; i < marks; ++i) {
 8001320:	2300      	movs	r3, #0
 8001322:	737b      	strb	r3, [r7, #13]
 8001324:	e00d      	b.n	8001342 <HMEM_voidDrawFrame+0x8e>
        HMEM_voidSetPixel(10 + i * 2, moves_display_y, HMEM_COLOR_TEXT);
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	3305      	adds	r3, #5
 800132a:	b29b      	uxth	r3, r3
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	b29b      	uxth	r3, r3
 8001330:	8979      	ldrh	r1, [r7, #10]
 8001332:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fbf6 	bl	8001b28 <HMEM_voidSetPixel>
    for (u8 i = 0; i < marks; ++i) {
 800133c:	7b7b      	ldrb	r3, [r7, #13]
 800133e:	3301      	adds	r3, #1
 8001340:	737b      	strb	r3, [r7, #13]
 8001342:	7b7b      	ldrb	r3, [r7, #13]
 8001344:	b29b      	uxth	r3, r3
 8001346:	88fa      	ldrh	r2, [r7, #6]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8ec      	bhi.n	8001326 <HMEM_voidDrawFrame+0x72>
    }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000a0ac 	.word	0x2000a0ac
 800135c:	2000a0ad 	.word	0x2000a0ad
 8001360:	2000a0b0 	.word	0x2000a0b0

08001364 <HMEM_voidDrawCard>:

static void HMEM_voidDrawCard(u8 row, u8 col)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af02      	add	r7, sp, #8
 800136a:	4603      	mov	r3, r0
 800136c:	460a      	mov	r2, r1
 800136e:	71fb      	strb	r3, [r7, #7]
 8001370:	4613      	mov	r3, r2
 8001372:	71bb      	strb	r3, [r7, #6]
    u16 x0, y0, x1, y1, cx, cy;
    HMEM_voidGetCardBounds(row, col, &x0, &y0, &x1, &y1);
 8001374:	f107 0410 	add.w	r4, r7, #16
 8001378:	f107 0212 	add.w	r2, r7, #18
 800137c:	79b9      	ldrb	r1, [r7, #6]
 800137e:	79f8      	ldrb	r0, [r7, #7]
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	f107 030e 	add.w	r3, r7, #14
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	4623      	mov	r3, r4
 800138e:	f000 fb0d 	bl	80019ac <HMEM_voidGetCardBounds>
    HMEM_voidGetCardCenter(row, col, &cx, &cy);
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	f107 020a 	add.w	r2, r7, #10
 800139a:	79b9      	ldrb	r1, [r7, #6]
 800139c:	79f8      	ldrb	r0, [r7, #7]
 800139e:	f000 fb37 	bl	8001a10 <HMEM_voidGetCardCenter>
    
    HMEM_Card_t* card = &HMEM_board[row][col];
 80013a2:	79fa      	ldrb	r2, [r7, #7]
 80013a4:	79b9      	ldrb	r1, [r7, #6]
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4a23      	ldr	r2, [pc, #140]	@ (8001440 <HMEM_voidDrawCard+0xdc>)
 80013b2:	4413      	add	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
    
    switch (card->state) {
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d021      	beq.n	8001402 <HMEM_voidDrawCard+0x9e>
 80013be:	2b02      	cmp	r3, #2
 80013c0:	dc30      	bgt.n	8001424 <HMEM_voidDrawCard+0xc0>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <HMEM_voidDrawCard+0x68>
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d009      	beq.n	80013de <HMEM_voidDrawCard+0x7a>
 80013ca:	e02b      	b.n	8001424 <HMEM_voidDrawCard+0xc0>
        case HMEM_CARD_FACE_DOWN:
            /* Draw blue face-down card */
            HMEM_voidFillRect(x0, y0, x1, y1, HMEM_COLOR_CARD_BACK);
 80013cc:	8a78      	ldrh	r0, [r7, #18]
 80013ce:	8a39      	ldrh	r1, [r7, #16]
 80013d0:	89fa      	ldrh	r2, [r7, #14]
 80013d2:	89bb      	ldrh	r3, [r7, #12]
 80013d4:	241f      	movs	r4, #31
 80013d6:	9400      	str	r4, [sp, #0]
 80013d8:	f000 fb4a 	bl	8001a70 <HMEM_voidFillRect>
            break;
 80013dc:	e02b      	b.n	8001436 <HMEM_voidDrawCard+0xd2>
            
        case HMEM_CARD_FACE_UP:
            /* Draw white card with symbol */
            HMEM_voidFillRect(x0, y0, x1, y1, HMEM_COLOR_CARD_FACE);
 80013de:	8a78      	ldrh	r0, [r7, #18]
 80013e0:	8a39      	ldrh	r1, [r7, #16]
 80013e2:	89fa      	ldrh	r2, [r7, #14]
 80013e4:	89bb      	ldrh	r3, [r7, #12]
 80013e6:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80013ea:	9400      	str	r4, [sp, #0]
 80013ec:	f000 fb40 	bl	8001a70 <HMEM_voidFillRect>
            HMEM_voidDrawSymbol(cx, cy, card->symbol, HMEM_COLOR_TEXT);
 80013f0:	8978      	ldrh	r0, [r7, #10]
 80013f2:	8939      	ldrh	r1, [r7, #8]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80013fc:	f000 f872 	bl	80014e4 <HMEM_voidDrawSymbol>
            break;
 8001400:	e019      	b.n	8001436 <HMEM_voidDrawCard+0xd2>
            
        case HMEM_CARD_MATCHED:
            /* Draw green matched card with symbol */
            HMEM_voidFillRect(x0, y0, x1, y1, HMEM_COLOR_MATCHED);
 8001402:	8a78      	ldrh	r0, [r7, #18]
 8001404:	8a39      	ldrh	r1, [r7, #16]
 8001406:	89fa      	ldrh	r2, [r7, #14]
 8001408:	89bb      	ldrh	r3, [r7, #12]
 800140a:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 800140e:	9400      	str	r4, [sp, #0]
 8001410:	f000 fb2e 	bl	8001a70 <HMEM_voidFillRect>
            HMEM_voidDrawSymbol(cx, cy, card->symbol, HMEM_COLOR_BG);
 8001414:	8978      	ldrh	r0, [r7, #10]
 8001416:	8939      	ldrh	r1, [r7, #8]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	2300      	movs	r3, #0
 800141e:	f000 f861 	bl	80014e4 <HMEM_voidDrawSymbol>
            break;
 8001422:	e008      	b.n	8001436 <HMEM_voidDrawCard+0xd2>

        default:
            /* Safety fallback */
            HMEM_voidFillRect(x0, y0, x1, y1, HMEM_COLOR_CARD_BACK);
 8001424:	8a78      	ldrh	r0, [r7, #18]
 8001426:	8a39      	ldrh	r1, [r7, #16]
 8001428:	89fa      	ldrh	r2, [r7, #14]
 800142a:	89bb      	ldrh	r3, [r7, #12]
 800142c:	241f      	movs	r4, #31
 800142e:	9400      	str	r4, [sp, #0]
 8001430:	f000 fb1e 	bl	8001a70 <HMEM_voidFillRect>
            break;
 8001434:	bf00      	nop
    }
}
 8001436:	bf00      	nop
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	bf00      	nop
 8001440:	2000a0a0 	.word	0x2000a0a0

08001444 <HMEM_voidDrawCursor>:

static void HMEM_voidDrawCursor(u8 row, u8 col)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b087      	sub	sp, #28
 8001448:	af02      	add	r7, sp, #8
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	4613      	mov	r3, r2
 8001452:	71bb      	strb	r3, [r7, #6]
    u16 x0, y0, x1, y1;
    HMEM_voidGetCardBounds(row, col, &x0, &y0, &x1, &y1);
 8001454:	f107 040c 	add.w	r4, r7, #12
 8001458:	f107 020e 	add.w	r2, r7, #14
 800145c:	79b9      	ldrb	r1, [r7, #6]
 800145e:	79f8      	ldrb	r0, [r7, #7]
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	f107 030a 	add.w	r3, r7, #10
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	4623      	mov	r3, r4
 800146e:	f000 fa9d 	bl	80019ac <HMEM_voidGetCardBounds>
    
    /* Draw red border around selected card */
    HMEM_voidDrawLine((int)x0-1, (int)y0-1, (int)x1+1, (int)y0-1, HMEM_COLOR_CURSOR);
 8001472:	89fb      	ldrh	r3, [r7, #14]
 8001474:	1e58      	subs	r0, r3, #1
 8001476:	89bb      	ldrh	r3, [r7, #12]
 8001478:	1e59      	subs	r1, r3, #1
 800147a:	897b      	ldrh	r3, [r7, #10]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	89bb      	ldrh	r3, [r7, #12]
 8001480:	3b01      	subs	r3, #1
 8001482:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 8001486:	9400      	str	r4, [sp, #0]
 8001488:	f000 fb6e 	bl	8001b68 <HMEM_voidDrawLine>
    HMEM_voidDrawLine((int)x1+1, (int)y0-1, (int)x1+1, (int)y1+1, HMEM_COLOR_CURSOR);
 800148c:	897b      	ldrh	r3, [r7, #10]
 800148e:	1c58      	adds	r0, r3, #1
 8001490:	89bb      	ldrh	r3, [r7, #12]
 8001492:	1e59      	subs	r1, r3, #1
 8001494:	897b      	ldrh	r3, [r7, #10]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	893b      	ldrh	r3, [r7, #8]
 800149a:	3301      	adds	r3, #1
 800149c:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 80014a0:	9400      	str	r4, [sp, #0]
 80014a2:	f000 fb61 	bl	8001b68 <HMEM_voidDrawLine>
    HMEM_voidDrawLine((int)x1+1, (int)y1+1, (int)x0-1, (int)y1+1, HMEM_COLOR_CURSOR);
 80014a6:	897b      	ldrh	r3, [r7, #10]
 80014a8:	1c58      	adds	r0, r3, #1
 80014aa:	893b      	ldrh	r3, [r7, #8]
 80014ac:	1c59      	adds	r1, r3, #1
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	893b      	ldrh	r3, [r7, #8]
 80014b4:	3301      	adds	r3, #1
 80014b6:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 80014ba:	9400      	str	r4, [sp, #0]
 80014bc:	f000 fb54 	bl	8001b68 <HMEM_voidDrawLine>
    HMEM_voidDrawLine((int)x0-1, (int)y1+1, (int)x0-1, (int)y0-1, HMEM_COLOR_CURSOR);
 80014c0:	89fb      	ldrh	r3, [r7, #14]
 80014c2:	1e58      	subs	r0, r3, #1
 80014c4:	893b      	ldrh	r3, [r7, #8]
 80014c6:	1c59      	adds	r1, r3, #1
 80014c8:	89fb      	ldrh	r3, [r7, #14]
 80014ca:	1e5a      	subs	r2, r3, #1
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 80014d4:	9400      	str	r4, [sp, #0]
 80014d6:	f000 fb47 	bl	8001b68 <HMEM_voidDrawLine>
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd90      	pop	{r4, r7, pc}
	...

080014e4 <HMEM_voidDrawSymbol>:

static void HMEM_voidDrawSymbol(u16 cx, u16 cy, u8 symbol, u16 color)
{
 80014e4:	b5b0      	push	{r4, r5, r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	4604      	mov	r4, r0
 80014ec:	4608      	mov	r0, r1
 80014ee:	4611      	mov	r1, r2
 80014f0:	461a      	mov	r2, r3
 80014f2:	4623      	mov	r3, r4
 80014f4:	80fb      	strh	r3, [r7, #6]
 80014f6:	4603      	mov	r3, r0
 80014f8:	80bb      	strh	r3, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	70fb      	strb	r3, [r7, #3]
 80014fe:	4613      	mov	r3, r2
 8001500:	803b      	strh	r3, [r7, #0]
    /* Draw different simple symbols based on symbol ID */
    u8 size = 8;
 8001502:	2308      	movs	r3, #8
 8001504:	737b      	strb	r3, [r7, #13]
    
    switch (symbol) {
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	3b01      	subs	r3, #1
 800150a:	2b07      	cmp	r3, #7
 800150c:	f200 8241 	bhi.w	8001992 <HMEM_voidDrawSymbol+0x4ae>
 8001510:	a201      	add	r2, pc, #4	@ (adr r2, 8001518 <HMEM_voidDrawSymbol+0x34>)
 8001512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001516:	bf00      	nop
 8001518:	08001539 	.word	0x08001539
 800151c:	080015cf 	.word	0x080015cf
 8001520:	08001617 	.word	0x08001617
 8001524:	080016a5 	.word	0x080016a5
 8001528:	08001777 	.word	0x08001777
 800152c:	08001805 	.word	0x08001805
 8001530:	080018e5 	.word	0x080018e5
 8001534:	0800194f 	.word	0x0800194f
        case 1: /* Circle */
            for (u8 i = 0; i < 8; ++i) {
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e01e      	b.n	800157c <HMEM_voidDrawSymbol+0x98>
                HMEM_voidSetPixel(cx + (i-4), cy - 3, color);
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	b29a      	uxth	r2, r3
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	4413      	add	r3, r2
 8001546:	b29b      	uxth	r3, r3
 8001548:	3b04      	subs	r3, #4
 800154a:	b298      	uxth	r0, r3
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	3b03      	subs	r3, #3
 8001550:	b29b      	uxth	r3, r3
 8001552:	883a      	ldrh	r2, [r7, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f000 fae7 	bl	8001b28 <HMEM_voidSetPixel>
                HMEM_voidSetPixel(cx + (i-4), cy + 3, color);
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	b29a      	uxth	r2, r3
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	4413      	add	r3, r2
 8001562:	b29b      	uxth	r3, r3
 8001564:	3b04      	subs	r3, #4
 8001566:	b298      	uxth	r0, r3
 8001568:	88bb      	ldrh	r3, [r7, #4]
 800156a:	3303      	adds	r3, #3
 800156c:	b29b      	uxth	r3, r3
 800156e:	883a      	ldrh	r2, [r7, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f000 fad9 	bl	8001b28 <HMEM_voidSetPixel>
            for (u8 i = 0; i < 8; ++i) {
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	3301      	adds	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b07      	cmp	r3, #7
 8001580:	d9dd      	bls.n	800153e <HMEM_voidDrawSymbol+0x5a>
            }
            for (u8 i = 0; i < 6; ++i) {
 8001582:	2300      	movs	r3, #0
 8001584:	73bb      	strb	r3, [r7, #14]
 8001586:	e01e      	b.n	80015c6 <HMEM_voidDrawSymbol+0xe2>
                HMEM_voidSetPixel(cx - 3, cy + (i-3), color);
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	3b03      	subs	r3, #3
 800158c:	b298      	uxth	r0, r3
 800158e:	7bbb      	ldrb	r3, [r7, #14]
 8001590:	b29a      	uxth	r2, r3
 8001592:	88bb      	ldrh	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	b29b      	uxth	r3, r3
 8001598:	3b03      	subs	r3, #3
 800159a:	b29b      	uxth	r3, r3
 800159c:	883a      	ldrh	r2, [r7, #0]
 800159e:	4619      	mov	r1, r3
 80015a0:	f000 fac2 	bl	8001b28 <HMEM_voidSetPixel>
                HMEM_voidSetPixel(cx + 3, cy + (i-3), color);
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	3303      	adds	r3, #3
 80015a8:	b298      	uxth	r0, r3
 80015aa:	7bbb      	ldrb	r3, [r7, #14]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3b03      	subs	r3, #3
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	883a      	ldrh	r2, [r7, #0]
 80015ba:	4619      	mov	r1, r3
 80015bc:	f000 fab4 	bl	8001b28 <HMEM_voidSetPixel>
            for (u8 i = 0; i < 6; ++i) {
 80015c0:	7bbb      	ldrb	r3, [r7, #14]
 80015c2:	3301      	adds	r3, #1
 80015c4:	73bb      	strb	r3, [r7, #14]
 80015c6:	7bbb      	ldrb	r3, [r7, #14]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d9dd      	bls.n	8001588 <HMEM_voidDrawSymbol+0xa4>
            }
            break;
 80015cc:	e1e8      	b.n	80019a0 <HMEM_voidDrawSymbol+0x4bc>
            
        case 2: /* Cross */
            HMEM_voidDrawLine(cx-(size/2), cy, cx+(size/2), cy, color);
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	7b7a      	ldrb	r2, [r7, #13]
 80015d2:	0852      	lsrs	r2, r2, #1
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	1a98      	subs	r0, r3, r2
 80015d8:	88b9      	ldrh	r1, [r7, #4]
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	7b7a      	ldrb	r2, [r7, #13]
 80015de:	0852      	lsrs	r2, r2, #1
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	441a      	add	r2, r3
 80015e4:	88bc      	ldrh	r4, [r7, #4]
 80015e6:	883b      	ldrh	r3, [r7, #0]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	4623      	mov	r3, r4
 80015ec:	f000 fabc 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx, cy-(size/2), cx, cy+(size/2), color);
 80015f0:	88f8      	ldrh	r0, [r7, #6]
 80015f2:	88bb      	ldrh	r3, [r7, #4]
 80015f4:	7b7a      	ldrb	r2, [r7, #13]
 80015f6:	0852      	lsrs	r2, r2, #1
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	1a99      	subs	r1, r3, r2
 80015fc:	88fc      	ldrh	r4, [r7, #6]
 80015fe:	88bb      	ldrh	r3, [r7, #4]
 8001600:	7b7a      	ldrb	r2, [r7, #13]
 8001602:	0852      	lsrs	r2, r2, #1
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	441a      	add	r2, r3
 8001608:	883b      	ldrh	r3, [r7, #0]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	4613      	mov	r3, r2
 800160e:	4622      	mov	r2, r4
 8001610:	f000 faaa 	bl	8001b68 <HMEM_voidDrawLine>
            break;
 8001614:	e1c4      	b.n	80019a0 <HMEM_voidDrawSymbol+0x4bc>
            
        case 3: /* Diamond */
            HMEM_voidDrawLine(cx, cy-(size/2), cx+(size/2), cy, color);
 8001616:	88f8      	ldrh	r0, [r7, #6]
 8001618:	88bb      	ldrh	r3, [r7, #4]
 800161a:	7b7a      	ldrb	r2, [r7, #13]
 800161c:	0852      	lsrs	r2, r2, #1
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	1a99      	subs	r1, r3, r2
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	7b7a      	ldrb	r2, [r7, #13]
 8001626:	0852      	lsrs	r2, r2, #1
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	441a      	add	r2, r3
 800162c:	88bc      	ldrh	r4, [r7, #4]
 800162e:	883b      	ldrh	r3, [r7, #0]
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	4623      	mov	r3, r4
 8001634:	f000 fa98 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx+(size/2), cy, cx, cy+(size/2), color);
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	7b7a      	ldrb	r2, [r7, #13]
 800163c:	0852      	lsrs	r2, r2, #1
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	1898      	adds	r0, r3, r2
 8001642:	88b9      	ldrh	r1, [r7, #4]
 8001644:	88fc      	ldrh	r4, [r7, #6]
 8001646:	88bb      	ldrh	r3, [r7, #4]
 8001648:	7b7a      	ldrb	r2, [r7, #13]
 800164a:	0852      	lsrs	r2, r2, #1
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	441a      	add	r2, r3
 8001650:	883b      	ldrh	r3, [r7, #0]
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	4622      	mov	r2, r4
 8001658:	f000 fa86 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx, cy+(size/2), cx-(size/2), cy, color);
 800165c:	88f8      	ldrh	r0, [r7, #6]
 800165e:	88bb      	ldrh	r3, [r7, #4]
 8001660:	7b7a      	ldrb	r2, [r7, #13]
 8001662:	0852      	lsrs	r2, r2, #1
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	1899      	adds	r1, r3, r2
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	7b7a      	ldrb	r2, [r7, #13]
 800166c:	0852      	lsrs	r2, r2, #1
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	1a9a      	subs	r2, r3, r2
 8001672:	88bc      	ldrh	r4, [r7, #4]
 8001674:	883b      	ldrh	r3, [r7, #0]
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4623      	mov	r3, r4
 800167a:	f000 fa75 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx-(size/2), cy, cx, cy-(size/2), color);
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	7b7a      	ldrb	r2, [r7, #13]
 8001682:	0852      	lsrs	r2, r2, #1
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	1a98      	subs	r0, r3, r2
 8001688:	88b9      	ldrh	r1, [r7, #4]
 800168a:	88fc      	ldrh	r4, [r7, #6]
 800168c:	88bb      	ldrh	r3, [r7, #4]
 800168e:	7b7a      	ldrb	r2, [r7, #13]
 8001690:	0852      	lsrs	r2, r2, #1
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	1a9a      	subs	r2, r3, r2
 8001696:	883b      	ldrh	r3, [r7, #0]
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	4613      	mov	r3, r2
 800169c:	4622      	mov	r2, r4
 800169e:	f000 fa63 	bl	8001b68 <HMEM_voidDrawLine>
            break;
 80016a2:	e17d      	b.n	80019a0 <HMEM_voidDrawSymbol+0x4bc>
            
        case 4: /* Square */
            HMEM_voidDrawLine(cx-(size/2), cy-(size/2), cx+(size/2), cy-(size/2), color);
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	7b7a      	ldrb	r2, [r7, #13]
 80016a8:	0852      	lsrs	r2, r2, #1
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	1a98      	subs	r0, r3, r2
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	7b7a      	ldrb	r2, [r7, #13]
 80016b2:	0852      	lsrs	r2, r2, #1
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	1a99      	subs	r1, r3, r2
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	7b7a      	ldrb	r2, [r7, #13]
 80016bc:	0852      	lsrs	r2, r2, #1
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	189c      	adds	r4, r3, r2
 80016c2:	88bb      	ldrh	r3, [r7, #4]
 80016c4:	7b7a      	ldrb	r2, [r7, #13]
 80016c6:	0852      	lsrs	r2, r2, #1
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	1a9a      	subs	r2, r3, r2
 80016cc:	883b      	ldrh	r3, [r7, #0]
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	4613      	mov	r3, r2
 80016d2:	4622      	mov	r2, r4
 80016d4:	f000 fa48 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx+(size/2), cy-(size/2), cx+(size/2), cy+(size/2), color);
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	7b7a      	ldrb	r2, [r7, #13]
 80016dc:	0852      	lsrs	r2, r2, #1
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	1898      	adds	r0, r3, r2
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	7b7a      	ldrb	r2, [r7, #13]
 80016e6:	0852      	lsrs	r2, r2, #1
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	1a99      	subs	r1, r3, r2
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	7b7a      	ldrb	r2, [r7, #13]
 80016f0:	0852      	lsrs	r2, r2, #1
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	189c      	adds	r4, r3, r2
 80016f6:	88bb      	ldrh	r3, [r7, #4]
 80016f8:	7b7a      	ldrb	r2, [r7, #13]
 80016fa:	0852      	lsrs	r2, r2, #1
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	441a      	add	r2, r3
 8001700:	883b      	ldrh	r3, [r7, #0]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	4613      	mov	r3, r2
 8001706:	4622      	mov	r2, r4
 8001708:	f000 fa2e 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx+(size/2), cy+(size/2), cx-(size/2), cy+(size/2), color);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	7b7a      	ldrb	r2, [r7, #13]
 8001710:	0852      	lsrs	r2, r2, #1
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	1898      	adds	r0, r3, r2
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	7b7a      	ldrb	r2, [r7, #13]
 800171a:	0852      	lsrs	r2, r2, #1
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	1899      	adds	r1, r3, r2
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	7b7a      	ldrb	r2, [r7, #13]
 8001724:	0852      	lsrs	r2, r2, #1
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	1a9c      	subs	r4, r3, r2
 800172a:	88bb      	ldrh	r3, [r7, #4]
 800172c:	7b7a      	ldrb	r2, [r7, #13]
 800172e:	0852      	lsrs	r2, r2, #1
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	441a      	add	r2, r3
 8001734:	883b      	ldrh	r3, [r7, #0]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	4622      	mov	r2, r4
 800173c:	f000 fa14 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx-(size/2), cy+(size/2), cx-(size/2), cy-(size/2), color);
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	7b7a      	ldrb	r2, [r7, #13]
 8001744:	0852      	lsrs	r2, r2, #1
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	1a98      	subs	r0, r3, r2
 800174a:	88bb      	ldrh	r3, [r7, #4]
 800174c:	7b7a      	ldrb	r2, [r7, #13]
 800174e:	0852      	lsrs	r2, r2, #1
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	1899      	adds	r1, r3, r2
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	7b7a      	ldrb	r2, [r7, #13]
 8001758:	0852      	lsrs	r2, r2, #1
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	1a9c      	subs	r4, r3, r2
 800175e:	88bb      	ldrh	r3, [r7, #4]
 8001760:	7b7a      	ldrb	r2, [r7, #13]
 8001762:	0852      	lsrs	r2, r2, #1
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	1a9a      	subs	r2, r3, r2
 8001768:	883b      	ldrh	r3, [r7, #0]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	4613      	mov	r3, r2
 800176e:	4622      	mov	r2, r4
 8001770:	f000 f9fa 	bl	8001b68 <HMEM_voidDrawLine>
            break;
 8001774:	e114      	b.n	80019a0 <HMEM_voidDrawSymbol+0x4bc>
            
        case 5: /* Triangle */
            HMEM_voidDrawLine(cx, cy-(size/2), cx+(size/2), cy+(size/2), color);
 8001776:	88f8      	ldrh	r0, [r7, #6]
 8001778:	88bb      	ldrh	r3, [r7, #4]
 800177a:	7b7a      	ldrb	r2, [r7, #13]
 800177c:	0852      	lsrs	r2, r2, #1
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	1a99      	subs	r1, r3, r2
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	7b7a      	ldrb	r2, [r7, #13]
 8001786:	0852      	lsrs	r2, r2, #1
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	189c      	adds	r4, r3, r2
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	7b7a      	ldrb	r2, [r7, #13]
 8001790:	0852      	lsrs	r2, r2, #1
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	441a      	add	r2, r3
 8001796:	883b      	ldrh	r3, [r7, #0]
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	4613      	mov	r3, r2
 800179c:	4622      	mov	r2, r4
 800179e:	f000 f9e3 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx+(size/2), cy+(size/2), cx-(size/2), cy+(size/2), color);
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	7b7a      	ldrb	r2, [r7, #13]
 80017a6:	0852      	lsrs	r2, r2, #1
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	1898      	adds	r0, r3, r2
 80017ac:	88bb      	ldrh	r3, [r7, #4]
 80017ae:	7b7a      	ldrb	r2, [r7, #13]
 80017b0:	0852      	lsrs	r2, r2, #1
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	1899      	adds	r1, r3, r2
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	7b7a      	ldrb	r2, [r7, #13]
 80017ba:	0852      	lsrs	r2, r2, #1
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	1a9c      	subs	r4, r3, r2
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	7b7a      	ldrb	r2, [r7, #13]
 80017c4:	0852      	lsrs	r2, r2, #1
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	441a      	add	r2, r3
 80017ca:	883b      	ldrh	r3, [r7, #0]
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	4613      	mov	r3, r2
 80017d0:	4622      	mov	r2, r4
 80017d2:	f000 f9c9 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx-(size/2), cy+(size/2), cx, cy-(size/2), color);
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	7b7a      	ldrb	r2, [r7, #13]
 80017da:	0852      	lsrs	r2, r2, #1
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	1a98      	subs	r0, r3, r2
 80017e0:	88bb      	ldrh	r3, [r7, #4]
 80017e2:	7b7a      	ldrb	r2, [r7, #13]
 80017e4:	0852      	lsrs	r2, r2, #1
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	1899      	adds	r1, r3, r2
 80017ea:	88fc      	ldrh	r4, [r7, #6]
 80017ec:	88bb      	ldrh	r3, [r7, #4]
 80017ee:	7b7a      	ldrb	r2, [r7, #13]
 80017f0:	0852      	lsrs	r2, r2, #1
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	1a9a      	subs	r2, r3, r2
 80017f6:	883b      	ldrh	r3, [r7, #0]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	4613      	mov	r3, r2
 80017fc:	4622      	mov	r2, r4
 80017fe:	f000 f9b3 	bl	8001b68 <HMEM_voidDrawLine>
            break;
 8001802:	e0cd      	b.n	80019a0 <HMEM_voidDrawSymbol+0x4bc>
            
        case 6: /* Star */
            HMEM_voidDrawLine(cx, cy-(size/2), cx, cy+(size/2), color);
 8001804:	88f8      	ldrh	r0, [r7, #6]
 8001806:	88bb      	ldrh	r3, [r7, #4]
 8001808:	7b7a      	ldrb	r2, [r7, #13]
 800180a:	0852      	lsrs	r2, r2, #1
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	1a99      	subs	r1, r3, r2
 8001810:	88fc      	ldrh	r4, [r7, #6]
 8001812:	88bb      	ldrh	r3, [r7, #4]
 8001814:	7b7a      	ldrb	r2, [r7, #13]
 8001816:	0852      	lsrs	r2, r2, #1
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	441a      	add	r2, r3
 800181c:	883b      	ldrh	r3, [r7, #0]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	4613      	mov	r3, r2
 8001822:	4622      	mov	r2, r4
 8001824:	f000 f9a0 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx-(size/2), cy, cx+(size/2), cy, color);
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	7b7a      	ldrb	r2, [r7, #13]
 800182c:	0852      	lsrs	r2, r2, #1
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	1a98      	subs	r0, r3, r2
 8001832:	88b9      	ldrh	r1, [r7, #4]
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	7b7a      	ldrb	r2, [r7, #13]
 8001838:	0852      	lsrs	r2, r2, #1
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	441a      	add	r2, r3
 800183e:	88bc      	ldrh	r4, [r7, #4]
 8001840:	883b      	ldrh	r3, [r7, #0]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4623      	mov	r3, r4
 8001846:	f000 f98f 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx-(size/3), cy-(size/3), cx+(size/3), cy+(size/3), color);
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	7b7a      	ldrb	r2, [r7, #13]
 800184e:	4956      	ldr	r1, [pc, #344]	@ (80019a8 <HMEM_voidDrawSymbol+0x4c4>)
 8001850:	fba1 1202 	umull	r1, r2, r1, r2
 8001854:	0852      	lsrs	r2, r2, #1
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	1a98      	subs	r0, r3, r2
 800185a:	88bb      	ldrh	r3, [r7, #4]
 800185c:	7b7a      	ldrb	r2, [r7, #13]
 800185e:	4952      	ldr	r1, [pc, #328]	@ (80019a8 <HMEM_voidDrawSymbol+0x4c4>)
 8001860:	fba1 1202 	umull	r1, r2, r1, r2
 8001864:	0852      	lsrs	r2, r2, #1
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	1a99      	subs	r1, r3, r2
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	7b7a      	ldrb	r2, [r7, #13]
 800186e:	4c4e      	ldr	r4, [pc, #312]	@ (80019a8 <HMEM_voidDrawSymbol+0x4c4>)
 8001870:	fba4 4202 	umull	r4, r2, r4, r2
 8001874:	0852      	lsrs	r2, r2, #1
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	189c      	adds	r4, r3, r2
 800187a:	88bb      	ldrh	r3, [r7, #4]
 800187c:	7b7a      	ldrb	r2, [r7, #13]
 800187e:	4d4a      	ldr	r5, [pc, #296]	@ (80019a8 <HMEM_voidDrawSymbol+0x4c4>)
 8001880:	fba5 5202 	umull	r5, r2, r5, r2
 8001884:	0852      	lsrs	r2, r2, #1
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	441a      	add	r2, r3
 800188a:	883b      	ldrh	r3, [r7, #0]
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	4613      	mov	r3, r2
 8001890:	4622      	mov	r2, r4
 8001892:	f000 f969 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx+(size/3), cy-(size/3), cx-(size/3), cy+(size/3), color);
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	7b7a      	ldrb	r2, [r7, #13]
 800189a:	4943      	ldr	r1, [pc, #268]	@ (80019a8 <HMEM_voidDrawSymbol+0x4c4>)
 800189c:	fba1 1202 	umull	r1, r2, r1, r2
 80018a0:	0852      	lsrs	r2, r2, #1
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	1898      	adds	r0, r3, r2
 80018a6:	88bb      	ldrh	r3, [r7, #4]
 80018a8:	7b7a      	ldrb	r2, [r7, #13]
 80018aa:	493f      	ldr	r1, [pc, #252]	@ (80019a8 <HMEM_voidDrawSymbol+0x4c4>)
 80018ac:	fba1 1202 	umull	r1, r2, r1, r2
 80018b0:	0852      	lsrs	r2, r2, #1
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	1a99      	subs	r1, r3, r2
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	7b7a      	ldrb	r2, [r7, #13]
 80018ba:	4c3b      	ldr	r4, [pc, #236]	@ (80019a8 <HMEM_voidDrawSymbol+0x4c4>)
 80018bc:	fba4 4202 	umull	r4, r2, r4, r2
 80018c0:	0852      	lsrs	r2, r2, #1
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	1a9c      	subs	r4, r3, r2
 80018c6:	88bb      	ldrh	r3, [r7, #4]
 80018c8:	7b7a      	ldrb	r2, [r7, #13]
 80018ca:	4d37      	ldr	r5, [pc, #220]	@ (80019a8 <HMEM_voidDrawSymbol+0x4c4>)
 80018cc:	fba5 5202 	umull	r5, r2, r5, r2
 80018d0:	0852      	lsrs	r2, r2, #1
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	441a      	add	r2, r3
 80018d6:	883b      	ldrh	r3, [r7, #0]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	4613      	mov	r3, r2
 80018dc:	4622      	mov	r2, r4
 80018de:	f000 f943 	bl	8001b68 <HMEM_voidDrawLine>
            break;
 80018e2:	e05d      	b.n	80019a0 <HMEM_voidDrawSymbol+0x4bc>
            
        case 7: /* Heart (simplified) */
            HMEM_voidDrawLine(cx-2, cy-2, cx, cy, color);
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	1e98      	subs	r0, r3, #2
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	1e99      	subs	r1, r3, #2
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	88bc      	ldrh	r4, [r7, #4]
 80018f0:	883b      	ldrh	r3, [r7, #0]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4623      	mov	r3, r4
 80018f6:	f000 f937 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx+2, cy-2, cx, cy, color);
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	1c98      	adds	r0, r3, #2
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	1e99      	subs	r1, r3, #2
 8001902:	88fa      	ldrh	r2, [r7, #6]
 8001904:	88bc      	ldrh	r4, [r7, #4]
 8001906:	883b      	ldrh	r3, [r7, #0]
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	4623      	mov	r3, r4
 800190c:	f000 f92c 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx, cy, cx, cy+3, color);
 8001910:	88f8      	ldrh	r0, [r7, #6]
 8001912:	88b9      	ldrh	r1, [r7, #4]
 8001914:	88fa      	ldrh	r2, [r7, #6]
 8001916:	88bb      	ldrh	r3, [r7, #4]
 8001918:	1cdc      	adds	r4, r3, #3
 800191a:	883b      	ldrh	r3, [r7, #0]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4623      	mov	r3, r4
 8001920:	f000 f922 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidSetPixel(cx-1, cy-3, color);
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	3b01      	subs	r3, #1
 8001928:	b298      	uxth	r0, r3
 800192a:	88bb      	ldrh	r3, [r7, #4]
 800192c:	3b03      	subs	r3, #3
 800192e:	b29b      	uxth	r3, r3
 8001930:	883a      	ldrh	r2, [r7, #0]
 8001932:	4619      	mov	r1, r3
 8001934:	f000 f8f8 	bl	8001b28 <HMEM_voidSetPixel>
            HMEM_voidSetPixel(cx+1, cy-3, color);
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	3301      	adds	r3, #1
 800193c:	b298      	uxth	r0, r3
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	3b03      	subs	r3, #3
 8001942:	b29b      	uxth	r3, r3
 8001944:	883a      	ldrh	r2, [r7, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	f000 f8ee 	bl	8001b28 <HMEM_voidSetPixel>
            break;
 800194c:	e028      	b.n	80019a0 <HMEM_voidDrawSymbol+0x4bc>
            
        case 8: /* Lightning */
            HMEM_voidDrawLine(cx-2, cy-4, cx, cy, color);
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	1e98      	subs	r0, r3, #2
 8001952:	88bb      	ldrh	r3, [r7, #4]
 8001954:	1f19      	subs	r1, r3, #4
 8001956:	88fa      	ldrh	r2, [r7, #6]
 8001958:	88bc      	ldrh	r4, [r7, #4]
 800195a:	883b      	ldrh	r3, [r7, #0]
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	4623      	mov	r3, r4
 8001960:	f000 f902 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx, cy, cx-1, cy, color);
 8001964:	88f8      	ldrh	r0, [r7, #6]
 8001966:	88b9      	ldrh	r1, [r7, #4]
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	1e5a      	subs	r2, r3, #1
 800196c:	88bc      	ldrh	r4, [r7, #4]
 800196e:	883b      	ldrh	r3, [r7, #0]
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	4623      	mov	r3, r4
 8001974:	f000 f8f8 	bl	8001b68 <HMEM_voidDrawLine>
            HMEM_voidDrawLine(cx-1, cy, cx+2, cy+4, color);
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	1e58      	subs	r0, r3, #1
 800197c:	88b9      	ldrh	r1, [r7, #4]
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	1c9a      	adds	r2, r3, #2
 8001982:	88bb      	ldrh	r3, [r7, #4]
 8001984:	1d1c      	adds	r4, r3, #4
 8001986:	883b      	ldrh	r3, [r7, #0]
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	4623      	mov	r3, r4
 800198c:	f000 f8ec 	bl	8001b68 <HMEM_voidDrawLine>
            break;
 8001990:	e006      	b.n	80019a0 <HMEM_voidDrawSymbol+0x4bc>
            
        default:
            /* Fallback - just a dot */
            HMEM_voidSetPixel(cx, cy, color);
 8001992:	883a      	ldrh	r2, [r7, #0]
 8001994:	88b9      	ldrh	r1, [r7, #4]
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	4618      	mov	r0, r3
 800199a:	f000 f8c5 	bl	8001b28 <HMEM_voidSetPixel>
            break;
 800199e:	bf00      	nop
    }
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bdb0      	pop	{r4, r5, r7, pc}
 80019a8:	aaaaaaab 	.word	0xaaaaaaab

080019ac <HMEM_voidGetCardBounds>:

static void HMEM_voidGetCardBounds(u8 row, u8 col, u16 *x0, u16 *y0, u16 *x1, u16 *y1)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60ba      	str	r2, [r7, #8]
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4603      	mov	r3, r0
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	460b      	mov	r3, r1
 80019bc:	73bb      	strb	r3, [r7, #14]
    *x0 = HMEM_GRID_LEFT + col * HMEM_CARD_WIDTH + HMEM_CARD_MARGIN;
 80019be:	7bbb      	ldrb	r3, [r7, #14]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	00d2      	lsls	r2, r2, #3
 80019c6:	441a      	add	r2, r3
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	330a      	adds	r3, #10
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	801a      	strh	r2, [r3, #0]
    *y0 = HMEM_GRID_TOP + row * HMEM_CARD_HEIGHT + HMEM_CARD_MARGIN;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	0152      	lsls	r2, r2, #5
 80019de:	4413      	add	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	330a      	adds	r3, #10
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	801a      	strh	r2, [r3, #0]
    *x1 = *x0 + HMEM_CARD_WIDTH - 2 * HMEM_CARD_MARGIN - 1;
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	3320      	adds	r3, #32
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	801a      	strh	r2, [r3, #0]
    *y1 = *y0 + HMEM_CARD_HEIGHT - 2 * HMEM_CARD_MARGIN - 1;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	333d      	adds	r3, #61	@ 0x3d
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	801a      	strh	r2, [r3, #0]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HMEM_voidGetCardCenter>:

static void HMEM_voidGetCardCenter(u8 row, u8 col, u16 *cx, u16 *cy)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	60ba      	str	r2, [r7, #8]
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73fb      	strb	r3, [r7, #15]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	73bb      	strb	r3, [r7, #14]
    u16 x0, y0, x1, y1;
    HMEM_voidGetCardBounds(row, col, &x0, &y0, &x1, &y1);
 8001a22:	f107 0414 	add.w	r4, r7, #20
 8001a26:	f107 0216 	add.w	r2, r7, #22
 8001a2a:	7bb9      	ldrb	r1, [r7, #14]
 8001a2c:	7bf8      	ldrb	r0, [r7, #15]
 8001a2e:	f107 0310 	add.w	r3, r7, #16
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	f107 0312 	add.w	r3, r7, #18
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	f7ff ffb6 	bl	80019ac <HMEM_voidGetCardBounds>
    *cx = (x0 + x1) / 2;
 8001a40:	8afb      	ldrh	r3, [r7, #22]
 8001a42:	461a      	mov	r2, r3
 8001a44:	8a7b      	ldrh	r3, [r7, #18]
 8001a46:	4413      	add	r3, r2
 8001a48:	0fda      	lsrs	r2, r3, #31
 8001a4a:	4413      	add	r3, r2
 8001a4c:	105b      	asrs	r3, r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	801a      	strh	r2, [r3, #0]
    *cy = (y0 + y1) / 2;
 8001a54:	8abb      	ldrh	r3, [r7, #20]
 8001a56:	461a      	mov	r2, r3
 8001a58:	8a3b      	ldrh	r3, [r7, #16]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	0fda      	lsrs	r2, r3, #31
 8001a5e:	4413      	add	r3, r2
 8001a60:	105b      	asrs	r3, r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	801a      	strh	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd90      	pop	{r4, r7, pc}

08001a70 <HMEM_voidFillRect>:

static void HMEM_voidFillRect(u16 x0, u16 y0, u16 x1, u16 y1, u16 color)
{
 8001a70:	b490      	push	{r4, r7}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4604      	mov	r4, r0
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4623      	mov	r3, r4
 8001a80:	80fb      	strh	r3, [r7, #6]
 8001a82:	4603      	mov	r3, r0
 8001a84:	80bb      	strh	r3, [r7, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	807b      	strh	r3, [r7, #2]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	803b      	strh	r3, [r7, #0]
    if (x1 < x0) { u16 t = x0; x0 = x1; x1 = t; }
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d205      	bcs.n	8001aa2 <HMEM_voidFillRect+0x32>
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	827b      	strh	r3, [r7, #18]
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	80fb      	strh	r3, [r7, #6]
 8001a9e:	8a7b      	ldrh	r3, [r7, #18]
 8001aa0:	807b      	strh	r3, [r7, #2]
    if (y1 < y0) { u16 t = y0; y0 = y1; y1 = t; }
 8001aa2:	883a      	ldrh	r2, [r7, #0]
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d205      	bcs.n	8001ab6 <HMEM_voidFillRect+0x46>
 8001aaa:	88bb      	ldrh	r3, [r7, #4]
 8001aac:	823b      	strh	r3, [r7, #16]
 8001aae:	883b      	ldrh	r3, [r7, #0]
 8001ab0:	80bb      	strh	r3, [r7, #4]
 8001ab2:	8a3b      	ldrh	r3, [r7, #16]
 8001ab4:	803b      	strh	r3, [r7, #0]
    if (x0 >= HMEM_SCREEN_WIDTH) return;
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001aba:	d82b      	bhi.n	8001b14 <HMEM_voidFillRect+0xa4>
    if (y0 >= HMEM_SCREEN_HEIGHT) return;
 8001abc:	88bb      	ldrh	r3, [r7, #4]
 8001abe:	2b9f      	cmp	r3, #159	@ 0x9f
 8001ac0:	d82a      	bhi.n	8001b18 <HMEM_voidFillRect+0xa8>
    if (x1 >= HMEM_SCREEN_WIDTH) x1 = HMEM_SCREEN_WIDTH-1;
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ac6:	d901      	bls.n	8001acc <HMEM_voidFillRect+0x5c>
 8001ac8:	237f      	movs	r3, #127	@ 0x7f
 8001aca:	807b      	strh	r3, [r7, #2]
    if (y1 >= HMEM_SCREEN_HEIGHT) y1 = HMEM_SCREEN_HEIGHT-1;
 8001acc:	883b      	ldrh	r3, [r7, #0]
 8001ace:	2b9f      	cmp	r3, #159	@ 0x9f
 8001ad0:	d901      	bls.n	8001ad6 <HMEM_voidFillRect+0x66>
 8001ad2:	239f      	movs	r3, #159	@ 0x9f
 8001ad4:	803b      	strh	r3, [r7, #0]

    for (u16 y = y0; y <= y1; ++y) {
 8001ad6:	88bb      	ldrh	r3, [r7, #4]
 8001ad8:	82fb      	strh	r3, [r7, #22]
 8001ada:	e016      	b.n	8001b0a <HMEM_voidFillRect+0x9a>
        u32 base = (u32)y * HMEM_SCREEN_WIDTH;
 8001adc:	8afb      	ldrh	r3, [r7, #22]
 8001ade:	01db      	lsls	r3, r3, #7
 8001ae0:	60fb      	str	r3, [r7, #12]
        for (u16 x = x0; x <= x1; ++x) {
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	82bb      	strh	r3, [r7, #20]
 8001ae6:	e009      	b.n	8001afc <HMEM_voidFillRect+0x8c>
            HMEM_frame[base + x] = color;
 8001ae8:	8aba      	ldrh	r2, [r7, #20]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4413      	add	r3, r2
 8001aee:	490d      	ldr	r1, [pc, #52]	@ (8001b24 <HMEM_voidFillRect+0xb4>)
 8001af0:	8c3a      	ldrh	r2, [r7, #32]
 8001af2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (u16 x = x0; x <= x1; ++x) {
 8001af6:	8abb      	ldrh	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	82bb      	strh	r3, [r7, #20]
 8001afc:	8aba      	ldrh	r2, [r7, #20]
 8001afe:	887b      	ldrh	r3, [r7, #2]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d9f1      	bls.n	8001ae8 <HMEM_voidFillRect+0x78>
    for (u16 y = y0; y <= y1; ++y) {
 8001b04:	8afb      	ldrh	r3, [r7, #22]
 8001b06:	3301      	adds	r3, #1
 8001b08:	82fb      	strh	r3, [r7, #22]
 8001b0a:	8afa      	ldrh	r2, [r7, #22]
 8001b0c:	883b      	ldrh	r3, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d9e4      	bls.n	8001adc <HMEM_voidFillRect+0x6c>
 8001b12:	e002      	b.n	8001b1a <HMEM_voidFillRect+0xaa>
    if (x0 >= HMEM_SCREEN_WIDTH) return;
 8001b14:	bf00      	nop
 8001b16:	e000      	b.n	8001b1a <HMEM_voidFillRect+0xaa>
    if (y0 >= HMEM_SCREEN_HEIGHT) return;
 8001b18:	bf00      	nop
        }
    }
}
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc90      	pop	{r4, r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000080 	.word	0x20000080

08001b28 <HMEM_voidSetPixel>:

static void HMEM_voidSetPixel(u16 x, u16 y, u16 color)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
 8001b32:	460b      	mov	r3, r1
 8001b34:	80bb      	strh	r3, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	807b      	strh	r3, [r7, #2]
    if (x >= HMEM_SCREEN_WIDTH || y >= HMEM_SCREEN_HEIGHT) return;
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b3e:	d80b      	bhi.n	8001b58 <HMEM_voidSetPixel+0x30>
 8001b40:	88bb      	ldrh	r3, [r7, #4]
 8001b42:	2b9f      	cmp	r3, #159	@ 0x9f
 8001b44:	d808      	bhi.n	8001b58 <HMEM_voidSetPixel+0x30>
    HMEM_frame[(u32)y * HMEM_SCREEN_WIDTH + x] = color;
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	01da      	lsls	r2, r3, #7
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4905      	ldr	r1, [pc, #20]	@ (8001b64 <HMEM_voidSetPixel+0x3c>)
 8001b50:	887a      	ldrh	r2, [r7, #2]
 8001b52:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001b56:	e000      	b.n	8001b5a <HMEM_voidSetPixel+0x32>
    if (x >= HMEM_SCREEN_WIDTH || y >= HMEM_SCREEN_HEIGHT) return;
 8001b58:	bf00      	nop
}
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	20000080 	.word	0x20000080

08001b68 <HMEM_voidDrawLine>:

static void HMEM_voidDrawLine(int x0, int y0, int x1, int y1, u16 color)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	@ 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
    /* Bresenham line algorithm (integer) */
    int dx = abs(x1 - x0);
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bfb8      	it	lt
 8001b80:	425b      	neglt	r3, r3
 8001b82:	623b      	str	r3, [r7, #32]
    int sx = x0 < x1 ? 1 : -1;
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	da01      	bge.n	8001b90 <HMEM_voidDrawLine+0x28>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e001      	b.n	8001b94 <HMEM_voidDrawLine+0x2c>
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
 8001b94:	61fb      	str	r3, [r7, #28]
    int dy = -abs(y1 - y0);
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bfb8      	it	lt
 8001ba0:	425b      	neglt	r3, r3
 8001ba2:	425b      	negs	r3, r3
 8001ba4:	61bb      	str	r3, [r7, #24]
    int sy = y0 < y1 ? 1 : -1;
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	da01      	bge.n	8001bb2 <HMEM_voidDrawLine+0x4a>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e001      	b.n	8001bb6 <HMEM_voidDrawLine+0x4e>
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	617b      	str	r3, [r7, #20]
    int err = dx + dy;
 8001bb8:	6a3a      	ldr	r2, [r7, #32]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    
    while (1) {
        if ((u32)x0 < HMEM_SCREEN_WIDTH && (u32)y0 < HMEM_SCREEN_HEIGHT && x0 >= 0 && y0 >= 0) {
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bc4:	d810      	bhi.n	8001be8 <HMEM_voidDrawLine+0x80>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b9f      	cmp	r3, #159	@ 0x9f
 8001bca:	d80d      	bhi.n	8001be8 <HMEM_voidDrawLine+0x80>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0a      	blt.n	8001be8 <HMEM_voidDrawLine+0x80>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db07      	blt.n	8001be8 <HMEM_voidDrawLine+0x80>
            HMEM_voidSetPixel((u16)x0, (u16)y0, color);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	b291      	uxth	r1, r2
 8001be0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ffa0 	bl	8001b28 <HMEM_voidSetPixel>
        }
        if (x0 == x1 && y0 == y1) break;
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d103      	bne.n	8001bf8 <HMEM_voidDrawLine+0x90>
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d01b      	beq.n	8001c30 <HMEM_voidDrawLine+0xc8>
        int e2 = 2 * err;
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	613b      	str	r3, [r7, #16]
        if (e2 >= dy) {
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	db07      	blt.n	8001c16 <HMEM_voidDrawLine+0xae>
            err += dy;
 8001c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
            x0 += sx;
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
        }
        if (e2 <= dx) {
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dcd0      	bgt.n	8001bc0 <HMEM_voidDrawLine+0x58>
            err += dx;
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	4413      	add	r3, r2
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
            y0 += sy;
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60bb      	str	r3, [r7, #8]
    while (1) {
 8001c2e:	e7c7      	b.n	8001bc0 <HMEM_voidDrawLine+0x58>
        if (x0 == x1 && y0 == y1) break;
 8001c30:	bf00      	nop
        }
    }
}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	@ 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <sampleButton>:
static u8 readButtonDown(void);
static u8 readButtonSelect(void);

/* debounce helper (blocking like earlier) */
static u8 sampleButton(u8 (*readFn)(void))
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
    if (readFn()) {
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4798      	blx	r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00f      	beq.n	8001c6c <sampleButton+0x32>
        MSTK_voidDelayms(10);
 8001c4c:	200a      	movs	r0, #10
 8001c4e:	f001 fde9 	bl	8003824 <MSTK_voidDelayms>
        if (readFn()) {
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4798      	blx	r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <sampleButton+0x32>
            while (readFn()) {} /* wait release */
 8001c5c:	bf00      	nop
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4798      	blx	r3
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1fa      	bne.n	8001c5e <sampleButton+0x24>
            return 1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <sampleButton+0x34>
        }
    }
    return 0;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <putPixel>:

/* ---------- drawing helpers using GlobalFrameBuffer ---------- */
static inline void putPixel(int x, int y, u16 color)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	4613      	mov	r3, r2
 8001c84:	80fb      	strh	r3, [r7, #6]
    if (x < 0 || x >= TFT_W || y < 0 || y >= TFT_H) return;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db11      	blt.n	8001cb0 <putPixel+0x38>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c90:	dc0e      	bgt.n	8001cb0 <putPixel+0x38>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0b      	blt.n	8001cb0 <putPixel+0x38>
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b9f      	cmp	r3, #159	@ 0x9f
 8001c9c:	dc08      	bgt.n	8001cb0 <putPixel+0x38>
    GlobalFrameBuffer[y * TFT_W + x] = color;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	01da      	lsls	r2, r3, #7
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4905      	ldr	r1, [pc, #20]	@ (8001cbc <putPixel+0x44>)
 8001ca8:	88fa      	ldrh	r2, [r7, #6]
 8001caa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001cae:	e000      	b.n	8001cb2 <putPixel+0x3a>
    if (x < 0 || x >= TFT_W || y < 0 || y >= TFT_H) return;
 8001cb0:	bf00      	nop
}
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	20000080 	.word	0x20000080

08001cc0 <fillRect>:

static void fillRect(int x, int y, int w, int h, u16 color)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
    if (x < 0) x = 0;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	da01      	bge.n	8001cd8 <fillRect+0x18>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
    if (y < 0) y = 0;
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da01      	bge.n	8001ce2 <fillRect+0x22>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
    int x2 = x + w;
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	61fb      	str	r3, [r7, #28]
    int y2 = y + h;
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
    if (x2 > TFT_W) x2 = TFT_W;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	2b80      	cmp	r3, #128	@ 0x80
 8001cf6:	dd01      	ble.n	8001cfc <fillRect+0x3c>
 8001cf8:	2380      	movs	r3, #128	@ 0x80
 8001cfa:	61fb      	str	r3, [r7, #28]
    if (y2 > TFT_H) y2 = TFT_H;
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d00:	dd01      	ble.n	8001d06 <fillRect+0x46>
 8001d02:	23a0      	movs	r3, #160	@ 0xa0
 8001d04:	61bb      	str	r3, [r7, #24]
    for (int yy = y; yy < y2; ++yy)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e012      	b.n	8001d32 <fillRect+0x72>
        for (int xx = x; xx < x2; ++xx)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e008      	b.n	8001d24 <fillRect+0x64>
            putPixel(xx, yy, color);
 8001d12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d14:	461a      	mov	r2, r3
 8001d16:	6979      	ldr	r1, [r7, #20]
 8001d18:	6938      	ldr	r0, [r7, #16]
 8001d1a:	f7ff ffad 	bl	8001c78 <putPixel>
        for (int xx = x; xx < x2; ++xx)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	3301      	adds	r3, #1
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dbf2      	blt.n	8001d12 <fillRect+0x52>
    for (int yy = y; yy < y2; ++yy)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	dbe8      	blt.n	8001d0c <fillRect+0x4c>
}
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <drawChar>:

/* Use same glyph drawing as your math code (5x7 font, 8px stride) */
static void drawChar(int x, int y, char c, u16 color)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	461a      	mov	r2, r3
 8001d52:	460b      	mov	r3, r1
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	4613      	mov	r3, r2
 8001d58:	80bb      	strh	r3, [r7, #4]
    if (c < 32 || c > 127) return;
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b1f      	cmp	r3, #31
 8001d5e:	d936      	bls.n	8001dce <drawChar+0x8a>
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db32      	blt.n	8001dce <drawChar+0x8a>
    const u8 *ch = font5x7[c - 32];
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f1a3 0220 	sub.w	r2, r3, #32
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	4a18      	ldr	r2, [pc, #96]	@ (8001dd8 <drawChar+0x94>)
 8001d76:	4413      	add	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
    for (u8 col = 0; col < 5; col++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	77fb      	strb	r3, [r7, #31]
 8001d7e:	e022      	b.n	8001dc6 <drawChar+0x82>
        u8 colbits = ch[col];
 8001d80:	7ffb      	ldrb	r3, [r7, #31]
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	75fb      	strb	r3, [r7, #23]
        for (u8 row = 0; row < 8; row++) {
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	77bb      	strb	r3, [r7, #30]
 8001d8e:	e014      	b.n	8001dba <drawChar+0x76>
            if (colbits & (1 << row)) putPixel(x + col, y + row, color);
 8001d90:	7dfa      	ldrb	r2, [r7, #23]
 8001d92:	7fbb      	ldrb	r3, [r7, #30]
 8001d94:	fa42 f303 	asr.w	r3, r2, r3
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d009      	beq.n	8001db4 <drawChar+0x70>
 8001da0:	7ffa      	ldrb	r2, [r7, #31]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	18d0      	adds	r0, r2, r3
 8001da6:	7fba      	ldrb	r2, [r7, #30]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4413      	add	r3, r2
 8001dac:	88ba      	ldrh	r2, [r7, #4]
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7ff ff62 	bl	8001c78 <putPixel>
        for (u8 row = 0; row < 8; row++) {
 8001db4:	7fbb      	ldrb	r3, [r7, #30]
 8001db6:	3301      	adds	r3, #1
 8001db8:	77bb      	strb	r3, [r7, #30]
 8001dba:	7fbb      	ldrb	r3, [r7, #30]
 8001dbc:	2b07      	cmp	r3, #7
 8001dbe:	d9e7      	bls.n	8001d90 <drawChar+0x4c>
    for (u8 col = 0; col < 5; col++) {
 8001dc0:	7ffb      	ldrb	r3, [r7, #31]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	77fb      	strb	r3, [r7, #31]
 8001dc6:	7ffb      	ldrb	r3, [r7, #31]
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d9d9      	bls.n	8001d80 <drawChar+0x3c>
 8001dcc:	e000      	b.n	8001dd0 <drawChar+0x8c>
    if (c < 32 || c > 127) return;
 8001dce:	bf00      	nop
        }
    }
}
 8001dd0:	3720      	adds	r7, #32
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	08005910 	.word	0x08005910

08001ddc <drawString>:

static void drawString(int x, int y, const char *s, u16 color)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	807b      	strh	r3, [r7, #2]
    int cx = x;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	617b      	str	r3, [r7, #20]
    while (*s) {
 8001dee:	e00b      	b.n	8001e08 <drawString+0x2c>
        drawChar(cx, y, *s++, color);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	781a      	ldrb	r2, [r3, #0]
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	6978      	ldr	r0, [r7, #20]
 8001dfe:	f7ff ffa1 	bl	8001d44 <drawChar>
        cx += 8; /* same spacing as HMATH code */
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3308      	adds	r3, #8
 8001e06:	617b      	str	r3, [r7, #20]
    while (*s) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ef      	bne.n	8001df0 <drawString+0x14>
    }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HMenu_voidInit>:
#define COLOR_YEL   0xFFE0
#define COLOR_ORNG  0xFD20  /* orange-like */

/* ------------ menu implementation ------------ */
void HMenu_voidInit(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
    selected = MENU_MEM;
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <HMenu_voidInit+0x18>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
    drawMenu();
 8001e26:	f000 f88f 	bl	8001f48 <drawMenu>
    HTFT_voidDisplay(GlobalFrameBuffer);
 8001e2a:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <HMenu_voidInit+0x1c>)
 8001e2c:	f000 f9e3 	bl	80021f6 <HTFT_voidDisplay>
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2000a0c8 	.word	0x2000a0c8
 8001e38:	20000080 	.word	0x20000080

08001e3c <HMenu_voidPoll>:

void HMenu_voidPoll(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
    if (sampleButton(readButtonUp)) {
 8001e40:	483c      	ldr	r0, [pc, #240]	@ (8001f34 <HMenu_voidPoll+0xf8>)
 8001e42:	f7ff fefa 	bl	8001c3a <sampleButton>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d012      	beq.n	8001e72 <HMenu_voidPoll+0x36>
        if (selected == 0) selected = MENU_COUNT - 1;
 8001e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f38 <HMenu_voidPoll+0xfc>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d103      	bne.n	8001e5c <HMenu_voidPoll+0x20>
 8001e54:	4b38      	ldr	r3, [pc, #224]	@ (8001f38 <HMenu_voidPoll+0xfc>)
 8001e56:	2203      	movs	r2, #3
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e005      	b.n	8001e68 <HMenu_voidPoll+0x2c>
        else selected = (MenuItem_t)(selected - 1);
 8001e5c:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <HMenu_voidPoll+0xfc>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b34      	ldr	r3, [pc, #208]	@ (8001f38 <HMenu_voidPoll+0xfc>)
 8001e66:	701a      	strb	r2, [r3, #0]
        drawMenu();
 8001e68:	f000 f86e 	bl	8001f48 <drawMenu>
        HTFT_voidDisplay(GlobalFrameBuffer);
 8001e6c:	4833      	ldr	r0, [pc, #204]	@ (8001f3c <HMenu_voidPoll+0x100>)
 8001e6e:	f000 f9c2 	bl	80021f6 <HTFT_voidDisplay>
    }
    if (sampleButton(readButtonDown)) {
 8001e72:	4833      	ldr	r0, [pc, #204]	@ (8001f40 <HMenu_voidPoll+0x104>)
 8001e74:	f7ff fee1 	bl	8001c3a <sampleButton>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d011      	beq.n	8001ea2 <HMenu_voidPoll+0x66>
        selected = (MenuItem_t)((selected + 1) % MENU_COUNT);
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f38 <HMenu_voidPoll+0xfc>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	425a      	negs	r2, r3
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	f002 0203 	and.w	r2, r2, #3
 8001e8e:	bf58      	it	pl
 8001e90:	4253      	negpl	r3, r2
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <HMenu_voidPoll+0xfc>)
 8001e96:	701a      	strb	r2, [r3, #0]
        drawMenu();
 8001e98:	f000 f856 	bl	8001f48 <drawMenu>
        HTFT_voidDisplay(GlobalFrameBuffer);
 8001e9c:	4827      	ldr	r0, [pc, #156]	@ (8001f3c <HMenu_voidPoll+0x100>)
 8001e9e:	f000 f9aa 	bl	80021f6 <HTFT_voidDisplay>
    }
    if (sampleButton(readButtonSelect)) {
 8001ea2:	4828      	ldr	r0, [pc, #160]	@ (8001f44 <HMenu_voidPoll+0x108>)
 8001ea4:	f7ff fec9 	bl	8001c3a <sampleButton>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d040      	beq.n	8001f30 <HMenu_voidPoll+0xf4>
        switch (selected) {
 8001eae:	4b22      	ldr	r3, [pc, #136]	@ (8001f38 <HMenu_voidPoll+0xfc>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d83b      	bhi.n	8001f2e <HMenu_voidPoll+0xf2>
 8001eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ebc <HMenu_voidPoll+0x80>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001ecd 	.word	0x08001ecd
 8001ec0:	08001eeb 	.word	0x08001eeb
 8001ec4:	08001f09 	.word	0x08001f09
 8001ec8:	08001f27 	.word	0x08001f27
            case MENU_MEM:
                HMEM_voidInit();
 8001ecc:	f7fe ff24 	bl	8000d18 <HMEM_voidInit>
                while (1) {
                    HMEM_voidPoll();
 8001ed0:	f7fe ffd6 	bl	8000e80 <HMEM_voidPoll>
                    HTFT_voidDisplay(HMEM_u16GetFrameBuffer());
 8001ed4:	f7fe ffca 	bl	8000e6c <HMEM_u16GetFrameBuffer>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f98b 	bl	80021f6 <HTFT_voidDisplay>
                    MSTK_voidDelayus(20);
 8001ee0:	2014      	movs	r0, #20
 8001ee2:	f001 fcc1 	bl	8003868 <MSTK_voidDelayus>
                    HMEM_voidPoll();
 8001ee6:	bf00      	nop
 8001ee8:	e7f2      	b.n	8001ed0 <HMenu_voidPoll+0x94>
                }
                break;
            case MENU_XO:
                HXO_voidInit();
 8001eea:	f000 fdb1 	bl	8002a50 <HXO_voidInit>
                while (1) {
                    HXO_voidPoll();
 8001eee:	f000 fdf1 	bl	8002ad4 <HXO_voidPoll>
                    HTFT_voidDisplay(HXO_u16GetFrameBuffer());
 8001ef2:	f000 fe5f 	bl	8002bb4 <HXO_u16GetFrameBuffer>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f97c 	bl	80021f6 <HTFT_voidDisplay>
                    MSTK_voidDelayms(10);
 8001efe:	200a      	movs	r0, #10
 8001f00:	f001 fc90 	bl	8003824 <MSTK_voidDelayms>
                    HXO_voidPoll();
 8001f04:	bf00      	nop
 8001f06:	e7f2      	b.n	8001eee <HMenu_voidPoll+0xb2>
                }
                break;
            case MENU_MATH:
                HMATH_voidInit();
 8001f08:	f7fe f9de 	bl	80002c8 <HMATH_voidInit>
                while (1) {
                    HMATH_voidPoll();
 8001f0c:	f7fe fa48 	bl	80003a0 <HMATH_voidPoll>
                    HTFT_voidDisplay(HMATH_u16GetFrameBuffer());
 8001f10:	f7fe fa3c 	bl	800038c <HMATH_u16GetFrameBuffer>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f96d 	bl	80021f6 <HTFT_voidDisplay>
                    MSTK_voidDelayus(20);
 8001f1c:	2014      	movs	r0, #20
 8001f1e:	f001 fca3 	bl	8003868 <MSTK_voidDelayus>
                    HMATH_voidPoll();
 8001f22:	bf00      	nop
 8001f24:	e7f2      	b.n	8001f0c <HMenu_voidPoll+0xd0>
                }
                break;
            case MENU_SNAKE:
                Snake_voidInit();
 8001f26:	f001 fd91 	bl	8003a4c <Snake_voidInit>
                Snake_voidGameLoop();
 8001f2a:	f001 fe09 	bl	8003b40 <Snake_voidGameLoop>
            default:
                break;
 8001f2e:	bf00      	nop
        }
    }
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	080020b5 	.word	0x080020b5
 8001f38:	2000a0c8 	.word	0x2000a0c8
 8001f3c:	20000080 	.word	0x20000080
 8001f40:	080020d1 	.word	0x080020d1
 8001f44:	080020ed 	.word	0x080020ed

08001f48 <drawMenu>:

/* Draw menu: simple tiles + colored labels */
static void drawMenu(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af02      	add	r7, sp, #8
    /* background */
    fillRect(0, 0, TFT_W, TFT_H, COLOR_BLACK);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	23a0      	movs	r3, #160	@ 0xa0
 8001f54:	2280      	movs	r2, #128	@ 0x80
 8001f56:	2100      	movs	r1, #0
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff feb1 	bl	8001cc0 <fillRect>

    /* four tiles vertically */
    int tile_h = TFT_H / 4;
 8001f5e:	2328      	movs	r3, #40	@ 0x28
 8001f60:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 4; ++i) {
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e088      	b.n	800207a <drawMenu+0x132>
        int y = i * tile_h + 4;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	fb02 f303 	mul.w	r3, r2, r3
 8001f70:	3304      	adds	r3, #4
 8001f72:	60bb      	str	r3, [r7, #8]
        int h = tile_h - 8;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3b08      	subs	r3, #8
 8001f78:	607b      	str	r3, [r7, #4]
        u16 boxColor = COLOR_GRAY;
 8001f7a:	f248 4310 	movw	r3, #33808	@ 0x8410
 8001f7e:	827b      	strh	r3, [r7, #18]
        u16 textColor = COLOR_WHITE;
 8001f80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f84:	823b      	strh	r3, [r7, #16]

        if (i == (int)selected) {
 8001f86:	4b44      	ldr	r3, [pc, #272]	@ (8002098 <drawMenu+0x150>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d104      	bne.n	8001f9c <drawMenu+0x54>
            boxColor = COLOR_WHITE;
 8001f92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f96:	827b      	strh	r3, [r7, #18]
            textColor = COLOR_BLACK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	823b      	strh	r3, [r7, #16]
        }
        fillRect(6, y, TFT_W - 12, h, boxColor);
 8001f9c:	8a7b      	ldrh	r3, [r7, #18]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2274      	movs	r2, #116	@ 0x74
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	2006      	movs	r0, #6
 8001fa8:	f7ff fe8a 	bl	8001cc0 <fillRect>

        /* labels with distinct colors when not selected, black when selected */
        switch (i) {
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d851      	bhi.n	8002056 <drawMenu+0x10e>
 8001fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb8 <drawMenu+0x70>)
 8001fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb8:	08001fc9 	.word	0x08001fc9
 8001fbc:	08001fed 	.word	0x08001fed
 8001fc0:	08002011 	.word	0x08002011
 8001fc4:	08002033 	.word	0x08002033
            case 0: drawString(20, y + 8, "MEMORY MATCH",   (i == selected) ? textColor : COLOR_RED);   break;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f103 0108 	add.w	r1, r3, #8
 8001fce:	4b32      	ldr	r3, [pc, #200]	@ (8002098 <drawMenu+0x150>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <drawMenu+0x96>
 8001fda:	8a3b      	ldrh	r3, [r7, #16]
 8001fdc:	e001      	b.n	8001fe2 <drawMenu+0x9a>
 8001fde:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800209c <drawMenu+0x154>)
 8001fe4:	2014      	movs	r0, #20
 8001fe6:	f7ff fef9 	bl	8001ddc <drawString>
 8001fea:	e034      	b.n	8002056 <drawMenu+0x10e>
            case 1: drawString(20, y + 8, "XO",    (i == selected) ? textColor : COLOR_GREEN); break;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f103 0108 	add.w	r1, r3, #8
 8001ff2:	4b29      	ldr	r3, [pc, #164]	@ (8002098 <drawMenu+0x150>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <drawMenu+0xba>
 8001ffe:	8a3b      	ldrh	r3, [r7, #16]
 8002000:	e001      	b.n	8002006 <drawMenu+0xbe>
 8002002:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002006:	4a26      	ldr	r2, [pc, #152]	@ (80020a0 <drawMenu+0x158>)
 8002008:	2014      	movs	r0, #20
 800200a:	f7ff fee7 	bl	8001ddc <drawString>
 800200e:	e022      	b.n	8002056 <drawMenu+0x10e>
            case 2: drawString(20, y + 8, "MATH QUIZ",  (i == selected) ? textColor : COLOR_BLUE);  break;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f103 0108 	add.w	r1, r3, #8
 8002016:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <drawMenu+0x150>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <drawMenu+0xde>
 8002022:	8a3b      	ldrh	r3, [r7, #16]
 8002024:	e000      	b.n	8002028 <drawMenu+0xe0>
 8002026:	231f      	movs	r3, #31
 8002028:	4a1e      	ldr	r2, [pc, #120]	@ (80020a4 <drawMenu+0x15c>)
 800202a:	2014      	movs	r0, #20
 800202c:	f7ff fed6 	bl	8001ddc <drawString>
 8002030:	e011      	b.n	8002056 <drawMenu+0x10e>
            case 3: drawString(20, y + 8, "SNAKE", (i == selected) ? textColor : COLOR_ORNG);  break;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f103 0108 	add.w	r1, r3, #8
 8002038:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <drawMenu+0x150>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <drawMenu+0x100>
 8002044:	8a3b      	ldrh	r3, [r7, #16]
 8002046:	e001      	b.n	800204c <drawMenu+0x104>
 8002048:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800204c:	4a16      	ldr	r2, [pc, #88]	@ (80020a8 <drawMenu+0x160>)
 800204e:	2014      	movs	r0, #20
 8002050:	f7ff fec4 	bl	8001ddc <drawString>
 8002054:	bf00      	nop
        }

        /* selection arrow */
        if (i == (int)selected) {
 8002056:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <drawMenu+0x150>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	4293      	cmp	r3, r2
 8002060:	d108      	bne.n	8002074 <drawMenu+0x12c>
            drawString(TFT_W - 28, y + 8, ">", COLOR_RED);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f103 0108 	add.w	r1, r3, #8
 8002068:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800206c:	4a0f      	ldr	r2, [pc, #60]	@ (80020ac <drawMenu+0x164>)
 800206e:	2064      	movs	r0, #100	@ 0x64
 8002070:	f7ff feb4 	bl	8001ddc <drawString>
    for (int i = 0; i < 4; ++i) {
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	3301      	adds	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b03      	cmp	r3, #3
 800207e:	f77f af73 	ble.w	8001f68 <drawMenu+0x20>
        }
    }

    /* top title */
    drawString(8, 4, "GAME HUB", COLOR_GREEN);
 8002082:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <drawMenu+0x168>)
 8002088:	2104      	movs	r1, #4
 800208a:	2008      	movs	r0, #8
 800208c:	f7ff fea6 	bl	8001ddc <drawString>
}
 8002090:	bf00      	nop
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	2000a0c8 	.word	0x2000a0c8
 800209c:	08005670 	.word	0x08005670
 80020a0:	08005680 	.word	0x08005680
 80020a4:	08005684 	.word	0x08005684
 80020a8:	08005690 	.word	0x08005690
 80020ac:	08005698 	.word	0x08005698
 80020b0:	0800569c 	.word	0x0800569c

080020b4 <readButtonUp>:

/* button read wrappers - pressed = 0 (active low) */
static u8 readButtonUp(void)    { return (MGPIO_u8GetPinValue(BTN_UP_PORT, BTN_UP_PIN) == 0); }
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	2108      	movs	r1, #8
 80020ba:	2000      	movs	r0, #0
 80020bc:	f001 f932 	bl	8003324 <MGPIO_u8GetPinValue>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bf0c      	ite	eq
 80020c6:	2301      	moveq	r3, #1
 80020c8:	2300      	movne	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <readButtonDown>:
static u8 readButtonDown(void)  { return (MGPIO_u8GetPinValue(BTN_DOWN_PORT, BTN_DOWN_PIN) == 0); }
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	2109      	movs	r1, #9
 80020d6:	2000      	movs	r0, #0
 80020d8:	f001 f924 	bl	8003324 <MGPIO_u8GetPinValue>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}

080020ec <readButtonSelect>:
static u8 readButtonSelect(void){ return (MGPIO_u8GetPinValue(BTN_SEL_PORT, BTN_SEL_PIN) == 0); }
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	210a      	movs	r1, #10
 80020f2:	2000      	movs	r0, #0
 80020f4:	f001 f916 	bl	8003324 <MGPIO_u8GetPinValue>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf0c      	ite	eq
 80020fe:	2301      	moveq	r3, #1
 8002100:	2300      	movne	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}

08002108 <HTFT_voidInit>:
#include "HTFT_int.h"
#include "HTFT_prv.h"
#include "HTFT_conf.h"

void HTFT_voidInit()
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	//Configure Control pin &Reset pin
	MGPIO_voidSetPinMode(TFT_PORT,CONTROL_PIN,OUTPUT);
 800210c:	2201      	movs	r2, #1
 800210e:	2101      	movs	r1, #1
 8002110:	2000      	movs	r0, #0
 8002112:	f000 fed3 	bl	8002ebc <MGPIO_voidSetPinMode>
	MGPIO_voidSetOutputConfig(TFT_PORT,CONTROL_PIN,PUSH_PULL,LOW_Speed);
 8002116:	2300      	movs	r3, #0
 8002118:	2200      	movs	r2, #0
 800211a:	2101      	movs	r1, #1
 800211c:	2000      	movs	r0, #0
 800211e:	f000 ff49 	bl	8002fb4 <MGPIO_voidSetOutputConfig>
	MGPIO_voidSetPinMode(TFT_PORT,RST_PIN,OUTPUT);
 8002122:	2201      	movs	r2, #1
 8002124:	2100      	movs	r1, #0
 8002126:	2000      	movs	r0, #0
 8002128:	f000 fec8 	bl	8002ebc <MGPIO_voidSetPinMode>
	MGPIO_voidSetOutputConfig(TFT_PORT,RST_PIN,PUSH_PULL,LOW_Speed);
 800212c:	2300      	movs	r3, #0
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	2000      	movs	r0, #0
 8002134:	f000 ff3e 	bl	8002fb4 <MGPIO_voidSetOutputConfig>

	//Reset Sequence
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,HIGH);
 8002138:	2201      	movs	r2, #1
 800213a:	2100      	movs	r1, #0
 800213c:	2000      	movs	r0, #0
 800213e:	f000 ffff 	bl	8003140 <MGPIO_voidSetPinValue>
	MSTK_voidDelayus(100);
 8002142:	2064      	movs	r0, #100	@ 0x64
 8002144:	f001 fb90 	bl	8003868 <MSTK_voidDelayus>
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,LOW);
 8002148:	2200      	movs	r2, #0
 800214a:	2100      	movs	r1, #0
 800214c:	2000      	movs	r0, #0
 800214e:	f000 fff7 	bl	8003140 <MGPIO_voidSetPinValue>
	MSTK_voidDelayus(1);
 8002152:	2001      	movs	r0, #1
 8002154:	f001 fb88 	bl	8003868 <MSTK_voidDelayus>
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,HIGH);
 8002158:	2201      	movs	r2, #1
 800215a:	2100      	movs	r1, #0
 800215c:	2000      	movs	r0, #0
 800215e:	f000 ffef 	bl	8003140 <MGPIO_voidSetPinValue>
	MSTK_voidDelayus(100);
 8002162:	2064      	movs	r0, #100	@ 0x64
 8002164:	f001 fb80 	bl	8003868 <MSTK_voidDelayus>
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,LOW);
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	2000      	movs	r0, #0
 800216e:	f000 ffe7 	bl	8003140 <MGPIO_voidSetPinValue>
	MSTK_voidDelayus(100);
 8002172:	2064      	movs	r0, #100	@ 0x64
 8002174:	f001 fb78 	bl	8003868 <MSTK_voidDelayus>
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,HIGH);
 8002178:	2201      	movs	r2, #1
 800217a:	2100      	movs	r1, #0
 800217c:	2000      	movs	r0, #0
 800217e:	f000 ffdf 	bl	8003140 <MGPIO_voidSetPinValue>
	MSTK_voidDelayms(120);
 8002182:	2078      	movs	r0, #120	@ 0x78
 8002184:	f001 fb4e 	bl	8003824 <MSTK_voidDelayms>

	//Sleep out
	HTFT_voidWriteCommand(SLEEP_OUT);
 8002188:	2011      	movs	r0, #17
 800218a:	f000 f821 	bl	80021d0 <HTFT_voidWriteCommand>
	MSTK_voidDelayms(10);
 800218e:	200a      	movs	r0, #10
 8002190:	f001 fb48 	bl	8003824 <MSTK_voidDelayms>

	//Select Color mode
	HTFT_voidWriteCommand(COLOR_MODE);
 8002194:	203a      	movs	r0, #58	@ 0x3a
 8002196:	f000 f81b 	bl	80021d0 <HTFT_voidWriteCommand>
	HTFT_voidWriteData(RGB565);
 800219a:	2005      	movs	r0, #5
 800219c:	f000 f805 	bl	80021aa <HTFT_voidWriteData>

	//Display on
	HTFT_voidWriteCommand(DISPLAY_ON);
 80021a0:	2029      	movs	r0, #41	@ 0x29
 80021a2:	f000 f815 	bl	80021d0 <HTFT_voidWriteCommand>
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HTFT_voidWriteData>:
static void HTFT_voidWriteData(u8 Copy_u8Data)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidSetPinValue(TFT_PORT,CONTROL_PIN,HIGH);
 80021b4:	2201      	movs	r2, #1
 80021b6:	2101      	movs	r1, #1
 80021b8:	2000      	movs	r0, #0
 80021ba:	f000 ffc1 	bl	8003140 <MGPIO_voidSetPinValue>
	(void)MSPI_u16Tranceive(Copy_u8Data);
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 fabe 	bl	8003744 <MSPI_u16Tranceive>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HTFT_voidWriteCommand>:
static void HTFT_voidWriteCommand(u8 Copy_u8CMD)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidSetPinValue(TFT_PORT,CONTROL_PIN,LOW);
 80021da:	2200      	movs	r2, #0
 80021dc:	2101      	movs	r1, #1
 80021de:	2000      	movs	r0, #0
 80021e0:	f000 ffae 	bl	8003140 <MGPIO_voidSetPinValue>
	(void)MSPI_u16Tranceive(Copy_u8CMD);
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4618      	mov	r0, r3
 80021ea:	f001 faab 	bl	8003744 <MSPI_u16Tranceive>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HTFT_voidDisplay>:
void HTFT_voidDisplay(const u16*Copy_pu16PTR)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
	u16 Local_u16Iteartor;
	u8 Local_u8HighPart,Local_u8LowPart;
	//Set x
	HTFT_voidWriteCommand(X_DIRECTION);
 80021fe:	202a      	movs	r0, #42	@ 0x2a
 8002200:	f7ff ffe6 	bl	80021d0 <HTFT_voidWriteCommand>
	HTFT_voidWriteData(START_X_B0);
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff ffd0 	bl	80021aa <HTFT_voidWriteData>
	HTFT_voidWriteData(START_X_B1);
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff ffcd 	bl	80021aa <HTFT_voidWriteData>
	HTFT_voidWriteData(END_X_B0);
 8002210:	2000      	movs	r0, #0
 8002212:	f7ff ffca 	bl	80021aa <HTFT_voidWriteData>
	HTFT_voidWriteData(END_X_B1);
 8002216:	207f      	movs	r0, #127	@ 0x7f
 8002218:	f7ff ffc7 	bl	80021aa <HTFT_voidWriteData>

	//Set Y
	HTFT_voidWriteCommand(Y_DIRECTION);
 800221c:	202b      	movs	r0, #43	@ 0x2b
 800221e:	f7ff ffd7 	bl	80021d0 <HTFT_voidWriteCommand>
	HTFT_voidWriteData(START_Y_B0);
 8002222:	2000      	movs	r0, #0
 8002224:	f7ff ffc1 	bl	80021aa <HTFT_voidWriteData>
	HTFT_voidWriteData(START_Y_B1);
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff ffbe 	bl	80021aa <HTFT_voidWriteData>
	HTFT_voidWriteData(END_Y_B0);
 800222e:	2000      	movs	r0, #0
 8002230:	f7ff ffbb 	bl	80021aa <HTFT_voidWriteData>
	HTFT_voidWriteData(END_Y_B1);
 8002234:	209f      	movs	r0, #159	@ 0x9f
 8002236:	f7ff ffb8 	bl	80021aa <HTFT_voidWriteData>

	//Write on the screen
	HTFT_voidWriteCommand(SCREEN_WRITE);
 800223a:	202c      	movs	r0, #44	@ 0x2c
 800223c:	f7ff ffc8 	bl	80021d0 <HTFT_voidWriteCommand>

	for(Local_u16Iteartor=0;Local_u16Iteartor<IMAGE_SIZE;Local_u16Iteartor++)
 8002240:	2300      	movs	r3, #0
 8002242:	81fb      	strh	r3, [r7, #14]
 8002244:	e018      	b.n	8002278 <HTFT_voidDisplay+0x82>
	{
		Local_u8LowPart=(u8)Copy_pu16PTR[Local_u16Iteartor]; //lsb
 8002246:	89fb      	ldrh	r3, [r7, #14]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	737b      	strb	r3, [r7, #13]
		Local_u8HighPart=(u8)(Copy_pu16PTR[Local_u16Iteartor]>>8);  //msb
 8002252:	89fb      	ldrh	r3, [r7, #14]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	b29b      	uxth	r3, r3
 8002260:	733b      	strb	r3, [r7, #12]

		HTFT_voidWriteData(Local_u8HighPart);
 8002262:	7b3b      	ldrb	r3, [r7, #12]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ffa0 	bl	80021aa <HTFT_voidWriteData>
		HTFT_voidWriteData(Local_u8LowPart);
 800226a:	7b7b      	ldrb	r3, [r7, #13]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff9c 	bl	80021aa <HTFT_voidWriteData>
	for(Local_u16Iteartor=0;Local_u16Iteartor<IMAGE_SIZE;Local_u16Iteartor++)
 8002272:	89fb      	ldrh	r3, [r7, #14]
 8002274:	3301      	adds	r3, #1
 8002276:	81fb      	strh	r3, [r7, #14]
 8002278:	89fb      	ldrh	r3, [r7, #14]
 800227a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800227e:	d3e2      	bcc.n	8002246 <HTFT_voidDisplay+0x50>
	}

}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <putPixel>:
#define COLOR_RED   0xF800
#define COLOR_YELLOW 0xFFE0

/* Drawing helpers using GlobalFrameBuffer */
static inline void putPixel(int x, int y, u16 color)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	4613      	mov	r3, r2
 8002298:	80fb      	strh	r3, [r7, #6]
    if (x < 0 || x >= TFT_W || y < 0 || y >= TFT_H) return;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	db11      	blt.n	80022c4 <putPixel+0x38>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80022a4:	dc0e      	bgt.n	80022c4 <putPixel+0x38>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0b      	blt.n	80022c4 <putPixel+0x38>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b9f      	cmp	r3, #159	@ 0x9f
 80022b0:	dc08      	bgt.n	80022c4 <putPixel+0x38>
    GlobalFrameBuffer[y * TFT_W + x] = color;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	01da      	lsls	r2, r3, #7
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4413      	add	r3, r2
 80022ba:	4905      	ldr	r1, [pc, #20]	@ (80022d0 <putPixel+0x44>)
 80022bc:	88fa      	ldrh	r2, [r7, #6]
 80022be:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80022c2:	e000      	b.n	80022c6 <putPixel+0x3a>
    if (x < 0 || x >= TFT_W || y < 0 || y >= TFT_H) return;
 80022c4:	bf00      	nop
}
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	20000080 	.word	0x20000080

080022d4 <fillRect>:

static void fillRect(int x, int y, int w, int h, u16 color)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
    if (x < 0) x = 0;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	da01      	bge.n	80022ec <fillRect+0x18>
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
    if (y < 0) y = 0;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da01      	bge.n	80022f6 <fillRect+0x22>
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
    int x2 = x + w;
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	61fb      	str	r3, [r7, #28]
    int y2 = y + h;
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4413      	add	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
    if (x2 > TFT_W) x2 = TFT_W;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2b80      	cmp	r3, #128	@ 0x80
 800230a:	dd01      	ble.n	8002310 <fillRect+0x3c>
 800230c:	2380      	movs	r3, #128	@ 0x80
 800230e:	61fb      	str	r3, [r7, #28]
    if (y2 > TFT_H) y2 = TFT_H;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2ba0      	cmp	r3, #160	@ 0xa0
 8002314:	dd01      	ble.n	800231a <fillRect+0x46>
 8002316:	23a0      	movs	r3, #160	@ 0xa0
 8002318:	61bb      	str	r3, [r7, #24]
    for (int yy = y; yy < y2; ++yy)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e012      	b.n	8002346 <fillRect+0x72>
        for (int xx = x; xx < x2; ++xx)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	e008      	b.n	8002338 <fillRect+0x64>
            putPixel(xx, yy, color);
 8002326:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002328:	461a      	mov	r2, r3
 800232a:	6979      	ldr	r1, [r7, #20]
 800232c:	6938      	ldr	r0, [r7, #16]
 800232e:	f7ff ffad 	bl	800228c <putPixel>
        for (int xx = x; xx < x2; ++xx)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	3301      	adds	r3, #1
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	429a      	cmp	r2, r3
 800233e:	dbf2      	blt.n	8002326 <fillRect+0x52>
    for (int yy = y; yy < y2; ++yy)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3301      	adds	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	429a      	cmp	r2, r3
 800234c:	dbe8      	blt.n	8002320 <fillRect+0x4c>
}
 800234e:	bf00      	nop
 8002350:	bf00      	nop
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <drawChar>:

static void drawChar(int x, int y, char c, u16 color)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	460b      	mov	r3, r1
 8002368:	71fb      	strb	r3, [r7, #7]
 800236a:	4613      	mov	r3, r2
 800236c:	80bb      	strh	r3, [r7, #4]
    if (c < 32 || c > 127) return;
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	2b1f      	cmp	r3, #31
 8002372:	d936      	bls.n	80023e2 <drawChar+0x8a>
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db32      	blt.n	80023e2 <drawChar+0x8a>
    const u8 *ch = font5x7[c - 32];
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	f1a3 0220 	sub.w	r2, r3, #32
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	4a18      	ldr	r2, [pc, #96]	@ (80023ec <drawChar+0x94>)
 800238a:	4413      	add	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
    for (u8 col = 0; col < 5; col++) {
 800238e:	2300      	movs	r3, #0
 8002390:	77fb      	strb	r3, [r7, #31]
 8002392:	e022      	b.n	80023da <drawChar+0x82>
        u8 colbits = ch[col];
 8002394:	7ffb      	ldrb	r3, [r7, #31]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4413      	add	r3, r2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	75fb      	strb	r3, [r7, #23]
        for (u8 row = 0; row < 8; row++) {
 800239e:	2300      	movs	r3, #0
 80023a0:	77bb      	strb	r3, [r7, #30]
 80023a2:	e014      	b.n	80023ce <drawChar+0x76>
            if (colbits & (1 << row)) putPixel(x + col, y + row, color);
 80023a4:	7dfa      	ldrb	r2, [r7, #23]
 80023a6:	7fbb      	ldrb	r3, [r7, #30]
 80023a8:	fa42 f303 	asr.w	r3, r2, r3
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <drawChar+0x70>
 80023b4:	7ffa      	ldrb	r2, [r7, #31]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	18d0      	adds	r0, r2, r3
 80023ba:	7fba      	ldrb	r2, [r7, #30]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4413      	add	r3, r2
 80023c0:	88ba      	ldrh	r2, [r7, #4]
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7ff ff62 	bl	800228c <putPixel>
        for (u8 row = 0; row < 8; row++) {
 80023c8:	7fbb      	ldrb	r3, [r7, #30]
 80023ca:	3301      	adds	r3, #1
 80023cc:	77bb      	strb	r3, [r7, #30]
 80023ce:	7fbb      	ldrb	r3, [r7, #30]
 80023d0:	2b07      	cmp	r3, #7
 80023d2:	d9e7      	bls.n	80023a4 <drawChar+0x4c>
    for (u8 col = 0; col < 5; col++) {
 80023d4:	7ffb      	ldrb	r3, [r7, #31]
 80023d6:	3301      	adds	r3, #1
 80023d8:	77fb      	strb	r3, [r7, #31]
 80023da:	7ffb      	ldrb	r3, [r7, #31]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d9d9      	bls.n	8002394 <drawChar+0x3c>
 80023e0:	e000      	b.n	80023e4 <drawChar+0x8c>
    if (c < 32 || c > 127) return;
 80023e2:	bf00      	nop
        }
    }
}
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	08005af0 	.word	0x08005af0

080023f0 <drawString>:

static void drawString(int x, int y, const char *s, u16 color)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	807b      	strh	r3, [r7, #2]
    int cx = x;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	617b      	str	r3, [r7, #20]
    while (*s) {
 8002402:	e00b      	b.n	800241c <drawString+0x2c>
        drawChar(cx, y, *s++, color);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	6978      	ldr	r0, [r7, #20]
 8002412:	f7ff ffa1 	bl	8002358 <drawChar>
        cx += 8;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3308      	adds	r3, #8
 800241a:	617b      	str	r3, [r7, #20]
    while (*s) {
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1ef      	bne.n	8002404 <drawString+0x14>
    }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HXO_btnXCallback>:

/* Interrupt callback functions */
void HXO_btnXCallback(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
    btnXPressed = 1;
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HXO_btnXCallback+0x14>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	2000a0d9 	.word	0x2000a0d9

08002448 <HXO_btnOCallback>:

void HXO_btnOCallback(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
    btnOPressed = 1;
 800244c:	4b03      	ldr	r3, [pc, #12]	@ (800245c <HXO_btnOCallback+0x14>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	2000a0da 	.word	0x2000a0da

08002460 <HXO_btnNextCallback>:

void HXO_btnNextCallback(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
    btnNextPressed = 1;
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <HXO_btnNextCallback+0x14>)
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	2000a0db 	.word	0x2000a0db

08002478 <resetGame>:

/* Game logic functions */
static void resetGame(void)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	e015      	b.n	80024b0 <resetGame+0x38>
        for (int j = 0; j < 3; j++) {
 8002484:	2300      	movs	r3, #0
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	e00c      	b.n	80024a4 <resetGame+0x2c>
            board[i][j] = CELL_EMPTY;
 800248a:	4914      	ldr	r1, [pc, #80]	@ (80024dc <resetGame+0x64>)
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	18ca      	adds	r2, r1, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	4413      	add	r3, r2
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	ddef      	ble.n	800248a <resetGame+0x12>
    for (int i = 0; i < 3; i++) {
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3301      	adds	r3, #1
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	dde6      	ble.n	8002484 <resetGame+0xc>
        }
    }
    currentPlayer = PLAYER_X;
 80024b6:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <resetGame+0x68>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
    gameState = GAME_PLAYING;
 80024bc:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <resetGame+0x6c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
    cursorRow = 0;
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <resetGame+0x70>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
    cursorCol = 0;
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <resetGame+0x74>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	2000a0cc 	.word	0x2000a0cc
 80024e0:	2000a0d5 	.word	0x2000a0d5
 80024e4:	2000a0d6 	.word	0x2000a0d6
 80024e8:	2000a0d7 	.word	0x2000a0d7
 80024ec:	2000a0d8 	.word	0x2000a0d8

080024f0 <checkWinner>:

static GameState_t checkWinner(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
    /* Check rows */
    for (int i = 0; i < 3; i++) {
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e03b      	b.n	8002574 <checkWinner+0x84>
        if (board[i][0] != CELL_EMPTY &&
 80024fc:	4966      	ldr	r1, [pc, #408]	@ (8002698 <checkWinner+0x1a8>)
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4613      	mov	r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4413      	add	r3, r2
 8002506:	440b      	add	r3, r1
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d02f      	beq.n	800256e <checkWinner+0x7e>
            board[i][0] == board[i][1] &&
 800250e:	4962      	ldr	r1, [pc, #392]	@ (8002698 <checkWinner+0x1a8>)
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	440b      	add	r3, r1
 800251a:	7819      	ldrb	r1, [r3, #0]
 800251c:	485e      	ldr	r0, [pc, #376]	@ (8002698 <checkWinner+0x1a8>)
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	4403      	add	r3, r0
 8002528:	3301      	adds	r3, #1
 800252a:	781b      	ldrb	r3, [r3, #0]
        if (board[i][0] != CELL_EMPTY &&
 800252c:	4299      	cmp	r1, r3
 800252e:	d11e      	bne.n	800256e <checkWinner+0x7e>
            board[i][1] == board[i][2]) {
 8002530:	4959      	ldr	r1, [pc, #356]	@ (8002698 <checkWinner+0x1a8>)
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	440b      	add	r3, r1
 800253c:	3301      	adds	r3, #1
 800253e:	7819      	ldrb	r1, [r3, #0]
 8002540:	4855      	ldr	r0, [pc, #340]	@ (8002698 <checkWinner+0x1a8>)
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	4403      	add	r3, r0
 800254c:	3302      	adds	r3, #2
 800254e:	781b      	ldrb	r3, [r3, #0]
            board[i][0] == board[i][1] &&
 8002550:	4299      	cmp	r1, r3
 8002552:	d10c      	bne.n	800256e <checkWinner+0x7e>
            return (board[i][0] == CELL_X) ? GAME_X_WINS : GAME_O_WINS;
 8002554:	4950      	ldr	r1, [pc, #320]	@ (8002698 <checkWinner+0x1a8>)
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	440b      	add	r3, r1
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <checkWinner+0x7a>
 8002566:	2301      	movs	r3, #1
 8002568:	e08f      	b.n	800268a <checkWinner+0x19a>
 800256a:	2302      	movs	r3, #2
 800256c:	e08d      	b.n	800268a <checkWinner+0x19a>
    for (int i = 0; i < 3; i++) {
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3301      	adds	r3, #1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b02      	cmp	r3, #2
 8002578:	ddc0      	ble.n	80024fc <checkWinner+0xc>
        }
    }

    /* Check columns */
    for (int j = 0; j < 3; j++) {
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	e029      	b.n	80025d4 <checkWinner+0xe4>
        if (board[0][j] != CELL_EMPTY &&
 8002580:	4a45      	ldr	r2, [pc, #276]	@ (8002698 <checkWinner+0x1a8>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <checkWinner+0xde>
            board[0][j] == board[1][j] &&
 800258c:	4a42      	ldr	r2, [pc, #264]	@ (8002698 <checkWinner+0x1a8>)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	4940      	ldr	r1, [pc, #256]	@ (8002698 <checkWinner+0x1a8>)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	440b      	add	r3, r1
 800259a:	3303      	adds	r3, #3
 800259c:	781b      	ldrb	r3, [r3, #0]
        if (board[0][j] != CELL_EMPTY &&
 800259e:	429a      	cmp	r2, r3
 80025a0:	d115      	bne.n	80025ce <checkWinner+0xde>
            board[1][j] == board[2][j]) {
 80025a2:	4a3d      	ldr	r2, [pc, #244]	@ (8002698 <checkWinner+0x1a8>)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	3303      	adds	r3, #3
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	493a      	ldr	r1, [pc, #232]	@ (8002698 <checkWinner+0x1a8>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	440b      	add	r3, r1
 80025b2:	3306      	adds	r3, #6
 80025b4:	781b      	ldrb	r3, [r3, #0]
            board[0][j] == board[1][j] &&
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d109      	bne.n	80025ce <checkWinner+0xde>
            return (board[0][j] == CELL_X) ? GAME_X_WINS : GAME_O_WINS;
 80025ba:	4a37      	ldr	r2, [pc, #220]	@ (8002698 <checkWinner+0x1a8>)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4413      	add	r3, r2
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <checkWinner+0xda>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e05f      	b.n	800268a <checkWinner+0x19a>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e05d      	b.n	800268a <checkWinner+0x19a>
    for (int j = 0; j < 3; j++) {
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	3301      	adds	r3, #1
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	ddd2      	ble.n	8002580 <checkWinner+0x90>
        }
    }

    /* Check diagonals */
    if (board[0][0] != CELL_EMPTY &&
 80025da:	4b2f      	ldr	r3, [pc, #188]	@ (8002698 <checkWinner+0x1a8>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d013      	beq.n	800260a <checkWinner+0x11a>
        board[0][0] == board[1][1] &&
 80025e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002698 <checkWinner+0x1a8>)
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002698 <checkWinner+0x1a8>)
 80025e8:	791b      	ldrb	r3, [r3, #4]
    if (board[0][0] != CELL_EMPTY &&
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d10d      	bne.n	800260a <checkWinner+0x11a>
        board[1][1] == board[2][2]) {
 80025ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002698 <checkWinner+0x1a8>)
 80025f0:	791a      	ldrb	r2, [r3, #4]
 80025f2:	4b29      	ldr	r3, [pc, #164]	@ (8002698 <checkWinner+0x1a8>)
 80025f4:	7a1b      	ldrb	r3, [r3, #8]
        board[0][0] == board[1][1] &&
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d107      	bne.n	800260a <checkWinner+0x11a>
        return (board[0][0] == CELL_X) ? GAME_X_WINS : GAME_O_WINS;
 80025fa:	4b27      	ldr	r3, [pc, #156]	@ (8002698 <checkWinner+0x1a8>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <checkWinner+0x116>
 8002602:	2301      	movs	r3, #1
 8002604:	e041      	b.n	800268a <checkWinner+0x19a>
 8002606:	2302      	movs	r3, #2
 8002608:	e03f      	b.n	800268a <checkWinner+0x19a>
    }

    if (board[0][2] != CELL_EMPTY &&
 800260a:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <checkWinner+0x1a8>)
 800260c:	789b      	ldrb	r3, [r3, #2]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d013      	beq.n	800263a <checkWinner+0x14a>
        board[0][2] == board[1][1] &&
 8002612:	4b21      	ldr	r3, [pc, #132]	@ (8002698 <checkWinner+0x1a8>)
 8002614:	789a      	ldrb	r2, [r3, #2]
 8002616:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <checkWinner+0x1a8>)
 8002618:	791b      	ldrb	r3, [r3, #4]
    if (board[0][2] != CELL_EMPTY &&
 800261a:	429a      	cmp	r2, r3
 800261c:	d10d      	bne.n	800263a <checkWinner+0x14a>
        board[1][1] == board[2][0]) {
 800261e:	4b1e      	ldr	r3, [pc, #120]	@ (8002698 <checkWinner+0x1a8>)
 8002620:	791a      	ldrb	r2, [r3, #4]
 8002622:	4b1d      	ldr	r3, [pc, #116]	@ (8002698 <checkWinner+0x1a8>)
 8002624:	799b      	ldrb	r3, [r3, #6]
        board[0][2] == board[1][1] &&
 8002626:	429a      	cmp	r2, r3
 8002628:	d107      	bne.n	800263a <checkWinner+0x14a>
        return (board[0][2] == CELL_X) ? GAME_X_WINS : GAME_O_WINS;
 800262a:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <checkWinner+0x1a8>)
 800262c:	789b      	ldrb	r3, [r3, #2]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <checkWinner+0x146>
 8002632:	2301      	movs	r3, #1
 8002634:	e029      	b.n	800268a <checkWinner+0x19a>
 8002636:	2302      	movs	r3, #2
 8002638:	e027      	b.n	800268a <checkWinner+0x19a>
    }

    /* Check for draw */
    u8 emptyCells = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 3; i++) {
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	e019      	b.n	8002678 <checkWinner+0x188>
        for (int j = 0; j < 3; j++) {
 8002644:	2300      	movs	r3, #0
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	e010      	b.n	800266c <checkWinner+0x17c>
            if (board[i][j] == CELL_EMPTY) emptyCells++;
 800264a:	4913      	ldr	r1, [pc, #76]	@ (8002698 <checkWinner+0x1a8>)
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	18ca      	adds	r2, r1, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <checkWinner+0x176>
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	3301      	adds	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
        for (int j = 0; j < 3; j++) {
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3301      	adds	r3, #1
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	ddeb      	ble.n	800264a <checkWinner+0x15a>
    for (int i = 0; i < 3; i++) {
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	3301      	adds	r3, #1
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b02      	cmp	r3, #2
 800267c:	dde2      	ble.n	8002644 <checkWinner+0x154>
        }
    }

    if (emptyCells == 0) return GAME_DRAW;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <checkWinner+0x198>
 8002684:	2303      	movs	r3, #3
 8002686:	e000      	b.n	800268a <checkWinner+0x19a>

    return GAME_PLAYING;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	2000a0cc 	.word	0x2000a0cc

0800269c <makeMove>:

static void makeMove(Player_t player)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
    if (gameState != GAME_PLAYING) return;
 80026a6:	4b21      	ldr	r3, [pc, #132]	@ (800272c <makeMove+0x90>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d137      	bne.n	800271e <makeMove+0x82>
    if (board[cursorRow][cursorCol] != CELL_EMPTY) return;
 80026ae:	4b20      	ldr	r3, [pc, #128]	@ (8002730 <makeMove+0x94>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	4619      	mov	r1, r3
 80026b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <makeMove+0x98>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002738 <makeMove+0x9c>)
 80026bc:	460b      	mov	r3, r1
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	440b      	add	r3, r1
 80026c2:	4413      	add	r3, r2
 80026c4:	4403      	add	r3, r0
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d12a      	bne.n	8002722 <makeMove+0x86>

    board[cursorRow][cursorCol] = (player == PLAYER_X) ? CELL_X : CELL_O;
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <makeMove+0x3a>
 80026d2:	2001      	movs	r0, #1
 80026d4:	e000      	b.n	80026d8 <makeMove+0x3c>
 80026d6:	2002      	movs	r0, #2
 80026d8:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <makeMove+0x94>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <makeMove+0x98>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461c      	mov	r4, r3
 80026e4:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <makeMove+0x9c>)
 80026e6:	460b      	mov	r3, r1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	440b      	add	r3, r1
 80026ec:	4413      	add	r3, r2
 80026ee:	4423      	add	r3, r4
 80026f0:	4602      	mov	r2, r0
 80026f2:	701a      	strb	r2, [r3, #0]
    gameState = checkWinner();
 80026f4:	f7ff fefc 	bl	80024f0 <checkWinner>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <makeMove+0x90>)
 80026fe:	701a      	strb	r2, [r3, #0]

    if (gameState == GAME_PLAYING) {
 8002700:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <makeMove+0x90>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10d      	bne.n	8002724 <makeMove+0x88>
        currentPlayer = (currentPlayer == PLAYER_X) ? PLAYER_O : PLAYER_X;
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <makeMove+0xa0>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	4b08      	ldr	r3, [pc, #32]	@ (800273c <makeMove+0xa0>)
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e002      	b.n	8002724 <makeMove+0x88>
    if (gameState != GAME_PLAYING) return;
 800271e:	bf00      	nop
 8002720:	e000      	b.n	8002724 <makeMove+0x88>
    if (board[cursorRow][cursorCol] != CELL_EMPTY) return;
 8002722:	bf00      	nop
    }
}
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}
 800272a:	bf00      	nop
 800272c:	2000a0d6 	.word	0x2000a0d6
 8002730:	2000a0d7 	.word	0x2000a0d7
 8002734:	2000a0d8 	.word	0x2000a0d8
 8002738:	2000a0cc 	.word	0x2000a0cc
 800273c:	2000a0d5 	.word	0x2000a0d5

08002740 <drawBoard>:

static void drawBoard(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b098      	sub	sp, #96	@ 0x60
 8002744:	af02      	add	r7, sp, #8
    /* Clear screen */
    fillRect(0, 0, TFT_W, TFT_H, COLOR_BLACK);
 8002746:	2300      	movs	r3, #0
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	23a0      	movs	r3, #160	@ 0xa0
 800274c:	2280      	movs	r2, #128	@ 0x80
 800274e:	2100      	movs	r1, #0
 8002750:	2000      	movs	r0, #0
 8002752:	f7ff fdbf 	bl	80022d4 <fillRect>

    /* Draw title */
    drawString(45, 5, "TIC-TAC-TOE", COLOR_WHITE);
 8002756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800275a:	4aa4      	ldr	r2, [pc, #656]	@ (80029ec <drawBoard+0x2ac>)
 800275c:	2105      	movs	r1, #5
 800275e:	202d      	movs	r0, #45	@ 0x2d
 8002760:	f7ff fe46 	bl	80023f0 <drawString>

    /* Board area starts at y=25 */
    int boardStartY = 25;
 8002764:	2319      	movs	r3, #25
 8002766:	643b      	str	r3, [r7, #64]	@ 0x40
    int cellSize = 35;
 8002768:	2323      	movs	r3, #35	@ 0x23
 800276a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int boardSize = cellSize * 3;
 800276c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	63bb      	str	r3, [r7, #56]	@ 0x38
    int boardStartX = (TFT_W - boardSize) / 2;
 8002776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002778:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800277c:	0fda      	lsrs	r2, r3, #31
 800277e:	4413      	add	r3, r2
 8002780:	105b      	asrs	r3, r3, #1
 8002782:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Draw grid lines */
    for (int i = 0; i <= 3; i++) {
 8002784:	2300      	movs	r3, #0
 8002786:	657b      	str	r3, [r7, #84]	@ 0x54
 8002788:	e034      	b.n	80027f4 <drawBoard+0xb4>
        /* Vertical lines */
        int x = boardStartX + i * cellSize;
 800278a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800278c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002794:	4413      	add	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        for (int y = boardStartY; y < boardStartY + boardSize; y++) {
 8002798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800279a:	653b      	str	r3, [r7, #80]	@ 0x50
 800279c:	e008      	b.n	80027b0 <drawBoard+0x70>
            putPixel(x, y, COLOR_WHITE);
 800279e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80027a4:	69b8      	ldr	r0, [r7, #24]
 80027a6:	f7ff fd71 	bl	800228c <putPixel>
        for (int y = boardStartY; y < boardStartY + boardSize; y++) {
 80027aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ac:	3301      	adds	r3, #1
 80027ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80027b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b4:	4413      	add	r3, r2
 80027b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80027b8:	429a      	cmp	r2, r3
 80027ba:	dbf0      	blt.n	800279e <drawBoard+0x5e>
        }
        /* Horizontal lines */
        int y = boardStartY + i * cellSize;
 80027bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027c6:	4413      	add	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]
        for (int x2 = boardStartX; x2 < boardStartX + boardSize; x2++) {
 80027ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027ce:	e008      	b.n	80027e2 <drawBoard+0xa2>
            putPixel(x2, y, COLOR_WHITE);
 80027d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027d4:	6979      	ldr	r1, [r7, #20]
 80027d6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80027d8:	f7ff fd58 	bl	800228c <putPixel>
        for (int x2 = boardStartX; x2 < boardStartX + boardSize; x2++) {
 80027dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027de:	3301      	adds	r3, #1
 80027e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e6:	4413      	add	r3, r2
 80027e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027ea:	429a      	cmp	r2, r3
 80027ec:	dbf0      	blt.n	80027d0 <drawBoard+0x90>
    for (int i = 0; i <= 3; i++) {
 80027ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f0:	3301      	adds	r3, #1
 80027f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80027f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	ddc7      	ble.n	800278a <drawBoard+0x4a>
        }
    }

    /* Draw X's and O's */
    for (int i = 0; i < 3; i++) {
 80027fa:	2300      	movs	r3, #0
 80027fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027fe:	e049      	b.n	8002894 <drawBoard+0x154>
        for (int j = 0; j < 3; j++) {
 8002800:	2300      	movs	r3, #0
 8002802:	647b      	str	r3, [r7, #68]	@ 0x44
 8002804:	e040      	b.n	8002888 <drawBoard+0x148>
            int cellX = boardStartX + j * cellSize + cellSize/2 - 4;
 8002806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002808:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800280a:	fb03 f202 	mul.w	r2, r3, r2
 800280e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002810:	441a      	add	r2, r3
 8002812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002814:	0fd9      	lsrs	r1, r3, #31
 8002816:	440b      	add	r3, r1
 8002818:	105b      	asrs	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	3b04      	subs	r3, #4
 800281e:	623b      	str	r3, [r7, #32]
            int cellY = boardStartY + i * cellSize + cellSize/2 - 4;
 8002820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002822:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002824:	fb03 f202 	mul.w	r2, r3, r2
 8002828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800282a:	441a      	add	r2, r3
 800282c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800282e:	0fd9      	lsrs	r1, r3, #31
 8002830:	440b      	add	r3, r1
 8002832:	105b      	asrs	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	3b04      	subs	r3, #4
 8002838:	61fb      	str	r3, [r7, #28]

            if (board[i][j] == CELL_X) {
 800283a:	496d      	ldr	r1, [pc, #436]	@ (80029f0 <drawBoard+0x2b0>)
 800283c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	18ca      	adds	r2, r1, r3
 8002846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d107      	bne.n	8002860 <drawBoard+0x120>
                drawString(cellX, cellY, "X", COLOR_RED);
 8002850:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002854:	4a67      	ldr	r2, [pc, #412]	@ (80029f4 <drawBoard+0x2b4>)
 8002856:	69f9      	ldr	r1, [r7, #28]
 8002858:	6a38      	ldr	r0, [r7, #32]
 800285a:	f7ff fdc9 	bl	80023f0 <drawString>
 800285e:	e010      	b.n	8002882 <drawBoard+0x142>
            } else if (board[i][j] == CELL_O) {
 8002860:	4963      	ldr	r1, [pc, #396]	@ (80029f0 <drawBoard+0x2b0>)
 8002862:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	18ca      	adds	r2, r1, r3
 800286c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800286e:	4413      	add	r3, r2
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d105      	bne.n	8002882 <drawBoard+0x142>
                drawString(cellX, cellY, "O", COLOR_BLUE);
 8002876:	231f      	movs	r3, #31
 8002878:	4a5f      	ldr	r2, [pc, #380]	@ (80029f8 <drawBoard+0x2b8>)
 800287a:	69f9      	ldr	r1, [r7, #28]
 800287c:	6a38      	ldr	r0, [r7, #32]
 800287e:	f7ff fdb7 	bl	80023f0 <drawString>
        for (int j = 0; j < 3; j++) {
 8002882:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002884:	3301      	adds	r3, #1
 8002886:	647b      	str	r3, [r7, #68]	@ 0x44
 8002888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800288a:	2b02      	cmp	r3, #2
 800288c:	ddbb      	ble.n	8002806 <drawBoard+0xc6>
    for (int i = 0; i < 3; i++) {
 800288e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002890:	3301      	adds	r3, #1
 8002892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002896:	2b02      	cmp	r3, #2
 8002898:	ddb2      	ble.n	8002800 <drawBoard+0xc0>
            }
        }
    }

    /* Draw cursor */
    if (gameState == GAME_PLAYING) {
 800289a:	4b58      	ldr	r3, [pc, #352]	@ (80029fc <drawBoard+0x2bc>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d168      	bne.n	8002974 <drawBoard+0x234>
        int cursorX = boardStartX + cursorCol * cellSize + 2;
 80028a2:	4b57      	ldr	r3, [pc, #348]	@ (8002a00 <drawBoard+0x2c0>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028aa:	fb03 f202 	mul.w	r2, r3, r2
 80028ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b0:	4413      	add	r3, r2
 80028b2:	3302      	adds	r3, #2
 80028b4:	633b      	str	r3, [r7, #48]	@ 0x30
        int cursorY = boardStartY + cursorRow * cellSize + 2;
 80028b6:	4b53      	ldr	r3, [pc, #332]	@ (8002a04 <drawBoard+0x2c4>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028be:	fb03 f202 	mul.w	r2, r3, r2
 80028c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c4:	4413      	add	r3, r2
 80028c6:	3302      	adds	r3, #2
 80028c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        fillRect(cursorX, cursorY, cellSize - 4, cellSize - 4, COLOR_YELLOW);
 80028ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028cc:	1f1a      	subs	r2, r3, #4
 80028ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d0:	3b04      	subs	r3, #4
 80028d2:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 80028d6:	9100      	str	r1, [sp, #0]
 80028d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028dc:	f7ff fcfa 	bl	80022d4 <fillRect>

        /* Redraw cell content over cursor if exists */
        int cellX = boardStartX + cursorCol * cellSize + cellSize/2 - 4;
 80028e0:	4b47      	ldr	r3, [pc, #284]	@ (8002a00 <drawBoard+0x2c0>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e8:	fb03 f202 	mul.w	r2, r3, r2
 80028ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ee:	441a      	add	r2, r3
 80028f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f2:	0fd9      	lsrs	r1, r3, #31
 80028f4:	440b      	add	r3, r1
 80028f6:	105b      	asrs	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	3b04      	subs	r3, #4
 80028fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        int cellY = boardStartY + cursorRow * cellSize + cellSize/2 - 4;
 80028fe:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <drawBoard+0x2c4>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002906:	fb03 f202 	mul.w	r2, r3, r2
 800290a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800290c:	441a      	add	r2, r3
 800290e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002910:	0fd9      	lsrs	r1, r3, #31
 8002912:	440b      	add	r3, r1
 8002914:	105b      	asrs	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	3b04      	subs	r3, #4
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24

        if (board[cursorRow][cursorCol] == CELL_X) {
 800291c:	4b39      	ldr	r3, [pc, #228]	@ (8002a04 <drawBoard+0x2c4>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	4b37      	ldr	r3, [pc, #220]	@ (8002a00 <drawBoard+0x2c0>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	4a31      	ldr	r2, [pc, #196]	@ (80029f0 <drawBoard+0x2b0>)
 800292a:	460b      	mov	r3, r1
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	440b      	add	r3, r1
 8002930:	4413      	add	r3, r2
 8002932:	4403      	add	r3, r0
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d107      	bne.n	800294a <drawBoard+0x20a>
            drawString(cellX, cellY, "X", COLOR_RED);
 800293a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800293e:	4a2d      	ldr	r2, [pc, #180]	@ (80029f4 <drawBoard+0x2b4>)
 8002940:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002944:	f7ff fd54 	bl	80023f0 <drawString>
 8002948:	e014      	b.n	8002974 <drawBoard+0x234>
        } else if (board[cursorRow][cursorCol] == CELL_O) {
 800294a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a04 <drawBoard+0x2c4>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	4619      	mov	r1, r3
 8002950:	4b2b      	ldr	r3, [pc, #172]	@ (8002a00 <drawBoard+0x2c0>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	4a26      	ldr	r2, [pc, #152]	@ (80029f0 <drawBoard+0x2b0>)
 8002958:	460b      	mov	r3, r1
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	440b      	add	r3, r1
 800295e:	4413      	add	r3, r2
 8002960:	4403      	add	r3, r0
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d105      	bne.n	8002974 <drawBoard+0x234>
            drawString(cellX, cellY, "O", COLOR_BLUE);
 8002968:	231f      	movs	r3, #31
 800296a:	4a23      	ldr	r2, [pc, #140]	@ (80029f8 <drawBoard+0x2b8>)
 800296c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800296e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002970:	f7ff fd3e 	bl	80023f0 <drawString>
        }
    }

    /* Draw current player indicator */
    if (gameState == GAME_PLAYING) {
 8002974:	4b21      	ldr	r3, [pc, #132]	@ (80029fc <drawBoard+0x2bc>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d111      	bne.n	80029a0 <drawBoard+0x260>
        char playerStr[20];
        if (currentPlayer == PLAYER_X) {
 800297c:	4b22      	ldr	r3, [pc, #136]	@ (8002a08 <drawBoard+0x2c8>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <drawBoard+0x254>
            drawString(10, 130, "Player X Turn", COLOR_RED);
 8002984:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002988:	4a20      	ldr	r2, [pc, #128]	@ (8002a0c <drawBoard+0x2cc>)
 800298a:	2182      	movs	r1, #130	@ 0x82
 800298c:	200a      	movs	r0, #10
 800298e:	f7ff fd2f 	bl	80023f0 <drawString>
 8002992:	e005      	b.n	80029a0 <drawBoard+0x260>
        } else {
            drawString(10, 130, "Player O Turn", COLOR_BLUE);
 8002994:	231f      	movs	r3, #31
 8002996:	4a1e      	ldr	r2, [pc, #120]	@ (8002a10 <drawBoard+0x2d0>)
 8002998:	2182      	movs	r1, #130	@ 0x82
 800299a:	200a      	movs	r0, #10
 800299c:	f7ff fd28 	bl	80023f0 <drawString>
        }
    }

    /* Draw game over message */
    if (gameState != GAME_PLAYING) {
 80029a0:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <drawBoard+0x2bc>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d043      	beq.n	8002a30 <drawBoard+0x2f0>
        switch (gameState) {
 80029a8:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <drawBoard+0x2bc>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d015      	beq.n	80029dc <drawBoard+0x29c>
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	dc35      	bgt.n	8002a20 <drawBoard+0x2e0>
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d002      	beq.n	80029be <drawBoard+0x27e>
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d008      	beq.n	80029ce <drawBoard+0x28e>
                break;
            case GAME_DRAW:
                drawString(35, 130, "DRAW!", COLOR_YELLOW);
                break;
            default:
                break;
 80029bc:	e030      	b.n	8002a20 <drawBoard+0x2e0>
                drawString(30, 130, "X WINS!", COLOR_RED);
 80029be:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80029c2:	4a14      	ldr	r2, [pc, #80]	@ (8002a14 <drawBoard+0x2d4>)
 80029c4:	2182      	movs	r1, #130	@ 0x82
 80029c6:	201e      	movs	r0, #30
 80029c8:	f7ff fd12 	bl	80023f0 <drawString>
                break;
 80029cc:	e029      	b.n	8002a22 <drawBoard+0x2e2>
                drawString(30, 130, "O WINS!", COLOR_BLUE);
 80029ce:	231f      	movs	r3, #31
 80029d0:	4a11      	ldr	r2, [pc, #68]	@ (8002a18 <drawBoard+0x2d8>)
 80029d2:	2182      	movs	r1, #130	@ 0x82
 80029d4:	201e      	movs	r0, #30
 80029d6:	f7ff fd0b 	bl	80023f0 <drawString>
                break;
 80029da:	e022      	b.n	8002a22 <drawBoard+0x2e2>
                drawString(35, 130, "DRAW!", COLOR_YELLOW);
 80029dc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80029e0:	4a0e      	ldr	r2, [pc, #56]	@ (8002a1c <drawBoard+0x2dc>)
 80029e2:	2182      	movs	r1, #130	@ 0x82
 80029e4:	2023      	movs	r0, #35	@ 0x23
 80029e6:	f7ff fd03 	bl	80023f0 <drawString>
                break;
 80029ea:	e01a      	b.n	8002a22 <drawBoard+0x2e2>
 80029ec:	080056a8 	.word	0x080056a8
 80029f0:	2000a0cc 	.word	0x2000a0cc
 80029f4:	080056b4 	.word	0x080056b4
 80029f8:	080056b8 	.word	0x080056b8
 80029fc:	2000a0d6 	.word	0x2000a0d6
 8002a00:	2000a0d8 	.word	0x2000a0d8
 8002a04:	2000a0d7 	.word	0x2000a0d7
 8002a08:	2000a0d5 	.word	0x2000a0d5
 8002a0c:	080056bc 	.word	0x080056bc
 8002a10:	080056cc 	.word	0x080056cc
 8002a14:	080056dc 	.word	0x080056dc
 8002a18:	080056e4 	.word	0x080056e4
 8002a1c:	080056ec 	.word	0x080056ec
                break;
 8002a20:	bf00      	nop
        }
        drawString(10, 145, "Press NEXT to restart", COLOR_WHITE);
 8002a22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a26:	4a08      	ldr	r2, [pc, #32]	@ (8002a48 <drawBoard+0x308>)
 8002a28:	2191      	movs	r1, #145	@ 0x91
 8002a2a:	200a      	movs	r0, #10
 8002a2c:	f7ff fce0 	bl	80023f0 <drawString>
    }

    /* Draw controls */
    drawString(10, 150, "X:Place O:Place NEXT:Move", COLOR_GRAY);
 8002a30:	f248 4310 	movw	r3, #33808	@ 0x8410
 8002a34:	4a05      	ldr	r2, [pc, #20]	@ (8002a4c <drawBoard+0x30c>)
 8002a36:	2196      	movs	r1, #150	@ 0x96
 8002a38:	200a      	movs	r0, #10
 8002a3a:	f7ff fcd9 	bl	80023f0 <drawString>
}
 8002a3e:	bf00      	nop
 8002a40:	3758      	adds	r7, #88	@ 0x58
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	080056f4 	.word	0x080056f4
 8002a4c:	0800570c 	.word	0x0800570c

08002a50 <HXO_voidInit>:

void HXO_voidInit(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
    /* Configure EXTI for XO game buttons */
    // X button - EXTI11
    MEXTI_voidSetInterruptPort(EXTI_Line8, EXTI_PORTA);
 8002a54:	2100      	movs	r1, #0
 8002a56:	2008      	movs	r0, #8
 8002a58:	f000 f8b6 	bl	8002bc8 <MEXTI_voidSetInterruptPort>
    MEXTI_voidSetTrigger(EXTI_Line8, EXTI_Falling);
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	2008      	movs	r0, #8
 8002a60:	f000 f904 	bl	8002c6c <MEXTI_voidSetTrigger>
    MEXTI_voidCallBack(HXO_btnXCallback, EXTI_Line8);
 8002a64:	2108      	movs	r1, #8
 8002a66:	4818      	ldr	r0, [pc, #96]	@ (8002ac8 <HXO_voidInit+0x78>)
 8002a68:	f000 f95c 	bl	8002d24 <MEXTI_voidCallBack>
    MEXTI_voidEnable(EXTI_Line8);
 8002a6c:	2008      	movs	r0, #8
 8002a6e:	f000 f8e5 	bl	8002c3c <MEXTI_voidEnable>

    // O button - EXTI12
    MEXTI_voidSetInterruptPort(EXTI_Line9, EXTI_PORTA);
 8002a72:	2100      	movs	r1, #0
 8002a74:	2009      	movs	r0, #9
 8002a76:	f000 f8a7 	bl	8002bc8 <MEXTI_voidSetInterruptPort>
    MEXTI_voidSetTrigger(EXTI_Line9, EXTI_Falling);
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	2009      	movs	r0, #9
 8002a7e:	f000 f8f5 	bl	8002c6c <MEXTI_voidSetTrigger>
    MEXTI_voidCallBack(HXO_btnOCallback, EXTI_Line9);
 8002a82:	2109      	movs	r1, #9
 8002a84:	4811      	ldr	r0, [pc, #68]	@ (8002acc <HXO_voidInit+0x7c>)
 8002a86:	f000 f94d 	bl	8002d24 <MEXTI_voidCallBack>
    MEXTI_voidEnable(EXTI_Line9);
 8002a8a:	2009      	movs	r0, #9
 8002a8c:	f000 f8d6 	bl	8002c3c <MEXTI_voidEnable>

    // NEXT button - EXTI13
    MEXTI_voidSetInterruptPort(EXTI_Line10, EXTI_PORTA);
 8002a90:	2100      	movs	r1, #0
 8002a92:	200a      	movs	r0, #10
 8002a94:	f000 f898 	bl	8002bc8 <MEXTI_voidSetInterruptPort>
    MEXTI_voidSetTrigger(EXTI_Line10, EXTI_Falling);
 8002a98:	2100      	movs	r1, #0
 8002a9a:	200a      	movs	r0, #10
 8002a9c:	f000 f8e6 	bl	8002c6c <MEXTI_voidSetTrigger>
    MEXTI_voidCallBack(HXO_btnNextCallback, EXTI_Line10);
 8002aa0:	210a      	movs	r1, #10
 8002aa2:	480b      	ldr	r0, [pc, #44]	@ (8002ad0 <HXO_voidInit+0x80>)
 8002aa4:	f000 f93e 	bl	8002d24 <MEXTI_voidCallBack>
    MEXTI_voidEnable(EXTI_Line10);
 8002aa8:	200a      	movs	r0, #10
 8002aaa:	f000 f8c7 	bl	8002c3c <MEXTI_voidEnable>

    /* Enable NVIC interrupts for EXTI lines */
    MNVIC_voidEnable(40); // EXTI15_10 (covers EXTI11, EXTI12, EXTI13)
 8002aae:	2028      	movs	r0, #40	@ 0x28
 8002ab0:	f000 fd76 	bl	80035a0 <MNVIC_voidEnable>
    MNVIC_voidEnable(23);
 8002ab4:	2017      	movs	r0, #23
 8002ab6:	f000 fd73 	bl	80035a0 <MNVIC_voidEnable>

    /* Initialize game */
    resetGame();
 8002aba:	f7ff fcdd 	bl	8002478 <resetGame>
    drawBoard();
 8002abe:	f7ff fe3f 	bl	8002740 <drawBoard>
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	08002431 	.word	0x08002431
 8002acc:	08002449 	.word	0x08002449
 8002ad0:	08002461 	.word	0x08002461

08002ad4 <HXO_voidPoll>:

void HXO_voidPoll(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
    /* Check button flags set by interrupts */
    if (btnXPressed) {
 8002ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8002b98 <HXO_voidPoll+0xc4>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00b      	beq.n	8002afa <HXO_voidPoll+0x26>
        btnXPressed = 0; // Clear flag
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <HXO_voidPoll+0xc4>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]

        if (gameState == GAME_PLAYING) {
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b9c <HXO_voidPoll+0xc8>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d104      	bne.n	8002afa <HXO_voidPoll+0x26>
            makeMove(PLAYER_X);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7ff fdd3 	bl	800269c <makeMove>
            drawBoard();
 8002af6:	f7ff fe23 	bl	8002740 <drawBoard>
        }
    }

    if (btnOPressed) {
 8002afa:	4b29      	ldr	r3, [pc, #164]	@ (8002ba0 <HXO_voidPoll+0xcc>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <HXO_voidPoll+0x48>
        btnOPressed = 0; // Clear flag
 8002b04:	4b26      	ldr	r3, [pc, #152]	@ (8002ba0 <HXO_voidPoll+0xcc>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]

        if (gameState == GAME_PLAYING) {
 8002b0a:	4b24      	ldr	r3, [pc, #144]	@ (8002b9c <HXO_voidPoll+0xc8>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d104      	bne.n	8002b1c <HXO_voidPoll+0x48>
            makeMove(PLAYER_O);
 8002b12:	2001      	movs	r0, #1
 8002b14:	f7ff fdc2 	bl	800269c <makeMove>
            drawBoard();
 8002b18:	f7ff fe12 	bl	8002740 <drawBoard>
        }
    }

    if (btnNextPressed) {
 8002b1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <HXO_voidPoll+0xd0>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d036      	beq.n	8002b94 <HXO_voidPoll+0xc0>
        btnNextPressed = 0; // Clear flag
 8002b26:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba4 <HXO_voidPoll+0xd0>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]

        if (gameState == GAME_PLAYING) {
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b9c <HXO_voidPoll+0xc8>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d12b      	bne.n	8002b8c <HXO_voidPoll+0xb8>
            /* Move cursor to next position */
            do {
                cursorCol++;
 8002b34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba8 <HXO_voidPoll+0xd4>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba8 <HXO_voidPoll+0xd4>)
 8002b3e:	701a      	strb	r2, [r3, #0]
                if (cursorCol >= 3) {
 8002b40:	4b19      	ldr	r3, [pc, #100]	@ (8002ba8 <HXO_voidPoll+0xd4>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d90f      	bls.n	8002b68 <HXO_voidPoll+0x94>
                    cursorCol = 0;
 8002b48:	4b17      	ldr	r3, [pc, #92]	@ (8002ba8 <HXO_voidPoll+0xd4>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
                    cursorRow++;
 8002b4e:	4b17      	ldr	r3, [pc, #92]	@ (8002bac <HXO_voidPoll+0xd8>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4b15      	ldr	r3, [pc, #84]	@ (8002bac <HXO_voidPoll+0xd8>)
 8002b58:	701a      	strb	r2, [r3, #0]
                    if (cursorRow >= 3) {
 8002b5a:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <HXO_voidPoll+0xd8>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d902      	bls.n	8002b68 <HXO_voidPoll+0x94>
                        cursorRow = 0;
 8002b62:	4b12      	ldr	r3, [pc, #72]	@ (8002bac <HXO_voidPoll+0xd8>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
                    }
                }
            } while (board[cursorRow][cursorCol] != CELL_EMPTY);
 8002b68:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <HXO_voidPoll+0xd8>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <HXO_voidPoll+0xd4>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	4a0e      	ldr	r2, [pc, #56]	@ (8002bb0 <HXO_voidPoll+0xdc>)
 8002b76:	460b      	mov	r3, r1
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	440b      	add	r3, r1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4403      	add	r3, r0
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1d6      	bne.n	8002b34 <HXO_voidPoll+0x60>

            drawBoard();
 8002b86:	f7ff fddb 	bl	8002740 <drawBoard>
            /* Restart game */
            resetGame();
            drawBoard();
        }
    }
}
 8002b8a:	e003      	b.n	8002b94 <HXO_voidPoll+0xc0>
            resetGame();
 8002b8c:	f7ff fc74 	bl	8002478 <resetGame>
            drawBoard();
 8002b90:	f7ff fdd6 	bl	8002740 <drawBoard>
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	2000a0d9 	.word	0x2000a0d9
 8002b9c:	2000a0d6 	.word	0x2000a0d6
 8002ba0:	2000a0da 	.word	0x2000a0da
 8002ba4:	2000a0db 	.word	0x2000a0db
 8002ba8:	2000a0d8 	.word	0x2000a0d8
 8002bac:	2000a0d7 	.word	0x2000a0d7
 8002bb0:	2000a0cc 	.word	0x2000a0cc

08002bb4 <HXO_u16GetFrameBuffer>:

const u16* HXO_u16GetFrameBuffer(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
    return GlobalFrameBuffer;
 8002bb8:	4b02      	ldr	r3, [pc, #8]	@ (8002bc4 <HXO_u16GetFrameBuffer+0x10>)
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	20000080 	.word	0x20000080

08002bc8 <MEXTI_voidSetInterruptPort>:
#include "MEXTI_Private.h"
#include "MEXTI_Config.h"

static void(*GLOBAL_PTR[16])(void)={NULL};
void MEXTI_voidSetInterruptPort(EXTI_Line_t Copy_uddtLine,EXTI_Port_t Copy_uddtPort)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	71fb      	strb	r3, [r7, #7]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	71bb      	strb	r3, [r7, #6]
	SYSCFG->EXTICR[Copy_uddtLine/SYS_DIV]&=~(SYS_MUSK<<((Copy_uddtLine%SYS_DIV)*4));
 8002bd8:	4a17      	ldr	r2, [pc, #92]	@ (8002c38 <MEXTI_voidSetInterruptPort+0x70>)
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	b2d8      	uxtb	r0, r3
 8002be0:	4603      	mov	r3, r0
 8002be2:	3302      	adds	r3, #2
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	79fa      	ldrb	r2, [r7, #7]
 8002bea:	f002 0203 	and.w	r2, r2, #3
 8002bee:	0092      	lsls	r2, r2, #2
 8002bf0:	210f      	movs	r1, #15
 8002bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf6:	43d2      	mvns	r2, r2
 8002bf8:	490f      	ldr	r1, [pc, #60]	@ (8002c38 <MEXTI_voidSetInterruptPort+0x70>)
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	1c83      	adds	r3, r0, #2
 8002bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SYSCFG->EXTICR[Copy_uddtLine/SYS_DIV]|=(Copy_uddtPort<<((Copy_uddtLine%SYS_DIV)*4));
 8002c02:	4a0d      	ldr	r2, [pc, #52]	@ (8002c38 <MEXTI_voidSetInterruptPort+0x70>)
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	b2d8      	uxtb	r0, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c12:	79b9      	ldrb	r1, [r7, #6]
 8002c14:	79fa      	ldrb	r2, [r7, #7]
 8002c16:	f002 0203 	and.w	r2, r2, #3
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	4905      	ldr	r1, [pc, #20]	@ (8002c38 <MEXTI_voidSetInterruptPort+0x70>)
 8002c22:	431a      	orrs	r2, r3
 8002c24:	1c83      	adds	r3, r0, #2
 8002c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40013800 	.word	0x40013800

08002c3c <MEXTI_voidEnable>:

void MEXTI_voidEnable(EXTI_Line_t Copy_uddtLine)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
	EXTI->IMR|=(1<<Copy_uddtLine);
 8002c46:	4b08      	ldr	r3, [pc, #32]	@ (8002c68 <MEXTI_voidEnable+0x2c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	79fa      	ldrb	r2, [r7, #7]
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c52:	4611      	mov	r1, r2
 8002c54:	4a04      	ldr	r2, [pc, #16]	@ (8002c68 <MEXTI_voidEnable+0x2c>)
 8002c56:	430b      	orrs	r3, r1
 8002c58:	6013      	str	r3, [r2, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40013c00 	.word	0x40013c00

08002c6c <MEXTI_voidSetTrigger>:
void MEXTI_voidDisable(EXTI_Line_t Copy_uddtLine)
{
	EXTI->IMR&=~(1<<Copy_uddtLine);
}
void MEXTI_voidSetTrigger(EXTI_Line_t Copy_uddtLine,EXTI_TriggerMode_t Copy_uddtMode)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	460a      	mov	r2, r1
 8002c76:	71fb      	strb	r3, [r7, #7]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uddtMode)
 8002c7c:	79bb      	ldrb	r3, [r7, #6]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d032      	beq.n	8002ce8 <MEXTI_voidSetTrigger+0x7c>
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	dc45      	bgt.n	8002d12 <MEXTI_voidSetTrigger+0xa6>
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <MEXTI_voidSetTrigger+0x24>
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d016      	beq.n	8002cbc <MEXTI_voidSetTrigger+0x50>
		case EXTI_OnChange:
		EXTI->RTSR|=(1<<Copy_uddtLine);
		EXTI->FTSR|=(1<<Copy_uddtLine);
		break;
		default:
		break;
 8002c8e:	e040      	b.n	8002d12 <MEXTI_voidSetTrigger+0xa6>
		EXTI->RTSR&=~(1<<Copy_uddtLine);
 8002c90:	4b23      	ldr	r3, [pc, #140]	@ (8002d20 <MEXTI_voidSetTrigger+0xb4>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	79fa      	ldrb	r2, [r7, #7]
 8002c96:	2101      	movs	r1, #1
 8002c98:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9c:	43d2      	mvns	r2, r2
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d20 <MEXTI_voidSetTrigger+0xb4>)
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	6093      	str	r3, [r2, #8]
		EXTI->FTSR|=(1<<Copy_uddtLine);
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d20 <MEXTI_voidSetTrigger+0xb4>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	79fa      	ldrb	r2, [r7, #7]
 8002cac:	2101      	movs	r1, #1
 8002cae:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d20 <MEXTI_voidSetTrigger+0xb4>)
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	60d3      	str	r3, [r2, #12]
		break;
 8002cba:	e02b      	b.n	8002d14 <MEXTI_voidSetTrigger+0xa8>
		EXTI->RTSR|=(1<<Copy_uddtLine);
 8002cbc:	4b18      	ldr	r3, [pc, #96]	@ (8002d20 <MEXTI_voidSetTrigger+0xb4>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	79fa      	ldrb	r2, [r7, #7]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4a15      	ldr	r2, [pc, #84]	@ (8002d20 <MEXTI_voidSetTrigger+0xb4>)
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	6093      	str	r3, [r2, #8]
		EXTI->FTSR&=~(1<<Copy_uddtLine);
 8002cd0:	4b13      	ldr	r3, [pc, #76]	@ (8002d20 <MEXTI_voidSetTrigger+0xb4>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	79fa      	ldrb	r2, [r7, #7]
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cdc:	43d2      	mvns	r2, r2
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d20 <MEXTI_voidSetTrigger+0xb4>)
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	60d3      	str	r3, [r2, #12]
		break;
 8002ce6:	e015      	b.n	8002d14 <MEXTI_voidSetTrigger+0xa8>
		EXTI->RTSR|=(1<<Copy_uddtLine);
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d20 <MEXTI_voidSetTrigger+0xb4>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	79fa      	ldrb	r2, [r7, #7]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d20 <MEXTI_voidSetTrigger+0xb4>)
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	6093      	str	r3, [r2, #8]
		EXTI->FTSR|=(1<<Copy_uddtLine);
 8002cfc:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <MEXTI_voidSetTrigger+0xb4>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	79fa      	ldrb	r2, [r7, #7]
 8002d02:	2101      	movs	r1, #1
 8002d04:	fa01 f202 	lsl.w	r2, r1, r2
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4a05      	ldr	r2, [pc, #20]	@ (8002d20 <MEXTI_voidSetTrigger+0xb4>)
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	60d3      	str	r3, [r2, #12]
		break;
 8002d10:	e000      	b.n	8002d14 <MEXTI_voidSetTrigger+0xa8>
		break;
 8002d12:	bf00      	nop
	}
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40013c00 	.word	0x40013c00

08002d24 <MEXTI_voidCallBack>:


void MEXTI_voidCallBack(void(*ptr)(void),EXTI_Line_t Copy_uddtLine)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
	if(Copy_uddtLine<16)
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	d804      	bhi.n	8002d40 <MEXTI_voidCallBack+0x1c>
	{
		GLOBAL_PTR[Copy_uddtLine]=ptr;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	4904      	ldr	r1, [pc, #16]	@ (8002d4c <MEXTI_voidCallBack+0x28>)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	2000a0dc 	.word	0x2000a0dc

08002d50 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
    // clear flag
    EXTI->PR = (1 << 0);
 8002d54:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <EXTI0_IRQHandler+0x1c>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	615a      	str	r2, [r3, #20]
    // call user callback if registered
    if (GLOBAL_PTR[0] != NULL) {
 8002d5a:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <EXTI0_IRQHandler+0x20>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <EXTI0_IRQHandler+0x18>
        GLOBAL_PTR[0]();
 8002d62:	4b03      	ldr	r3, [pc, #12]	@ (8002d70 <EXTI0_IRQHandler+0x20>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4798      	blx	r3
    }
}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40013c00 	.word	0x40013c00
 8002d70:	2000a0dc 	.word	0x2000a0dc

08002d74 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
    EXTI->PR = (1 << 1);
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <EXTI1_IRQHandler+0x1c>)
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	615a      	str	r2, [r3, #20]
    if (GLOBAL_PTR[1] != NULL) {
 8002d7e:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <EXTI1_IRQHandler+0x20>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <EXTI1_IRQHandler+0x18>
        GLOBAL_PTR[1]();
 8002d86:	4b03      	ldr	r3, [pc, #12]	@ (8002d94 <EXTI1_IRQHandler+0x20>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4798      	blx	r3
    }
}
 8002d8c:	bf00      	nop
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40013c00 	.word	0x40013c00
 8002d94:	2000a0dc 	.word	0x2000a0dc

08002d98 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
    EXTI->PR = (1 << 2);
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <EXTI2_IRQHandler+0x1c>)
 8002d9e:	2204      	movs	r2, #4
 8002da0:	615a      	str	r2, [r3, #20]
    if (GLOBAL_PTR[2] != NULL) {
 8002da2:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <EXTI2_IRQHandler+0x20>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <EXTI2_IRQHandler+0x18>
        GLOBAL_PTR[2]();
 8002daa:	4b03      	ldr	r3, [pc, #12]	@ (8002db8 <EXTI2_IRQHandler+0x20>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4798      	blx	r3
    }
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40013c00 	.word	0x40013c00
 8002db8:	2000a0dc 	.word	0x2000a0dc

08002dbc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
    EXTI->PR = (1 << 3);
 8002dc0:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <EXTI3_IRQHandler+0x1c>)
 8002dc2:	2208      	movs	r2, #8
 8002dc4:	615a      	str	r2, [r3, #20]
    if (GLOBAL_PTR[3] != NULL) {
 8002dc6:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <EXTI3_IRQHandler+0x20>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <EXTI3_IRQHandler+0x18>
        GLOBAL_PTR[3]();
 8002dce:	4b03      	ldr	r3, [pc, #12]	@ (8002ddc <EXTI3_IRQHandler+0x20>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4798      	blx	r3
    }
}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40013c00 	.word	0x40013c00
 8002ddc:	2000a0dc 	.word	0x2000a0dc

08002de0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
    EXTI->PR = (1 << 4);
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <EXTI4_IRQHandler+0x1c>)
 8002de6:	2210      	movs	r2, #16
 8002de8:	615a      	str	r2, [r3, #20]
    if (GLOBAL_PTR[4] != NULL) {
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <EXTI4_IRQHandler+0x20>)
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <EXTI4_IRQHandler+0x18>
        GLOBAL_PTR[4]();
 8002df2:	4b03      	ldr	r3, [pc, #12]	@ (8002e00 <EXTI4_IRQHandler+0x20>)
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	4798      	blx	r3
    }
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40013c00 	.word	0x40013c00
 8002e00:	2000a0dc 	.word	0x2000a0dc

08002e04 <EXTI9_5_IRQHandler>:

// Shared handler for EXTI5–EXTI9
void EXTI9_5_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
    for (u8 i = 5; i <= 9; i++) {
 8002e0a:	2305      	movs	r3, #5
 8002e0c:	71fb      	strb	r3, [r7, #7]
 8002e0e:	e01b      	b.n	8002e48 <EXTI9_5_IRQHandler+0x44>
        if (EXTI->PR & (1 << i)) {
 8002e10:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <EXTI9_5_IRQHandler+0x54>)
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	79fa      	ldrb	r2, [r7, #7]
 8002e16:	2101      	movs	r1, #1
 8002e18:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00f      	beq.n	8002e42 <EXTI9_5_IRQHandler+0x3e>
            EXTI->PR = (1 << i);   // clear flag
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2201      	movs	r2, #1
 8002e26:	409a      	lsls	r2, r3
 8002e28:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <EXTI9_5_IRQHandler+0x54>)
 8002e2a:	615a      	str	r2, [r3, #20]
            if (GLOBAL_PTR[i] != NULL) {
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e5c <EXTI9_5_IRQHandler+0x58>)
 8002e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <EXTI9_5_IRQHandler+0x3e>
                GLOBAL_PTR[i]();
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	4a08      	ldr	r2, [pc, #32]	@ (8002e5c <EXTI9_5_IRQHandler+0x58>)
 8002e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e40:	4798      	blx	r3
    for (u8 i = 5; i <= 9; i++) {
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	3301      	adds	r3, #1
 8002e46:	71fb      	strb	r3, [r7, #7]
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	2b09      	cmp	r3, #9
 8002e4c:	d9e0      	bls.n	8002e10 <EXTI9_5_IRQHandler+0xc>
            }
        }
    }
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40013c00 	.word	0x40013c00
 8002e5c:	2000a0dc 	.word	0x2000a0dc

08002e60 <EXTI15_10_IRQHandler>:

// Shared handler for EXTI10–EXTI15
void EXTI15_10_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
    for (u8 i = 10; i <= 15; i++) {
 8002e66:	230a      	movs	r3, #10
 8002e68:	71fb      	strb	r3, [r7, #7]
 8002e6a:	e01b      	b.n	8002ea4 <EXTI15_10_IRQHandler+0x44>
        if (EXTI->PR & (1 << i)) {
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <EXTI15_10_IRQHandler+0x54>)
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	79fa      	ldrb	r2, [r7, #7]
 8002e72:	2101      	movs	r1, #1
 8002e74:	fa01 f202 	lsl.w	r2, r1, r2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00f      	beq.n	8002e9e <EXTI15_10_IRQHandler+0x3e>
            EXTI->PR = (1 << i);   // clear flag
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	2201      	movs	r2, #1
 8002e82:	409a      	lsls	r2, r3
 8002e84:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <EXTI15_10_IRQHandler+0x54>)
 8002e86:	615a      	str	r2, [r3, #20]
            if (GLOBAL_PTR[i] != NULL) {
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8002eb8 <EXTI15_10_IRQHandler+0x58>)
 8002e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d004      	beq.n	8002e9e <EXTI15_10_IRQHandler+0x3e>
                GLOBAL_PTR[i]();
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	4a08      	ldr	r2, [pc, #32]	@ (8002eb8 <EXTI15_10_IRQHandler+0x58>)
 8002e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9c:	4798      	blx	r3
    for (u8 i = 10; i <= 15; i++) {
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	71fb      	strb	r3, [r7, #7]
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	2b0f      	cmp	r3, #15
 8002ea8:	d9e0      	bls.n	8002e6c <EXTI15_10_IRQHandler+0xc>
            }
        }
    }
}
 8002eaa:	bf00      	nop
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40013c00 	.word	0x40013c00
 8002eb8:	2000a0dc 	.word	0x2000a0dc

08002ebc <MGPIO_voidSetPinMode>:
#include"BIT_MATH.h"
#include"MGPIO_int.h"
#include"MGPIO_prv.h"

void MGPIO_voidSetPinMode(PORT_t Copy_uddtPort,PIN_t Copy_uddtPin,MODE_t Copy_uddtMode)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	71bb      	strb	r3, [r7, #6]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	717b      	strb	r3, [r7, #5]
    if(((Copy_uddtPort == PORTA)) && (Copy_uddtPin >= PIN13)){}
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <MGPIO_voidSetPinMode+0x1e>
 8002ed4:	79bb      	ldrb	r3, [r7, #6]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d860      	bhi.n	8002f9c <MGPIO_voidSetPinMode+0xe0>
    else if((Copy_uddtPort == PORTB) && ((Copy_uddtPin == PIN3)|| (Copy_uddtPin == PIN4) || (Copy_uddtPin == PIN5))){}
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d108      	bne.n	8002ef2 <MGPIO_voidSetPinMode+0x36>
 8002ee0:	79bb      	ldrb	r3, [r7, #6]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d057      	beq.n	8002f96 <MGPIO_voidSetPinMode+0xda>
 8002ee6:	79bb      	ldrb	r3, [r7, #6]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d054      	beq.n	8002f96 <MGPIO_voidSetPinMode+0xda>
 8002eec:	79bb      	ldrb	r3, [r7, #6]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d051      	beq.n	8002f96 <MGPIO_voidSetPinMode+0xda>
    else{
        switch (Copy_uddtPort)
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d036      	beq.n	8002f66 <MGPIO_voidSetPinMode+0xaa>
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	dc4e      	bgt.n	8002f9a <MGPIO_voidSetPinMode+0xde>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <MGPIO_voidSetPinMode+0x4a>
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d018      	beq.n	8002f36 <MGPIO_voidSetPinMode+0x7a>
        case PORTC:
            GPIOC->MODER&=~(GPIO_MASK<<(Copy_uddtPin*2));
            GPIOC->MODER|=(Copy_uddtMode<<Copy_uddtPin*2);
            break;
        default:
            break;
 8002f04:	e049      	b.n	8002f9a <MGPIO_voidSetPinMode+0xde>
            GPIOA->MODER&=~(GPIO_MASK<<(Copy_uddtPin*2));
 8002f06:	4b28      	ldr	r3, [pc, #160]	@ (8002fa8 <MGPIO_voidSetPinMode+0xec>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	79ba      	ldrb	r2, [r7, #6]
 8002f0c:	0052      	lsls	r2, r2, #1
 8002f0e:	2103      	movs	r1, #3
 8002f10:	fa01 f202 	lsl.w	r2, r1, r2
 8002f14:	43d2      	mvns	r2, r2
 8002f16:	4611      	mov	r1, r2
 8002f18:	4a23      	ldr	r2, [pc, #140]	@ (8002fa8 <MGPIO_voidSetPinMode+0xec>)
 8002f1a:	400b      	ands	r3, r1
 8002f1c:	6013      	str	r3, [r2, #0]
            GPIOA->MODER|=(Copy_uddtMode<<Copy_uddtPin*2);
 8002f1e:	4b22      	ldr	r3, [pc, #136]	@ (8002fa8 <MGPIO_voidSetPinMode+0xec>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	7979      	ldrb	r1, [r7, #5]
 8002f24:	79ba      	ldrb	r2, [r7, #6]
 8002f26:	0052      	lsls	r2, r2, #1
 8002f28:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa8 <MGPIO_voidSetPinMode+0xec>)
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6013      	str	r3, [r2, #0]
            break;
 8002f34:	e032      	b.n	8002f9c <MGPIO_voidSetPinMode+0xe0>
            GPIOB->MODER&=~(GPIO_MASK<<(Copy_uddtPin*2));
 8002f36:	4b1d      	ldr	r3, [pc, #116]	@ (8002fac <MGPIO_voidSetPinMode+0xf0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	79ba      	ldrb	r2, [r7, #6]
 8002f3c:	0052      	lsls	r2, r2, #1
 8002f3e:	2103      	movs	r1, #3
 8002f40:	fa01 f202 	lsl.w	r2, r1, r2
 8002f44:	43d2      	mvns	r2, r2
 8002f46:	4611      	mov	r1, r2
 8002f48:	4a18      	ldr	r2, [pc, #96]	@ (8002fac <MGPIO_voidSetPinMode+0xf0>)
 8002f4a:	400b      	ands	r3, r1
 8002f4c:	6013      	str	r3, [r2, #0]
            GPIOB->MODER|=(Copy_uddtMode<<Copy_uddtPin*2);
 8002f4e:	4b17      	ldr	r3, [pc, #92]	@ (8002fac <MGPIO_voidSetPinMode+0xf0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	7979      	ldrb	r1, [r7, #5]
 8002f54:	79ba      	ldrb	r2, [r7, #6]
 8002f56:	0052      	lsls	r2, r2, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4a13      	ldr	r2, [pc, #76]	@ (8002fac <MGPIO_voidSetPinMode+0xf0>)
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6013      	str	r3, [r2, #0]
            break;
 8002f64:	e01a      	b.n	8002f9c <MGPIO_voidSetPinMode+0xe0>
            GPIOC->MODER&=~(GPIO_MASK<<(Copy_uddtPin*2));
 8002f66:	4b12      	ldr	r3, [pc, #72]	@ (8002fb0 <MGPIO_voidSetPinMode+0xf4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	79ba      	ldrb	r2, [r7, #6]
 8002f6c:	0052      	lsls	r2, r2, #1
 8002f6e:	2103      	movs	r1, #3
 8002f70:	fa01 f202 	lsl.w	r2, r1, r2
 8002f74:	43d2      	mvns	r2, r2
 8002f76:	4611      	mov	r1, r2
 8002f78:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb0 <MGPIO_voidSetPinMode+0xf4>)
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	6013      	str	r3, [r2, #0]
            GPIOC->MODER|=(Copy_uddtMode<<Copy_uddtPin*2);
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <MGPIO_voidSetPinMode+0xf4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	7979      	ldrb	r1, [r7, #5]
 8002f84:	79ba      	ldrb	r2, [r7, #6]
 8002f86:	0052      	lsls	r2, r2, #1
 8002f88:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4a08      	ldr	r2, [pc, #32]	@ (8002fb0 <MGPIO_voidSetPinMode+0xf4>)
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6013      	str	r3, [r2, #0]
            break;
 8002f94:	e002      	b.n	8002f9c <MGPIO_voidSetPinMode+0xe0>
    else if((Copy_uddtPort == PORTB) && ((Copy_uddtPin == PIN3)|| (Copy_uddtPin == PIN4) || (Copy_uddtPin == PIN5))){}
 8002f96:	bf00      	nop
 8002f98:	e000      	b.n	8002f9c <MGPIO_voidSetPinMode+0xe0>
            break;
 8002f9a:	bf00      	nop
        }
    }  
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	40020800 	.word	0x40020800

08002fb4 <MGPIO_voidSetOutputConfig>:

//OUTPUT
void MGPIO_voidSetOutputConfig(PORT_t Copy_uddtPort,PIN_t Copy_uddtPin,OUT_TYPE_t Copy_uddtType,SPEED_t Copy_uddtSpeed)
{
 8002fb4:	b490      	push	{r4, r7}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4604      	mov	r4, r0
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4623      	mov	r3, r4
 8002fc4:	71fb      	strb	r3, [r7, #7]
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71bb      	strb	r3, [r7, #6]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	717b      	strb	r3, [r7, #5]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	713b      	strb	r3, [r7, #4]
    if(((Copy_uddtPort == PORTA)) && (Copy_uddtPin >= PIN13)){}
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d103      	bne.n	8002fe0 <MGPIO_voidSetOutputConfig+0x2c>
 8002fd8:	79bb      	ldrb	r3, [r7, #6]
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	f200 80a4 	bhi.w	8003128 <MGPIO_voidSetOutputConfig+0x174>
    else if((Copy_uddtPort == PORTB) && ((Copy_uddtPin == PIN3)|| (Copy_uddtPin == PIN4) || (Copy_uddtPin == PIN5))){}
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10b      	bne.n	8002ffe <MGPIO_voidSetOutputConfig+0x4a>
 8002fe6:	79bb      	ldrb	r3, [r7, #6]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	f000 809a 	beq.w	8003122 <MGPIO_voidSetOutputConfig+0x16e>
 8002fee:	79bb      	ldrb	r3, [r7, #6]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	f000 8096 	beq.w	8003122 <MGPIO_voidSetOutputConfig+0x16e>
 8002ff6:	79bb      	ldrb	r3, [r7, #6]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	f000 8092 	beq.w	8003122 <MGPIO_voidSetOutputConfig+0x16e>
    else{
        switch (Copy_uddtPort)
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d061      	beq.n	80030c8 <MGPIO_voidSetOutputConfig+0x114>
 8003004:	2b02      	cmp	r3, #2
 8003006:	f300 808e 	bgt.w	8003126 <MGPIO_voidSetOutputConfig+0x172>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <MGPIO_voidSetOutputConfig+0x60>
 800300e:	2b01      	cmp	r3, #1
 8003010:	d02d      	beq.n	800306e <MGPIO_voidSetOutputConfig+0xba>
            GPIOC->OTYPER|=(Copy_uddtType<<Copy_uddtPin);
            GPIOC->OSPEEDR&=~(GPIO_MASK<<Copy_uddtPin*2);
            GPIOC->OSPEEDR|=(Copy_uddtSpeed<<Copy_uddtPin*2);
            break;
        default:
            break;
 8003012:	e088      	b.n	8003126 <MGPIO_voidSetOutputConfig+0x172>
            GPIOA->OTYPER&=~(1<<Copy_uddtPin);                  //clear
 8003014:	4b47      	ldr	r3, [pc, #284]	@ (8003134 <MGPIO_voidSetOutputConfig+0x180>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	79ba      	ldrb	r2, [r7, #6]
 800301a:	2101      	movs	r1, #1
 800301c:	fa01 f202 	lsl.w	r2, r1, r2
 8003020:	43d2      	mvns	r2, r2
 8003022:	4611      	mov	r1, r2
 8003024:	4a43      	ldr	r2, [pc, #268]	@ (8003134 <MGPIO_voidSetOutputConfig+0x180>)
 8003026:	400b      	ands	r3, r1
 8003028:	6053      	str	r3, [r2, #4]
            GPIOA->OTYPER|=(Copy_uddtType<<Copy_uddtPin);       //set the sent value
 800302a:	4b42      	ldr	r3, [pc, #264]	@ (8003134 <MGPIO_voidSetOutputConfig+0x180>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	7979      	ldrb	r1, [r7, #5]
 8003030:	79ba      	ldrb	r2, [r7, #6]
 8003032:	fa01 f202 	lsl.w	r2, r1, r2
 8003036:	4611      	mov	r1, r2
 8003038:	4a3e      	ldr	r2, [pc, #248]	@ (8003134 <MGPIO_voidSetOutputConfig+0x180>)
 800303a:	430b      	orrs	r3, r1
 800303c:	6053      	str	r3, [r2, #4]
            GPIOA->OSPEEDR&=~(GPIO_MASK<<Copy_uddtPin*2);
 800303e:	4b3d      	ldr	r3, [pc, #244]	@ (8003134 <MGPIO_voidSetOutputConfig+0x180>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	79ba      	ldrb	r2, [r7, #6]
 8003044:	0052      	lsls	r2, r2, #1
 8003046:	2103      	movs	r1, #3
 8003048:	fa01 f202 	lsl.w	r2, r1, r2
 800304c:	43d2      	mvns	r2, r2
 800304e:	4611      	mov	r1, r2
 8003050:	4a38      	ldr	r2, [pc, #224]	@ (8003134 <MGPIO_voidSetOutputConfig+0x180>)
 8003052:	400b      	ands	r3, r1
 8003054:	6093      	str	r3, [r2, #8]
            GPIOA->OSPEEDR|=(Copy_uddtSpeed<<Copy_uddtPin*2);
 8003056:	4b37      	ldr	r3, [pc, #220]	@ (8003134 <MGPIO_voidSetOutputConfig+0x180>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	7939      	ldrb	r1, [r7, #4]
 800305c:	79ba      	ldrb	r2, [r7, #6]
 800305e:	0052      	lsls	r2, r2, #1
 8003060:	fa01 f202 	lsl.w	r2, r1, r2
 8003064:	4611      	mov	r1, r2
 8003066:	4a33      	ldr	r2, [pc, #204]	@ (8003134 <MGPIO_voidSetOutputConfig+0x180>)
 8003068:	430b      	orrs	r3, r1
 800306a:	6093      	str	r3, [r2, #8]
            break;
 800306c:	e05c      	b.n	8003128 <MGPIO_voidSetOutputConfig+0x174>
            GPIOB->OTYPER&=~(1<<Copy_uddtPin);
 800306e:	4b32      	ldr	r3, [pc, #200]	@ (8003138 <MGPIO_voidSetOutputConfig+0x184>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	79ba      	ldrb	r2, [r7, #6]
 8003074:	2101      	movs	r1, #1
 8003076:	fa01 f202 	lsl.w	r2, r1, r2
 800307a:	43d2      	mvns	r2, r2
 800307c:	4611      	mov	r1, r2
 800307e:	4a2e      	ldr	r2, [pc, #184]	@ (8003138 <MGPIO_voidSetOutputConfig+0x184>)
 8003080:	400b      	ands	r3, r1
 8003082:	6053      	str	r3, [r2, #4]
            GPIOB->OTYPER|=(Copy_uddtType<<Copy_uddtPin);
 8003084:	4b2c      	ldr	r3, [pc, #176]	@ (8003138 <MGPIO_voidSetOutputConfig+0x184>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	7979      	ldrb	r1, [r7, #5]
 800308a:	79ba      	ldrb	r2, [r7, #6]
 800308c:	fa01 f202 	lsl.w	r2, r1, r2
 8003090:	4611      	mov	r1, r2
 8003092:	4a29      	ldr	r2, [pc, #164]	@ (8003138 <MGPIO_voidSetOutputConfig+0x184>)
 8003094:	430b      	orrs	r3, r1
 8003096:	6053      	str	r3, [r2, #4]
            GPIOB->OSPEEDR&=~(GPIO_MASK<<Copy_uddtPin*2);
 8003098:	4b27      	ldr	r3, [pc, #156]	@ (8003138 <MGPIO_voidSetOutputConfig+0x184>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	79ba      	ldrb	r2, [r7, #6]
 800309e:	0052      	lsls	r2, r2, #1
 80030a0:	2103      	movs	r1, #3
 80030a2:	fa01 f202 	lsl.w	r2, r1, r2
 80030a6:	43d2      	mvns	r2, r2
 80030a8:	4611      	mov	r1, r2
 80030aa:	4a23      	ldr	r2, [pc, #140]	@ (8003138 <MGPIO_voidSetOutputConfig+0x184>)
 80030ac:	400b      	ands	r3, r1
 80030ae:	6093      	str	r3, [r2, #8]
            GPIOB->OSPEEDR|=(Copy_uddtSpeed<<Copy_uddtPin*2);
 80030b0:	4b21      	ldr	r3, [pc, #132]	@ (8003138 <MGPIO_voidSetOutputConfig+0x184>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	7939      	ldrb	r1, [r7, #4]
 80030b6:	79ba      	ldrb	r2, [r7, #6]
 80030b8:	0052      	lsls	r2, r2, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	4611      	mov	r1, r2
 80030c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003138 <MGPIO_voidSetOutputConfig+0x184>)
 80030c2:	430b      	orrs	r3, r1
 80030c4:	6093      	str	r3, [r2, #8]
            break;
 80030c6:	e02f      	b.n	8003128 <MGPIO_voidSetOutputConfig+0x174>
            GPIOC->OTYPER&=~(1<<Copy_uddtPin);
 80030c8:	4b1c      	ldr	r3, [pc, #112]	@ (800313c <MGPIO_voidSetOutputConfig+0x188>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	79ba      	ldrb	r2, [r7, #6]
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	43d2      	mvns	r2, r2
 80030d6:	4611      	mov	r1, r2
 80030d8:	4a18      	ldr	r2, [pc, #96]	@ (800313c <MGPIO_voidSetOutputConfig+0x188>)
 80030da:	400b      	ands	r3, r1
 80030dc:	6053      	str	r3, [r2, #4]
            GPIOC->OTYPER|=(Copy_uddtType<<Copy_uddtPin);
 80030de:	4b17      	ldr	r3, [pc, #92]	@ (800313c <MGPIO_voidSetOutputConfig+0x188>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	7979      	ldrb	r1, [r7, #5]
 80030e4:	79ba      	ldrb	r2, [r7, #6]
 80030e6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ea:	4611      	mov	r1, r2
 80030ec:	4a13      	ldr	r2, [pc, #76]	@ (800313c <MGPIO_voidSetOutputConfig+0x188>)
 80030ee:	430b      	orrs	r3, r1
 80030f0:	6053      	str	r3, [r2, #4]
            GPIOC->OSPEEDR&=~(GPIO_MASK<<Copy_uddtPin*2);
 80030f2:	4b12      	ldr	r3, [pc, #72]	@ (800313c <MGPIO_voidSetOutputConfig+0x188>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	79ba      	ldrb	r2, [r7, #6]
 80030f8:	0052      	lsls	r2, r2, #1
 80030fa:	2103      	movs	r1, #3
 80030fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003100:	43d2      	mvns	r2, r2
 8003102:	4611      	mov	r1, r2
 8003104:	4a0d      	ldr	r2, [pc, #52]	@ (800313c <MGPIO_voidSetOutputConfig+0x188>)
 8003106:	400b      	ands	r3, r1
 8003108:	6093      	str	r3, [r2, #8]
            GPIOC->OSPEEDR|=(Copy_uddtSpeed<<Copy_uddtPin*2);
 800310a:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <MGPIO_voidSetOutputConfig+0x188>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	7939      	ldrb	r1, [r7, #4]
 8003110:	79ba      	ldrb	r2, [r7, #6]
 8003112:	0052      	lsls	r2, r2, #1
 8003114:	fa01 f202 	lsl.w	r2, r1, r2
 8003118:	4611      	mov	r1, r2
 800311a:	4a08      	ldr	r2, [pc, #32]	@ (800313c <MGPIO_voidSetOutputConfig+0x188>)
 800311c:	430b      	orrs	r3, r1
 800311e:	6093      	str	r3, [r2, #8]
            break;
 8003120:	e002      	b.n	8003128 <MGPIO_voidSetOutputConfig+0x174>
    else if((Copy_uddtPort == PORTB) && ((Copy_uddtPin == PIN3)|| (Copy_uddtPin == PIN4) || (Copy_uddtPin == PIN5))){}
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <MGPIO_voidSetOutputConfig+0x174>
            break;
 8003126:	bf00      	nop
        }
    } 
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bc90      	pop	{r4, r7}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800

08003140 <MGPIO_voidSetPinValue>:
void MGPIO_voidSetPinValue(PORT_t Copy_uddtPort,PIN_t Copy_uddtPin,VALUE_t Copy_uddtVal)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
 800314a:	460b      	mov	r3, r1
 800314c:	71bb      	strb	r3, [r7, #6]
 800314e:	4613      	mov	r3, r2
 8003150:	717b      	strb	r3, [r7, #5]
    if(((Copy_uddtPort == PORTA)) && (Copy_uddtPin >= PIN13)){}
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <MGPIO_voidSetPinValue+0x1e>
 8003158:	79bb      	ldrb	r3, [r7, #6]
 800315a:	2b0c      	cmp	r3, #12
 800315c:	d85a      	bhi.n	8003214 <MGPIO_voidSetPinValue+0xd4>
    else if((Copy_uddtPort == PORTB) && ((Copy_uddtPin == PIN3)|| (Copy_uddtPin == PIN4) || (Copy_uddtPin == PIN5))){}
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d108      	bne.n	8003176 <MGPIO_voidSetPinValue+0x36>
 8003164:	79bb      	ldrb	r3, [r7, #6]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d051      	beq.n	800320e <MGPIO_voidSetPinValue+0xce>
 800316a:	79bb      	ldrb	r3, [r7, #6]
 800316c:	2b04      	cmp	r3, #4
 800316e:	d04e      	beq.n	800320e <MGPIO_voidSetPinValue+0xce>
 8003170:	79bb      	ldrb	r3, [r7, #6]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d04b      	beq.n	800320e <MGPIO_voidSetPinValue+0xce>
    else{
        switch (Copy_uddtPort)
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d032      	beq.n	80031e2 <MGPIO_voidSetPinValue+0xa2>
 800317c:	2b02      	cmp	r3, #2
 800317e:	dc48      	bgt.n	8003212 <MGPIO_voidSetPinValue+0xd2>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <MGPIO_voidSetPinValue+0x4a>
 8003184:	2b01      	cmp	r3, #1
 8003186:	d016      	beq.n	80031b6 <MGPIO_voidSetPinValue+0x76>
        case PORTC:
            GPIOC->ODR&=~(1<<Copy_uddtPin);
            GPIOC->ODR|=(Copy_uddtVal<<Copy_uddtPin);
            break;
        default:
            break;
 8003188:	e043      	b.n	8003212 <MGPIO_voidSetPinValue+0xd2>
            GPIOA->ODR&=~(1<<Copy_uddtPin);
 800318a:	4b25      	ldr	r3, [pc, #148]	@ (8003220 <MGPIO_voidSetPinValue+0xe0>)
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	79ba      	ldrb	r2, [r7, #6]
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f202 	lsl.w	r2, r1, r2
 8003196:	43d2      	mvns	r2, r2
 8003198:	4611      	mov	r1, r2
 800319a:	4a21      	ldr	r2, [pc, #132]	@ (8003220 <MGPIO_voidSetPinValue+0xe0>)
 800319c:	400b      	ands	r3, r1
 800319e:	6153      	str	r3, [r2, #20]
            GPIOA->ODR|=(Copy_uddtVal<<Copy_uddtPin);
 80031a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003220 <MGPIO_voidSetPinValue+0xe0>)
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	7979      	ldrb	r1, [r7, #5]
 80031a6:	79ba      	ldrb	r2, [r7, #6]
 80031a8:	fa01 f202 	lsl.w	r2, r1, r2
 80031ac:	4611      	mov	r1, r2
 80031ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003220 <MGPIO_voidSetPinValue+0xe0>)
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6153      	str	r3, [r2, #20]
            break;
 80031b4:	e02e      	b.n	8003214 <MGPIO_voidSetPinValue+0xd4>
            GPIOB->ODR&=~(1<<Copy_uddtPin);
 80031b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <MGPIO_voidSetPinValue+0xe4>)
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	79ba      	ldrb	r2, [r7, #6]
 80031bc:	2101      	movs	r1, #1
 80031be:	fa01 f202 	lsl.w	r2, r1, r2
 80031c2:	43d2      	mvns	r2, r2
 80031c4:	4611      	mov	r1, r2
 80031c6:	4a17      	ldr	r2, [pc, #92]	@ (8003224 <MGPIO_voidSetPinValue+0xe4>)
 80031c8:	400b      	ands	r3, r1
 80031ca:	6153      	str	r3, [r2, #20]
            GPIOB->ODR|=(Copy_uddtVal<<Copy_uddtPin);
 80031cc:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <MGPIO_voidSetPinValue+0xe4>)
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	7979      	ldrb	r1, [r7, #5]
 80031d2:	79ba      	ldrb	r2, [r7, #6]
 80031d4:	fa01 f202 	lsl.w	r2, r1, r2
 80031d8:	4611      	mov	r1, r2
 80031da:	4a12      	ldr	r2, [pc, #72]	@ (8003224 <MGPIO_voidSetPinValue+0xe4>)
 80031dc:	430b      	orrs	r3, r1
 80031de:	6153      	str	r3, [r2, #20]
            break;
 80031e0:	e018      	b.n	8003214 <MGPIO_voidSetPinValue+0xd4>
            GPIOC->ODR&=~(1<<Copy_uddtPin);
 80031e2:	4b11      	ldr	r3, [pc, #68]	@ (8003228 <MGPIO_voidSetPinValue+0xe8>)
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	79ba      	ldrb	r2, [r7, #6]
 80031e8:	2101      	movs	r1, #1
 80031ea:	fa01 f202 	lsl.w	r2, r1, r2
 80031ee:	43d2      	mvns	r2, r2
 80031f0:	4611      	mov	r1, r2
 80031f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003228 <MGPIO_voidSetPinValue+0xe8>)
 80031f4:	400b      	ands	r3, r1
 80031f6:	6153      	str	r3, [r2, #20]
            GPIOC->ODR|=(Copy_uddtVal<<Copy_uddtPin);
 80031f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <MGPIO_voidSetPinValue+0xe8>)
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	7979      	ldrb	r1, [r7, #5]
 80031fe:	79ba      	ldrb	r2, [r7, #6]
 8003200:	fa01 f202 	lsl.w	r2, r1, r2
 8003204:	4611      	mov	r1, r2
 8003206:	4a08      	ldr	r2, [pc, #32]	@ (8003228 <MGPIO_voidSetPinValue+0xe8>)
 8003208:	430b      	orrs	r3, r1
 800320a:	6153      	str	r3, [r2, #20]
            break;
 800320c:	e002      	b.n	8003214 <MGPIO_voidSetPinValue+0xd4>
    else if((Copy_uddtPort == PORTB) && ((Copy_uddtPin == PIN3)|| (Copy_uddtPin == PIN4) || (Copy_uddtPin == PIN5))){}
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <MGPIO_voidSetPinValue+0xd4>
            break;
 8003212:	bf00      	nop
        }
    } 
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40020000 	.word	0x40020000
 8003224:	40020400 	.word	0x40020400
 8003228:	40020800 	.word	0x40020800

0800322c <MGPIO_voidSetINPUTConfig>:
        }
    } 
}
//INPUT
void MGPIO_voidSetINPUTConfig(PORT_t Copy_uddtPort,PIN_t Copy_uddtPin,IN_TYPE_t Copy_uddtType)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
 8003236:	460b      	mov	r3, r1
 8003238:	71bb      	strb	r3, [r7, #6]
 800323a:	4613      	mov	r3, r2
 800323c:	717b      	strb	r3, [r7, #5]
    if(((Copy_uddtPort == PORTA)) && (Copy_uddtPin >= PIN13)){}
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <MGPIO_voidSetINPUTConfig+0x1e>
 8003244:	79bb      	ldrb	r3, [r7, #6]
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d860      	bhi.n	800330c <MGPIO_voidSetINPUTConfig+0xe0>
    else if((Copy_uddtPort == PORTB) && ((Copy_uddtPin == PIN3)|| (Copy_uddtPin == PIN4) || (Copy_uddtPin == PIN5))){}
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d108      	bne.n	8003262 <MGPIO_voidSetINPUTConfig+0x36>
 8003250:	79bb      	ldrb	r3, [r7, #6]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d057      	beq.n	8003306 <MGPIO_voidSetINPUTConfig+0xda>
 8003256:	79bb      	ldrb	r3, [r7, #6]
 8003258:	2b04      	cmp	r3, #4
 800325a:	d054      	beq.n	8003306 <MGPIO_voidSetINPUTConfig+0xda>
 800325c:	79bb      	ldrb	r3, [r7, #6]
 800325e:	2b05      	cmp	r3, #5
 8003260:	d051      	beq.n	8003306 <MGPIO_voidSetINPUTConfig+0xda>
    else{
        switch (Copy_uddtPort)
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d036      	beq.n	80032d6 <MGPIO_voidSetINPUTConfig+0xaa>
 8003268:	2b02      	cmp	r3, #2
 800326a:	dc4e      	bgt.n	800330a <MGPIO_voidSetINPUTConfig+0xde>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <MGPIO_voidSetINPUTConfig+0x4a>
 8003270:	2b01      	cmp	r3, #1
 8003272:	d018      	beq.n	80032a6 <MGPIO_voidSetINPUTConfig+0x7a>
        case PORTC:
            GPIOC->PUPDR&=~(GPIO_MASK<<(Copy_uddtPin*2));
            GPIOC->PUPDR|=(Copy_uddtType<<Copy_uddtPin*2);
            break;
        default:
            break;
 8003274:	e049      	b.n	800330a <MGPIO_voidSetINPUTConfig+0xde>
            GPIOA->PUPDR&=~(GPIO_MASK<<(Copy_uddtPin*2));
 8003276:	4b28      	ldr	r3, [pc, #160]	@ (8003318 <MGPIO_voidSetINPUTConfig+0xec>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	79ba      	ldrb	r2, [r7, #6]
 800327c:	0052      	lsls	r2, r2, #1
 800327e:	2103      	movs	r1, #3
 8003280:	fa01 f202 	lsl.w	r2, r1, r2
 8003284:	43d2      	mvns	r2, r2
 8003286:	4611      	mov	r1, r2
 8003288:	4a23      	ldr	r2, [pc, #140]	@ (8003318 <MGPIO_voidSetINPUTConfig+0xec>)
 800328a:	400b      	ands	r3, r1
 800328c:	60d3      	str	r3, [r2, #12]
            GPIOA->PUPDR|=(Copy_uddtType<<Copy_uddtPin*2);
 800328e:	4b22      	ldr	r3, [pc, #136]	@ (8003318 <MGPIO_voidSetINPUTConfig+0xec>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	7979      	ldrb	r1, [r7, #5]
 8003294:	79ba      	ldrb	r2, [r7, #6]
 8003296:	0052      	lsls	r2, r2, #1
 8003298:	fa01 f202 	lsl.w	r2, r1, r2
 800329c:	4611      	mov	r1, r2
 800329e:	4a1e      	ldr	r2, [pc, #120]	@ (8003318 <MGPIO_voidSetINPUTConfig+0xec>)
 80032a0:	430b      	orrs	r3, r1
 80032a2:	60d3      	str	r3, [r2, #12]
            break;
 80032a4:	e032      	b.n	800330c <MGPIO_voidSetINPUTConfig+0xe0>
            GPIOB->PUPDR&=~(GPIO_MASK<<(Copy_uddtPin*2));
 80032a6:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <MGPIO_voidSetINPUTConfig+0xf0>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	79ba      	ldrb	r2, [r7, #6]
 80032ac:	0052      	lsls	r2, r2, #1
 80032ae:	2103      	movs	r1, #3
 80032b0:	fa01 f202 	lsl.w	r2, r1, r2
 80032b4:	43d2      	mvns	r2, r2
 80032b6:	4611      	mov	r1, r2
 80032b8:	4a18      	ldr	r2, [pc, #96]	@ (800331c <MGPIO_voidSetINPUTConfig+0xf0>)
 80032ba:	400b      	ands	r3, r1
 80032bc:	60d3      	str	r3, [r2, #12]
            GPIOB->PUPDR|=(Copy_uddtType<<Copy_uddtPin*2);
 80032be:	4b17      	ldr	r3, [pc, #92]	@ (800331c <MGPIO_voidSetINPUTConfig+0xf0>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	7979      	ldrb	r1, [r7, #5]
 80032c4:	79ba      	ldrb	r2, [r7, #6]
 80032c6:	0052      	lsls	r2, r2, #1
 80032c8:	fa01 f202 	lsl.w	r2, r1, r2
 80032cc:	4611      	mov	r1, r2
 80032ce:	4a13      	ldr	r2, [pc, #76]	@ (800331c <MGPIO_voidSetINPUTConfig+0xf0>)
 80032d0:	430b      	orrs	r3, r1
 80032d2:	60d3      	str	r3, [r2, #12]
            break;
 80032d4:	e01a      	b.n	800330c <MGPIO_voidSetINPUTConfig+0xe0>
            GPIOC->PUPDR&=~(GPIO_MASK<<(Copy_uddtPin*2));
 80032d6:	4b12      	ldr	r3, [pc, #72]	@ (8003320 <MGPIO_voidSetINPUTConfig+0xf4>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	79ba      	ldrb	r2, [r7, #6]
 80032dc:	0052      	lsls	r2, r2, #1
 80032de:	2103      	movs	r1, #3
 80032e0:	fa01 f202 	lsl.w	r2, r1, r2
 80032e4:	43d2      	mvns	r2, r2
 80032e6:	4611      	mov	r1, r2
 80032e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003320 <MGPIO_voidSetINPUTConfig+0xf4>)
 80032ea:	400b      	ands	r3, r1
 80032ec:	60d3      	str	r3, [r2, #12]
            GPIOC->PUPDR|=(Copy_uddtType<<Copy_uddtPin*2);
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <MGPIO_voidSetINPUTConfig+0xf4>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	7979      	ldrb	r1, [r7, #5]
 80032f4:	79ba      	ldrb	r2, [r7, #6]
 80032f6:	0052      	lsls	r2, r2, #1
 80032f8:	fa01 f202 	lsl.w	r2, r1, r2
 80032fc:	4611      	mov	r1, r2
 80032fe:	4a08      	ldr	r2, [pc, #32]	@ (8003320 <MGPIO_voidSetINPUTConfig+0xf4>)
 8003300:	430b      	orrs	r3, r1
 8003302:	60d3      	str	r3, [r2, #12]
            break;
 8003304:	e002      	b.n	800330c <MGPIO_voidSetINPUTConfig+0xe0>
    else if((Copy_uddtPort == PORTB) && ((Copy_uddtPin == PIN3)|| (Copy_uddtPin == PIN4) || (Copy_uddtPin == PIN5))){}
 8003306:	bf00      	nop
 8003308:	e000      	b.n	800330c <MGPIO_voidSetINPUTConfig+0xe0>
            break;
 800330a:	bf00      	nop
        }
    }  
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40020000 	.word	0x40020000
 800331c:	40020400 	.word	0x40020400
 8003320:	40020800 	.word	0x40020800

08003324 <MGPIO_u8GetPinValue>:
u8 MGPIO_u8GetPinValue(PORT_t Copy_uddtPort,PIN_t Copy_uddtPin)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	460a      	mov	r2, r1
 800332e:	71fb      	strb	r3, [r7, #7]
 8003330:	4613      	mov	r3, r2
 8003332:	71bb      	strb	r3, [r7, #6]
    u8 Local_u8Value;
    if(((Copy_uddtPort == PORTA)) && (Copy_uddtPin >= PIN13)){}
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <MGPIO_u8GetPinValue+0x1c>
 800333a:	79bb      	ldrb	r3, [r7, #6]
 800333c:	2b0c      	cmp	r3, #12
 800333e:	d836      	bhi.n	80033ae <MGPIO_u8GetPinValue+0x8a>
    else if((Copy_uddtPort == PORTB) && ((Copy_uddtPin == PIN3)|| (Copy_uddtPin == PIN4) || (Copy_uddtPin == PIN5))){}
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d108      	bne.n	8003358 <MGPIO_u8GetPinValue+0x34>
 8003346:	79bb      	ldrb	r3, [r7, #6]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d02d      	beq.n	80033a8 <MGPIO_u8GetPinValue+0x84>
 800334c:	79bb      	ldrb	r3, [r7, #6]
 800334e:	2b04      	cmp	r3, #4
 8003350:	d02a      	beq.n	80033a8 <MGPIO_u8GetPinValue+0x84>
 8003352:	79bb      	ldrb	r3, [r7, #6]
 8003354:	2b05      	cmp	r3, #5
 8003356:	d027      	beq.n	80033a8 <MGPIO_u8GetPinValue+0x84>
    else{
        switch (Copy_uddtPort)
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d01a      	beq.n	8003394 <MGPIO_u8GetPinValue+0x70>
 800335e:	2b02      	cmp	r3, #2
 8003360:	dc24      	bgt.n	80033ac <MGPIO_u8GetPinValue+0x88>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <MGPIO_u8GetPinValue+0x48>
 8003366:	2b01      	cmp	r3, #1
 8003368:	d00a      	beq.n	8003380 <MGPIO_u8GetPinValue+0x5c>
            break;
        case PORTC:
            Local_u8Value=GET_BIT(GPIOC->IDR,Copy_uddtPin);
            break;
        default:
            break;
 800336a:	e01f      	b.n	80033ac <MGPIO_u8GetPinValue+0x88>
            Local_u8Value=GET_BIT(GPIOA->IDR,Copy_uddtPin);
 800336c:	4b13      	ldr	r3, [pc, #76]	@ (80033bc <MGPIO_u8GetPinValue+0x98>)
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	79bb      	ldrb	r3, [r7, #6]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
            break;
 800337e:	e016      	b.n	80033ae <MGPIO_u8GetPinValue+0x8a>
            Local_u8Value=GET_BIT(GPIOB->IDR,Copy_uddtPin);
 8003380:	4b0f      	ldr	r3, [pc, #60]	@ (80033c0 <MGPIO_u8GetPinValue+0x9c>)
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	79bb      	ldrb	r3, [r7, #6]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
            break;
 8003392:	e00c      	b.n	80033ae <MGPIO_u8GetPinValue+0x8a>
            Local_u8Value=GET_BIT(GPIOC->IDR,Copy_uddtPin);
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <MGPIO_u8GetPinValue+0xa0>)
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	79bb      	ldrb	r3, [r7, #6]
 800339a:	fa22 f303 	lsr.w	r3, r2, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
            break;
 80033a6:	e002      	b.n	80033ae <MGPIO_u8GetPinValue+0x8a>
    else if((Copy_uddtPort == PORTB) && ((Copy_uddtPin == PIN3)|| (Copy_uddtPin == PIN4) || (Copy_uddtPin == PIN5))){}
 80033a8:	bf00      	nop
 80033aa:	e000      	b.n	80033ae <MGPIO_u8GetPinValue+0x8a>
            break;
 80033ac:	bf00      	nop
        }
    }  
    return Local_u8Value;
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40020000 	.word	0x40020000
 80033c0:	40020400 	.word	0x40020400
 80033c4:	40020800 	.word	0x40020800

080033c8 <MGPIO_voidSetAltFuncConfig>:
//Alternative
void MGPIO_voidSetAltFuncConfig(PORT_t Copy_uddtPort,PIN_t Copy_uddtPin,ALTERNATIVE_FUN_t Copy_uddtAltFunc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
 80033d2:	460b      	mov	r3, r1
 80033d4:	71bb      	strb	r3, [r7, #6]
 80033d6:	4613      	mov	r3, r2
 80033d8:	717b      	strb	r3, [r7, #5]
    if(((Copy_uddtPort == PORTA)) && (Copy_uddtPin >= PIN13)){}
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d103      	bne.n	80033e8 <MGPIO_voidSetAltFuncConfig+0x20>
 80033e0:	79bb      	ldrb	r3, [r7, #6]
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	f200 80cf 	bhi.w	8003586 <MGPIO_voidSetAltFuncConfig+0x1be>
    else if((Copy_uddtPort == PORTB) && ((Copy_uddtPin == PIN3)|| (Copy_uddtPin == PIN4) || (Copy_uddtPin == PIN5))){}
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10b      	bne.n	8003406 <MGPIO_voidSetAltFuncConfig+0x3e>
 80033ee:	79bb      	ldrb	r3, [r7, #6]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	f000 80bf 	beq.w	8003574 <MGPIO_voidSetAltFuncConfig+0x1ac>
 80033f6:	79bb      	ldrb	r3, [r7, #6]
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	f000 80bb 	beq.w	8003574 <MGPIO_voidSetAltFuncConfig+0x1ac>
 80033fe:	79bb      	ldrb	r3, [r7, #6]
 8003400:	2b05      	cmp	r3, #5
 8003402:	f000 80b7 	beq.w	8003574 <MGPIO_voidSetAltFuncConfig+0x1ac>
    else{
        switch (Copy_uddtPort)
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d07a      	beq.n	8003502 <MGPIO_voidSetAltFuncConfig+0x13a>
 800340c:	2b02      	cmp	r3, #2
 800340e:	f300 80b3 	bgt.w	8003578 <MGPIO_voidSetAltFuncConfig+0x1b0>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <MGPIO_voidSetAltFuncConfig+0x54>
 8003416:	2b01      	cmp	r3, #1
 8003418:	d03a      	beq.n	8003490 <MGPIO_voidSetAltFuncConfig+0xc8>
                GPIOC->AFRH&=~(ALT_MUSK<<Copy_uddtPin*4);
                GPIOC->AFRH|=(Copy_uddtAltFunc<<Copy_uddtPin*4);
            }
            break;
        default:
            break;
 800341a:	e0ad      	b.n	8003578 <MGPIO_voidSetAltFuncConfig+0x1b0>
            if (Copy_uddtPin<8)
 800341c:	79bb      	ldrb	r3, [r7, #6]
 800341e:	2b07      	cmp	r3, #7
 8003420:	d817      	bhi.n	8003452 <MGPIO_voidSetAltFuncConfig+0x8a>
                GPIOA->AFRL&=~(ALT_MUSK<<Copy_uddtPin*4);
 8003422:	4b5c      	ldr	r3, [pc, #368]	@ (8003594 <MGPIO_voidSetAltFuncConfig+0x1cc>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	79ba      	ldrb	r2, [r7, #6]
 8003428:	0092      	lsls	r2, r2, #2
 800342a:	210f      	movs	r1, #15
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	43d2      	mvns	r2, r2
 8003432:	4611      	mov	r1, r2
 8003434:	4a57      	ldr	r2, [pc, #348]	@ (8003594 <MGPIO_voidSetAltFuncConfig+0x1cc>)
 8003436:	400b      	ands	r3, r1
 8003438:	6213      	str	r3, [r2, #32]
                GPIOA->AFRL|=(Copy_uddtAltFunc<<Copy_uddtPin*4);
 800343a:	4b56      	ldr	r3, [pc, #344]	@ (8003594 <MGPIO_voidSetAltFuncConfig+0x1cc>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	7979      	ldrb	r1, [r7, #5]
 8003440:	79ba      	ldrb	r2, [r7, #6]
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	fa01 f202 	lsl.w	r2, r1, r2
 8003448:	4611      	mov	r1, r2
 800344a:	4a52      	ldr	r2, [pc, #328]	@ (8003594 <MGPIO_voidSetAltFuncConfig+0x1cc>)
 800344c:	430b      	orrs	r3, r1
 800344e:	6213      	str	r3, [r2, #32]
            break;
 8003450:	e094      	b.n	800357c <MGPIO_voidSetAltFuncConfig+0x1b4>
            else if(Copy_uddtPin<16)
 8003452:	79bb      	ldrb	r3, [r7, #6]
 8003454:	2b0f      	cmp	r3, #15
 8003456:	f200 8091 	bhi.w	800357c <MGPIO_voidSetAltFuncConfig+0x1b4>
                Copy_uddtPin-=8;
 800345a:	79bb      	ldrb	r3, [r7, #6]
 800345c:	3b08      	subs	r3, #8
 800345e:	71bb      	strb	r3, [r7, #6]
                GPIOA->AFRH&=~(ALT_MUSK<<Copy_uddtPin*4);
 8003460:	4b4c      	ldr	r3, [pc, #304]	@ (8003594 <MGPIO_voidSetAltFuncConfig+0x1cc>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	79ba      	ldrb	r2, [r7, #6]
 8003466:	0092      	lsls	r2, r2, #2
 8003468:	210f      	movs	r1, #15
 800346a:	fa01 f202 	lsl.w	r2, r1, r2
 800346e:	43d2      	mvns	r2, r2
 8003470:	4611      	mov	r1, r2
 8003472:	4a48      	ldr	r2, [pc, #288]	@ (8003594 <MGPIO_voidSetAltFuncConfig+0x1cc>)
 8003474:	400b      	ands	r3, r1
 8003476:	6253      	str	r3, [r2, #36]	@ 0x24
                GPIOA->AFRH|=(Copy_uddtAltFunc<<Copy_uddtPin*4);
 8003478:	4b46      	ldr	r3, [pc, #280]	@ (8003594 <MGPIO_voidSetAltFuncConfig+0x1cc>)
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	7979      	ldrb	r1, [r7, #5]
 800347e:	79ba      	ldrb	r2, [r7, #6]
 8003480:	0092      	lsls	r2, r2, #2
 8003482:	fa01 f202 	lsl.w	r2, r1, r2
 8003486:	4611      	mov	r1, r2
 8003488:	4a42      	ldr	r2, [pc, #264]	@ (8003594 <MGPIO_voidSetAltFuncConfig+0x1cc>)
 800348a:	430b      	orrs	r3, r1
 800348c:	6253      	str	r3, [r2, #36]	@ 0x24
            break;
 800348e:	e075      	b.n	800357c <MGPIO_voidSetAltFuncConfig+0x1b4>
            if (Copy_uddtPin<8)
 8003490:	79bb      	ldrb	r3, [r7, #6]
 8003492:	2b07      	cmp	r3, #7
 8003494:	d817      	bhi.n	80034c6 <MGPIO_voidSetAltFuncConfig+0xfe>
                GPIOB->AFRL&=~(ALT_MUSK<<Copy_uddtPin*4);
 8003496:	4b40      	ldr	r3, [pc, #256]	@ (8003598 <MGPIO_voidSetAltFuncConfig+0x1d0>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	79ba      	ldrb	r2, [r7, #6]
 800349c:	0092      	lsls	r2, r2, #2
 800349e:	210f      	movs	r1, #15
 80034a0:	fa01 f202 	lsl.w	r2, r1, r2
 80034a4:	43d2      	mvns	r2, r2
 80034a6:	4611      	mov	r1, r2
 80034a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003598 <MGPIO_voidSetAltFuncConfig+0x1d0>)
 80034aa:	400b      	ands	r3, r1
 80034ac:	6213      	str	r3, [r2, #32]
                GPIOB->AFRL|=(Copy_uddtAltFunc<<Copy_uddtPin*4);
 80034ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003598 <MGPIO_voidSetAltFuncConfig+0x1d0>)
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	7979      	ldrb	r1, [r7, #5]
 80034b4:	79ba      	ldrb	r2, [r7, #6]
 80034b6:	0092      	lsls	r2, r2, #2
 80034b8:	fa01 f202 	lsl.w	r2, r1, r2
 80034bc:	4611      	mov	r1, r2
 80034be:	4a36      	ldr	r2, [pc, #216]	@ (8003598 <MGPIO_voidSetAltFuncConfig+0x1d0>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6213      	str	r3, [r2, #32]
            break;
 80034c4:	e05c      	b.n	8003580 <MGPIO_voidSetAltFuncConfig+0x1b8>
            else if(Copy_uddtPin<16)
 80034c6:	79bb      	ldrb	r3, [r7, #6]
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d859      	bhi.n	8003580 <MGPIO_voidSetAltFuncConfig+0x1b8>
                Copy_uddtPin-=8;
 80034cc:	79bb      	ldrb	r3, [r7, #6]
 80034ce:	3b08      	subs	r3, #8
 80034d0:	71bb      	strb	r3, [r7, #6]
                GPIOB->AFRH&=~(ALT_MUSK<<Copy_uddtPin*4);
 80034d2:	4b31      	ldr	r3, [pc, #196]	@ (8003598 <MGPIO_voidSetAltFuncConfig+0x1d0>)
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	79ba      	ldrb	r2, [r7, #6]
 80034d8:	0092      	lsls	r2, r2, #2
 80034da:	210f      	movs	r1, #15
 80034dc:	fa01 f202 	lsl.w	r2, r1, r2
 80034e0:	43d2      	mvns	r2, r2
 80034e2:	4611      	mov	r1, r2
 80034e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003598 <MGPIO_voidSetAltFuncConfig+0x1d0>)
 80034e6:	400b      	ands	r3, r1
 80034e8:	6253      	str	r3, [r2, #36]	@ 0x24
                GPIOB->AFRH|=(Copy_uddtAltFunc<<Copy_uddtPin*4);
 80034ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003598 <MGPIO_voidSetAltFuncConfig+0x1d0>)
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ee:	7979      	ldrb	r1, [r7, #5]
 80034f0:	79ba      	ldrb	r2, [r7, #6]
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	fa01 f202 	lsl.w	r2, r1, r2
 80034f8:	4611      	mov	r1, r2
 80034fa:	4a27      	ldr	r2, [pc, #156]	@ (8003598 <MGPIO_voidSetAltFuncConfig+0x1d0>)
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6253      	str	r3, [r2, #36]	@ 0x24
            break;
 8003500:	e03e      	b.n	8003580 <MGPIO_voidSetAltFuncConfig+0x1b8>
            if (Copy_uddtPin<8)
 8003502:	79bb      	ldrb	r3, [r7, #6]
 8003504:	2b07      	cmp	r3, #7
 8003506:	d817      	bhi.n	8003538 <MGPIO_voidSetAltFuncConfig+0x170>
                GPIOC->AFRL&=~(ALT_MUSK<<Copy_uddtPin*4);
 8003508:	4b24      	ldr	r3, [pc, #144]	@ (800359c <MGPIO_voidSetAltFuncConfig+0x1d4>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	79ba      	ldrb	r2, [r7, #6]
 800350e:	0092      	lsls	r2, r2, #2
 8003510:	210f      	movs	r1, #15
 8003512:	fa01 f202 	lsl.w	r2, r1, r2
 8003516:	43d2      	mvns	r2, r2
 8003518:	4611      	mov	r1, r2
 800351a:	4a20      	ldr	r2, [pc, #128]	@ (800359c <MGPIO_voidSetAltFuncConfig+0x1d4>)
 800351c:	400b      	ands	r3, r1
 800351e:	6213      	str	r3, [r2, #32]
                GPIOC->AFRL|=(Copy_uddtAltFunc<<Copy_uddtPin*4);
 8003520:	4b1e      	ldr	r3, [pc, #120]	@ (800359c <MGPIO_voidSetAltFuncConfig+0x1d4>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	7979      	ldrb	r1, [r7, #5]
 8003526:	79ba      	ldrb	r2, [r7, #6]
 8003528:	0092      	lsls	r2, r2, #2
 800352a:	fa01 f202 	lsl.w	r2, r1, r2
 800352e:	4611      	mov	r1, r2
 8003530:	4a1a      	ldr	r2, [pc, #104]	@ (800359c <MGPIO_voidSetAltFuncConfig+0x1d4>)
 8003532:	430b      	orrs	r3, r1
 8003534:	6213      	str	r3, [r2, #32]
            break;
 8003536:	e025      	b.n	8003584 <MGPIO_voidSetAltFuncConfig+0x1bc>
            else if(Copy_uddtPin<16)
 8003538:	79bb      	ldrb	r3, [r7, #6]
 800353a:	2b0f      	cmp	r3, #15
 800353c:	d822      	bhi.n	8003584 <MGPIO_voidSetAltFuncConfig+0x1bc>
                Copy_uddtPin-=8;
 800353e:	79bb      	ldrb	r3, [r7, #6]
 8003540:	3b08      	subs	r3, #8
 8003542:	71bb      	strb	r3, [r7, #6]
                GPIOC->AFRH&=~(ALT_MUSK<<Copy_uddtPin*4);
 8003544:	4b15      	ldr	r3, [pc, #84]	@ (800359c <MGPIO_voidSetAltFuncConfig+0x1d4>)
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	79ba      	ldrb	r2, [r7, #6]
 800354a:	0092      	lsls	r2, r2, #2
 800354c:	210f      	movs	r1, #15
 800354e:	fa01 f202 	lsl.w	r2, r1, r2
 8003552:	43d2      	mvns	r2, r2
 8003554:	4611      	mov	r1, r2
 8003556:	4a11      	ldr	r2, [pc, #68]	@ (800359c <MGPIO_voidSetAltFuncConfig+0x1d4>)
 8003558:	400b      	ands	r3, r1
 800355a:	6253      	str	r3, [r2, #36]	@ 0x24
                GPIOC->AFRH|=(Copy_uddtAltFunc<<Copy_uddtPin*4);
 800355c:	4b0f      	ldr	r3, [pc, #60]	@ (800359c <MGPIO_voidSetAltFuncConfig+0x1d4>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	7979      	ldrb	r1, [r7, #5]
 8003562:	79ba      	ldrb	r2, [r7, #6]
 8003564:	0092      	lsls	r2, r2, #2
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	4611      	mov	r1, r2
 800356c:	4a0b      	ldr	r2, [pc, #44]	@ (800359c <MGPIO_voidSetAltFuncConfig+0x1d4>)
 800356e:	430b      	orrs	r3, r1
 8003570:	6253      	str	r3, [r2, #36]	@ 0x24
            break;
 8003572:	e007      	b.n	8003584 <MGPIO_voidSetAltFuncConfig+0x1bc>
    else if((Copy_uddtPort == PORTB) && ((Copy_uddtPin == PIN3)|| (Copy_uddtPin == PIN4) || (Copy_uddtPin == PIN5))){}
 8003574:	bf00      	nop
 8003576:	e006      	b.n	8003586 <MGPIO_voidSetAltFuncConfig+0x1be>
            break;
 8003578:	bf00      	nop
 800357a:	e004      	b.n	8003586 <MGPIO_voidSetAltFuncConfig+0x1be>
            break;
 800357c:	bf00      	nop
 800357e:	e002      	b.n	8003586 <MGPIO_voidSetAltFuncConfig+0x1be>
            break;
 8003580:	bf00      	nop
 8003582:	e000      	b.n	8003586 <MGPIO_voidSetAltFuncConfig+0x1be>
            break;
 8003584:	bf00      	nop
        }
    } 
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40020000 	.word	0x40020000
 8003598:	40020400 	.word	0x40020400
 800359c:	40020800 	.word	0x40020800

080035a0 <MNVIC_voidEnable>:
#include "MNVIC_Private.h"
#include "MNVIC_Config.h"

u8 Global_u8Value=0;
void MNVIC_voidEnable(u8 Copy_u8Position)
{
 80035a0:	b490      	push	{r4, r7}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[Copy_u8Position/REG_DIV]|=(1<<(Copy_u8Position%REG_DIV));
 80035aa:	4a0c      	ldr	r2, [pc, #48]	@ (80035dc <MNVIC_voidEnable+0x3c>)
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	b2d8      	uxtb	r0, r3
 80035b2:	4603      	mov	r3, r0
 80035b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b8:	79fa      	ldrb	r2, [r7, #7]
 80035ba:	f002 021f 	and.w	r2, r2, #31
 80035be:	2101      	movs	r1, #1
 80035c0:	fa01 f202 	lsl.w	r2, r1, r2
 80035c4:	4614      	mov	r4, r2
 80035c6:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <MNVIC_voidEnable+0x3c>)
 80035c8:	4601      	mov	r1, r0
 80035ca:	4323      	orrs	r3, r4
 80035cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc90      	pop	{r4, r7}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000e100 	.word	0xe000e100

080035e0 <MRCC_voidInit>:
#include"MRCC_int.h"
#include"MRCC_conf.h"
#include"MRCC_prv.h"

void MRCC_voidInit()
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
   #if (SYSTEM_CLOCK==HSI_CLOCK)
		RCC->CR|=(1<<HSION);
 80035e4:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <MRCC_voidInit+0x3c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0c      	ldr	r2, [pc, #48]	@ (800361c <MRCC_voidInit+0x3c>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6013      	str	r3, [r2, #0]
		while(!GET_BIT(RCC->CR,HSIRDY));
 80035f0:	bf00      	nop
 80035f2:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <MRCC_voidInit+0x3c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0fa      	beq.n	80035f2 <MRCC_voidInit+0x12>
		RCC->CFGR&=~(SW_MUSK<<SW0);
 80035fc:	4b07      	ldr	r3, [pc, #28]	@ (800361c <MRCC_voidInit+0x3c>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a06      	ldr	r2, [pc, #24]	@ (800361c <MRCC_voidInit+0x3c>)
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	6093      	str	r3, [r2, #8]
		RCC->CFGR&=~(HSI_Oscillator<<SWS);
 8003608:	4b04      	ldr	r3, [pc, #16]	@ (800361c <MRCC_voidInit+0x3c>)
 800360a:	4a04      	ldr	r2, [pc, #16]	@ (800361c <MRCC_voidInit+0x3c>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	6093      	str	r3, [r2, #8]
			RCC->CFGR&=~(SW_MUSK<<SW0);
			RCC->CFGR|=(PLL_Oscillator<<SWS);


#endif
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800

08003620 <MRCC_voidEnablePeripheral>:
void MRCC_voidEnablePeripheral(System_Bus_t Copy_uddtBus,u8 Copy_u8Peripehral)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	460a      	mov	r2, r1
 800362a:	71fb      	strb	r3, [r7, #7]
 800362c:	4613      	mov	r3, r2
 800362e:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uddtBus)
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d836      	bhi.n	80036a4 <MRCC_voidEnablePeripheral+0x84>
 8003636:	a201      	add	r2, pc, #4	@ (adr r2, 800363c <MRCC_voidEnablePeripheral+0x1c>)
 8003638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363c:	0800364d 	.word	0x0800364d
 8003640:	08003663 	.word	0x08003663
 8003644:	08003679 	.word	0x08003679
 8003648:	0800368f 	.word	0x0800368f
	{
		case AHB1_BUS:
		RCC->AHB1ENR|=(1<<Copy_u8Peripehral);
 800364c:	4b19      	ldr	r3, [pc, #100]	@ (80036b4 <MRCC_voidEnablePeripheral+0x94>)
 800364e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003650:	79ba      	ldrb	r2, [r7, #6]
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f202 	lsl.w	r2, r1, r2
 8003658:	4611      	mov	r1, r2
 800365a:	4a16      	ldr	r2, [pc, #88]	@ (80036b4 <MRCC_voidEnablePeripheral+0x94>)
 800365c:	430b      	orrs	r3, r1
 800365e:	6313      	str	r3, [r2, #48]	@ 0x30
		break;
 8003660:	e021      	b.n	80036a6 <MRCC_voidEnablePeripheral+0x86>
		case AHB2_BUS:
		RCC->AHB2ENR|=(1<<Copy_u8Peripehral);
 8003662:	4b14      	ldr	r3, [pc, #80]	@ (80036b4 <MRCC_voidEnablePeripheral+0x94>)
 8003664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003666:	79ba      	ldrb	r2, [r7, #6]
 8003668:	2101      	movs	r1, #1
 800366a:	fa01 f202 	lsl.w	r2, r1, r2
 800366e:	4611      	mov	r1, r2
 8003670:	4a10      	ldr	r2, [pc, #64]	@ (80036b4 <MRCC_voidEnablePeripheral+0x94>)
 8003672:	430b      	orrs	r3, r1
 8003674:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8003676:	e016      	b.n	80036a6 <MRCC_voidEnablePeripheral+0x86>
		case APB1_BUS:
		RCC->APB1ENR|=(1<<Copy_u8Peripehral);
 8003678:	4b0e      	ldr	r3, [pc, #56]	@ (80036b4 <MRCC_voidEnablePeripheral+0x94>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	79ba      	ldrb	r2, [r7, #6]
 800367e:	2101      	movs	r1, #1
 8003680:	fa01 f202 	lsl.w	r2, r1, r2
 8003684:	4611      	mov	r1, r2
 8003686:	4a0b      	ldr	r2, [pc, #44]	@ (80036b4 <MRCC_voidEnablePeripheral+0x94>)
 8003688:	430b      	orrs	r3, r1
 800368a:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 800368c:	e00b      	b.n	80036a6 <MRCC_voidEnablePeripheral+0x86>
		case APB2_BUS:
		RCC->APB2ENR|=(1<<Copy_u8Peripehral);
 800368e:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <MRCC_voidEnablePeripheral+0x94>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	79ba      	ldrb	r2, [r7, #6]
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	4611      	mov	r1, r2
 800369c:	4a05      	ldr	r2, [pc, #20]	@ (80036b4 <MRCC_voidEnablePeripheral+0x94>)
 800369e:	430b      	orrs	r3, r1
 80036a0:	6453      	str	r3, [r2, #68]	@ 0x44
		break;
 80036a2:	e000      	b.n	80036a6 <MRCC_voidEnablePeripheral+0x86>

		default:
		break;
 80036a4:	bf00      	nop
	}
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800

080036b8 <MSPI_voidMasterInit>:
#include"MGPIO_int.h"
#include "MSPI_int.h"
#include "MSPI_prv.h"

void MSPI_voidMasterInit()
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
//Hardware or software SSM/SSI
SPI1->CR1|=(1<<SSM);
 80036bc:	4b20      	ldr	r3, [pc, #128]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 80036c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036c6:	6013      	str	r3, [r2, #0]
SPI1->CR1|=(1<<SSI);
 80036c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 80036ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d2:	6013      	str	r3, [r2, #0]
//Master Mode
SPI1->CR1|=(1<<MSTR);
 80036d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a19      	ldr	r2, [pc, #100]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 80036da:	f043 0304 	orr.w	r3, r3, #4
 80036de:	6013      	str	r3, [r2, #0]
//Direction (Full duplex)
SPI1->CR1&=~(1<<BIDIMODE);
 80036e0:	4b17      	ldr	r3, [pc, #92]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a16      	ldr	r2, [pc, #88]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 80036e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80036ea:	6013      	str	r3, [r2, #0]
//Data (8 bit - 16 bit)
SPI1->CR1&=~(1<<DFF);
 80036ec:	4b14      	ldr	r3, [pc, #80]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a13      	ldr	r2, [pc, #76]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 80036f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036f6:	6013      	str	r3, [r2, #0]
//MSB or LSB
SPI1->CR1&=~(1<<LSBFIRST);
 80036f8:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a10      	ldr	r2, [pc, #64]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 80036fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003702:	6013      	str	r3, [r2, #0]
//CPOL
SPI1->CR1|=(1<<CPOL);
 8003704:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0d      	ldr	r2, [pc, #52]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 800370a:	f043 0302 	orr.w	r3, r3, #2
 800370e:	6013      	str	r3, [r2, #0]
//CPHA
SPI1->CR1&=~(1<<CPHA);
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	6013      	str	r3, [r2, #0]
//clock
SPI1->CR1&=~(CLK_MUSK<<BR0);
 800371c:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a07      	ldr	r2, [pc, #28]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 8003722:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8003726:	6013      	str	r3, [r2, #0]
//SPE Enable
SPI1->CR1|=(1<<SPE);
 8003728:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a04      	ldr	r2, [pc, #16]	@ (8003740 <MSPI_voidMasterInit+0x88>)
 800372e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003732:	6013      	str	r3, [r2, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40013000 	.word	0x40013000

08003744 <MSPI_u16Tranceive>:
//SPE Enable
SPI1->CR1|=(1<<SPE);
}

u16 MSPI_u16Tranceive(u16 Copy_u16Data)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	80fb      	strh	r3, [r7, #6]
while(!GET_BIT(SPI1->SR,TXE));
 800374e:	bf00      	nop
 8003750:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <MSPI_u16Tranceive+0x38>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0fa      	beq.n	8003750 <MSPI_u16Tranceive+0xc>
SPI1->DR=Copy_u16Data;
 800375a:	4a08      	ldr	r2, [pc, #32]	@ (800377c <MSPI_u16Tranceive+0x38>)
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	60d3      	str	r3, [r2, #12]
while(!GET_BIT(SPI1->SR,RXNE));
 8003760:	bf00      	nop
 8003762:	4b06      	ldr	r3, [pc, #24]	@ (800377c <MSPI_u16Tranceive+0x38>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0fb      	beq.n	8003762 <MSPI_u16Tranceive+0x1e>
return (u16)SPI1->DR;
 800376a:	4b04      	ldr	r3, [pc, #16]	@ (800377c <MSPI_u16Tranceive+0x38>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	b29b      	uxth	r3, r3
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40013000 	.word	0x40013000

08003780 <MSTK_voidInit>:
#include "MSTK_conf.h"

static void (*Global_ptr)(void)=NULL;
static volatile u8 flag=0;
void MSTK_voidInit()
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
	#if (STK_SYSTEM_CLK==STK_AHB_8)
		STK->CTRL&=~(1<<CLOCK_SOURCE);
 8003784:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <MSTK_voidInit+0x28>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a07      	ldr	r2, [pc, #28]	@ (80037a8 <MSTK_voidInit+0x28>)
 800378a:	f023 0304 	bic.w	r3, r3, #4
 800378e:	6013      	str	r3, [r2, #0]
	    STK->CTRL&=~(1<<STK_ENABLE);
 8003790:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <MSTK_voidInit+0x28>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a04      	ldr	r2, [pc, #16]	@ (80037a8 <MSTK_voidInit+0x28>)
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	6013      	str	r3, [r2, #0]
	#elif (STK_SYSTEM_CLK==STK_AHB)
		STK->CTRL|=(1<<CLOCK_SOURCE);
	STK->CTRL&=~(1<<STK_ENABLE);
	#endif
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	e000e010 	.word	0xe000e010

080037ac <MSTK_voidStartTimer>:
void MSTK_voidStartTimer(u32 Copy_u32ReloadValue)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	STK->LOAD=Copy_u32ReloadValue;
 80037b4:	4a08      	ldr	r2, [pc, #32]	@ (80037d8 <MSTK_voidStartTimer+0x2c>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6053      	str	r3, [r2, #4]
	STK->VAL=0;
 80037ba:	4b07      	ldr	r3, [pc, #28]	@ (80037d8 <MSTK_voidStartTimer+0x2c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
	STK->CTRL|=(1<<STK_ENABLE);
 80037c0:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <MSTK_voidStartTimer+0x2c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a04      	ldr	r2, [pc, #16]	@ (80037d8 <MSTK_voidStartTimer+0x2c>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6013      	str	r3, [r2, #0]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000e010 	.word	0xe000e010

080037dc <MSTK_voidCtrlIntState>:
void MSTK_voidCtrlIntState(STK_IntState Copy_uddtIntState)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]
	STK->CTRL|=(Copy_uddtIntState<<TICKINT);
 80037e6:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <MSTK_voidCtrlIntState+0x24>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4904      	ldr	r1, [pc, #16]	@ (8003800 <MSTK_voidCtrlIntState+0x24>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	600b      	str	r3, [r1, #0]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000e010 	.word	0xe000e010

08003804 <MSTK_u8ReadFlag>:
u8 MSTK_u8ReadFlag()
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
	return GET_BIT(STK->CTRL,COUNT_FLAG);
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <MSTK_u8ReadFlag+0x1c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	b2db      	uxtb	r3, r3
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000e010 	.word	0xe000e010

08003824 <MSTK_voidDelayms>:
{
	return (STK->VAL);
}

void MSTK_voidDelayms(u32 Copy_u32Delayms)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	MSTK_voidCtrlIntState(Systick_IntDisable);
 800382c:	2000      	movs	r0, #0
 800382e:	f7ff ffd5 	bl	80037dc <MSTK_voidCtrlIntState>
	MSTK_voidStartTimer(Copy_u32Delayms*2000);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ffb5 	bl	80037ac <MSTK_voidStartTimer>
	while(MSTK_u8ReadFlag()==0);
 8003842:	bf00      	nop
 8003844:	f7ff ffde 	bl	8003804 <MSTK_u8ReadFlag>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0fa      	beq.n	8003844 <MSTK_voidDelayms+0x20>
	STK->CTRL&=~(1<<STK_ENABLE);
 800384e:	4b05      	ldr	r3, [pc, #20]	@ (8003864 <MSTK_voidDelayms+0x40>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a04      	ldr	r2, [pc, #16]	@ (8003864 <MSTK_voidDelayms+0x40>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6013      	str	r3, [r2, #0]
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	e000e010 	.word	0xe000e010

08003868 <MSTK_voidDelayus>:
void MSTK_voidDelayus(u32 Copy_u32Delayus)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	MSTK_voidCtrlIntState(Systick_IntDisable);
 8003870:	2000      	movs	r0, #0
 8003872:	f7ff ffb3 	bl	80037dc <MSTK_voidCtrlIntState>
	MSTK_voidStartTimer(Copy_u32Delayus*2);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ff96 	bl	80037ac <MSTK_voidStartTimer>
	while(MSTK_u8ReadFlag()==0);
 8003880:	bf00      	nop
 8003882:	f7ff ffbf 	bl	8003804 <MSTK_u8ReadFlag>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0fa      	beq.n	8003882 <MSTK_voidDelayus+0x1a>
	STK->CTRL&=~(1<<STK_ENABLE);
 800388c:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <MSTK_voidDelayus+0x38>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a03      	ldr	r2, [pc, #12]	@ (80038a0 <MSTK_voidDelayus+0x38>)
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	6013      	str	r3, [r2, #0]
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	e000e010 	.word	0xe000e010

080038a4 <SysTick_Handler>:
	Global_ptr=ptr;
	MSTK_voidStartTimer(Copy_u32TickTime*2);
}

void SysTick_Handler()
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
	if(Global_ptr!=NULL)
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <SysTick_Handler+0x28>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <SysTick_Handler+0x12>
	{
		Global_ptr();
 80038b0:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <SysTick_Handler+0x28>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4798      	blx	r3
	}
	if(flag==1)
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <SysTick_Handler+0x2c>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d102      	bne.n	80038c6 <SysTick_Handler+0x22>
	{
		MSTK_voidCtrlIntState(Systick_IntDisable);
 80038c0:	2000      	movs	r0, #0
 80038c2:	f7ff ff8b 	bl	80037dc <MSTK_voidCtrlIntState>
	}
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	2000a11c 	.word	0x2000a11c
 80038d0:	2000a120 	.word	0x2000a120

080038d4 <main>:
{
	flag=1;
}

int main(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
	/* Initialize system clock */
	MRCC_voidInit();
 80038d8:	f7ff fe82 	bl	80035e0 <MRCC_voidInit>

	/* Enable peripheral clocks */
	MRCC_voidEnablePeripheral(APB2_BUS, APB2_SPI1);  /* SPI1 for display */
 80038dc:	210c      	movs	r1, #12
 80038de:	2003      	movs	r0, #3
 80038e0:	f7ff fe9e 	bl	8003620 <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(AHB1_BUS, AHB1_GPIOA); /* PORTA for pins */
 80038e4:	2100      	movs	r1, #0
 80038e6:	2000      	movs	r0, #0
 80038e8:	f7ff fe9a 	bl	8003620 <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(APB2_BUS, APB2_SYSCFG);
 80038ec:	210e      	movs	r1, #14
 80038ee:	2003      	movs	r0, #3
 80038f0:	f7ff fe96 	bl	8003620 <MRCC_voidEnablePeripheral>

	/* Initialize SysTick timer */
	MSTK_voidInit();
 80038f4:	f7ff ff44 	bl	8003780 <MSTK_voidInit>

	/* Initialize SPI for display communication */
	MSPI_voidMasterInit();
 80038f8:	f7ff fede 	bl	80036b8 <MSPI_voidMasterInit>

	/* Configure SPI pins (PA4=NSS, PA5=SCK, PA6=MISO, PA7=MOSI) */
	MGPIO_voidSetPinMode(PORTA, PIN4, ALT_FUN);
 80038fc:	2202      	movs	r2, #2
 80038fe:	2104      	movs	r1, #4
 8003900:	2000      	movs	r0, #0
 8003902:	f7ff fadb 	bl	8002ebc <MGPIO_voidSetPinMode>
	MGPIO_voidSetAltFuncConfig(PORTA, PIN4, AF5);
 8003906:	2205      	movs	r2, #5
 8003908:	2104      	movs	r1, #4
 800390a:	2000      	movs	r0, #0
 800390c:	f7ff fd5c 	bl	80033c8 <MGPIO_voidSetAltFuncConfig>
	MGPIO_voidSetPinMode(PORTA, PIN5, ALT_FUN);
 8003910:	2202      	movs	r2, #2
 8003912:	2105      	movs	r1, #5
 8003914:	2000      	movs	r0, #0
 8003916:	f7ff fad1 	bl	8002ebc <MGPIO_voidSetPinMode>
	MGPIO_voidSetAltFuncConfig(PORTA, PIN5, AF5);
 800391a:	2205      	movs	r2, #5
 800391c:	2105      	movs	r1, #5
 800391e:	2000      	movs	r0, #0
 8003920:	f7ff fd52 	bl	80033c8 <MGPIO_voidSetAltFuncConfig>
	MGPIO_voidSetPinMode(PORTA, PIN6, ALT_FUN);
 8003924:	2202      	movs	r2, #2
 8003926:	2106      	movs	r1, #6
 8003928:	2000      	movs	r0, #0
 800392a:	f7ff fac7 	bl	8002ebc <MGPIO_voidSetPinMode>
	MGPIO_voidSetAltFuncConfig(PORTA, PIN6, AF5);
 800392e:	2205      	movs	r2, #5
 8003930:	2106      	movs	r1, #6
 8003932:	2000      	movs	r0, #0
 8003934:	f7ff fd48 	bl	80033c8 <MGPIO_voidSetAltFuncConfig>
	MGPIO_voidSetPinMode(PORTA, PIN7, ALT_FUN);
 8003938:	2202      	movs	r2, #2
 800393a:	2107      	movs	r1, #7
 800393c:	2000      	movs	r0, #0
 800393e:	f7ff fabd 	bl	8002ebc <MGPIO_voidSetPinMode>
	MGPIO_voidSetAltFuncConfig(PORTA, PIN7, AF5);
 8003942:	2205      	movs	r2, #5
 8003944:	2107      	movs	r1, #7
 8003946:	2000      	movs	r0, #0
 8003948:	f7ff fd3e 	bl	80033c8 <MGPIO_voidSetAltFuncConfig>

	/* Configure button pins as inputs with pull-up*/
	//UP
	MGPIO_voidSetPinMode(PORTA, PIN8, INPUT);
 800394c:	2200      	movs	r2, #0
 800394e:	2108      	movs	r1, #8
 8003950:	2000      	movs	r0, #0
 8003952:	f7ff fab3 	bl	8002ebc <MGPIO_voidSetPinMode>
	MGPIO_voidSetINPUTConfig(PORTA, PIN8, PULL_UP);
 8003956:	2201      	movs	r2, #1
 8003958:	2108      	movs	r1, #8
 800395a:	2000      	movs	r0, #0
 800395c:	f7ff fc66 	bl	800322c <MGPIO_voidSetINPUTConfig>
	//DOWN
	MGPIO_voidSetPinMode(PORTA, PIN9, INPUT);
 8003960:	2200      	movs	r2, #0
 8003962:	2109      	movs	r1, #9
 8003964:	2000      	movs	r0, #0
 8003966:	f7ff faa9 	bl	8002ebc <MGPIO_voidSetPinMode>
	MGPIO_voidSetINPUTConfig(PORTA, PIN9, PULL_UP);
 800396a:	2201      	movs	r2, #1
 800396c:	2109      	movs	r1, #9
 800396e:	2000      	movs	r0, #0
 8003970:	f7ff fc5c 	bl	800322c <MGPIO_voidSetINPUTConfig>
	//Select
	MGPIO_voidSetPinMode(PORTA, PIN10, INPUT);
 8003974:	2200      	movs	r2, #0
 8003976:	210a      	movs	r1, #10
 8003978:	2000      	movs	r0, #0
 800397a:	f7ff fa9f 	bl	8002ebc <MGPIO_voidSetPinMode>
	MGPIO_voidSetINPUTConfig(PORTA, PIN10, PULL_UP);
 800397e:	2201      	movs	r2, #1
 8003980:	210a      	movs	r1, #10
 8003982:	2000      	movs	r0, #0
 8003984:	f7ff fc52 	bl	800322c <MGPIO_voidSetINPUTConfig>



	HTFT_voidInit();
 8003988:	f7fe fbbe 	bl	8002108 <HTFT_voidInit>

	HMenu_voidInit();
 800398c:	f7fe fa46 	bl	8001e1c <HMenu_voidInit>

	while (1)
	{
		HMenu_voidPoll();
 8003990:	f7fe fa54 	bl	8001e3c <HMenu_voidPoll>
		MSTK_voidDelayus(20);
 8003994:	2014      	movs	r0, #20
 8003996:	f7ff ff67 	bl	8003868 <MSTK_voidDelayus>
		HMenu_voidPoll();
 800399a:	bf00      	nop
 800399c:	e7f8      	b.n	8003990 <main+0xbc>
	...

080039a0 <Snake_btnLeftCallback>:
static volatile u8 btnRestartPressed = 0;

/***************************************************/
/*              Interrupt Callback Functions       */
/***************************************************/
void Snake_btnLeftCallback(void) { btnLeftPressed = 1; }
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	4b03      	ldr	r3, [pc, #12]	@ (80039b4 <Snake_btnLeftCallback+0x14>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	2000a386 	.word	0x2000a386

080039b8 <Snake_btnRightCallback>:
void Snake_btnRightCallback(void) { btnRightPressed = 1; }
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	4b03      	ldr	r3, [pc, #12]	@ (80039cc <Snake_btnRightCallback+0x14>)
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	bf00      	nop
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	2000a387 	.word	0x2000a387

080039d0 <Snake_btnRestartCallback>:
void Snake_btnRestartCallback(void) { btnRestartPressed = 1; }
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4b03      	ldr	r3, [pc, #12]	@ (80039e4 <Snake_btnRestartCallback+0x14>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	bf00      	nop
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	2000a388 	.word	0x2000a388

080039e8 <Snake_voidDrawBorder>:
static void Snake_voidDrawScore(void);
static void Snake_voidGameOver(void);

/* NEW: Draw blue border */
static void Snake_voidDrawBorder(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
    u8 x, y;

    // Top and bottom borders
    for (x = 0; x < GRID_WIDTH; x++) {
 80039ee:	2300      	movs	r3, #0
 80039f0:	71fb      	strb	r3, [r7, #7]
 80039f2:	e00e      	b.n	8003a12 <Snake_voidDrawBorder+0x2a>
        Snake_voidDrawBlock(x, 0, COLOR_BLUE);                     // Top
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	221f      	movs	r2, #31
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 faca 	bl	8003f94 <Snake_voidDrawBlock>
        Snake_voidDrawBlock(x, GRID_HEIGHT - 1, COLOR_BLUE);       // Bottom
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	221f      	movs	r2, #31
 8003a04:	210e      	movs	r1, #14
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fac4 	bl	8003f94 <Snake_voidDrawBlock>
    for (x = 0; x < GRID_WIDTH; x++) {
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	71fb      	strb	r3, [r7, #7]
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	2b13      	cmp	r3, #19
 8003a16:	d9ed      	bls.n	80039f4 <Snake_voidDrawBorder+0xc>
    }

    // Left and right borders
    for (y = 0; y < GRID_HEIGHT; y++) {
 8003a18:	2300      	movs	r3, #0
 8003a1a:	71bb      	strb	r3, [r7, #6]
 8003a1c:	e00e      	b.n	8003a3c <Snake_voidDrawBorder+0x54>
        Snake_voidDrawBlock(0, y, COLOR_BLUE);                     // Left
 8003a1e:	79bb      	ldrb	r3, [r7, #6]
 8003a20:	221f      	movs	r2, #31
 8003a22:	4619      	mov	r1, r3
 8003a24:	2000      	movs	r0, #0
 8003a26:	f000 fab5 	bl	8003f94 <Snake_voidDrawBlock>
        Snake_voidDrawBlock(GRID_WIDTH - 5, y, COLOR_BLUE);        // Right
 8003a2a:	79bb      	ldrb	r3, [r7, #6]
 8003a2c:	221f      	movs	r2, #31
 8003a2e:	4619      	mov	r1, r3
 8003a30:	200f      	movs	r0, #15
 8003a32:	f000 faaf 	bl	8003f94 <Snake_voidDrawBlock>
    for (y = 0; y < GRID_HEIGHT; y++) {
 8003a36:	79bb      	ldrb	r3, [r7, #6]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	71bb      	strb	r3, [r7, #6]
 8003a3c:	79bb      	ldrb	r3, [r7, #6]
 8003a3e:	2b0e      	cmp	r3, #14
 8003a40:	d9ed      	bls.n	8003a1e <Snake_voidDrawBorder+0x36>
    }
}
 8003a42:	bf00      	nop
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <Snake_voidInit>:

/***************************************************/
/*              Public Function Implementations    */
/***************************************************/
void Snake_voidInit(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
    /* Configure EXTI for Snake game buttons */
    // LEFT button - EXTI8 (PIN10)
    MEXTI_voidSetInterruptPort(EXTI_Line8, EXTI_PORTA);
 8003a50:	2100      	movs	r1, #0
 8003a52:	2008      	movs	r0, #8
 8003a54:	f7ff f8b8 	bl	8002bc8 <MEXTI_voidSetInterruptPort>
    MEXTI_voidSetTrigger(EXTI_Line8, EXTI_Falling);
 8003a58:	2100      	movs	r1, #0
 8003a5a:	2008      	movs	r0, #8
 8003a5c:	f7ff f906 	bl	8002c6c <MEXTI_voidSetTrigger>
    MEXTI_voidCallBack(Snake_btnLeftCallback, EXTI_Line8);
 8003a60:	2108      	movs	r1, #8
 8003a62:	4833      	ldr	r0, [pc, #204]	@ (8003b30 <Snake_voidInit+0xe4>)
 8003a64:	f7ff f95e 	bl	8002d24 <MEXTI_voidCallBack>
    MEXTI_voidEnable(EXTI_Line8);
 8003a68:	2008      	movs	r0, #8
 8003a6a:	f7ff f8e7 	bl	8002c3c <MEXTI_voidEnable>

    // RIGHT button - EXTI9 (PIN9)
    MEXTI_voidSetInterruptPort(EXTI_Line9, EXTI_PORTA);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	2009      	movs	r0, #9
 8003a72:	f7ff f8a9 	bl	8002bc8 <MEXTI_voidSetInterruptPort>
    MEXTI_voidSetTrigger(EXTI_Line9, EXTI_Falling);
 8003a76:	2100      	movs	r1, #0
 8003a78:	2009      	movs	r0, #9
 8003a7a:	f7ff f8f7 	bl	8002c6c <MEXTI_voidSetTrigger>
    MEXTI_voidCallBack(Snake_btnRightCallback, EXTI_Line9);
 8003a7e:	2109      	movs	r1, #9
 8003a80:	482c      	ldr	r0, [pc, #176]	@ (8003b34 <Snake_voidInit+0xe8>)
 8003a82:	f7ff f94f 	bl	8002d24 <MEXTI_voidCallBack>
    MEXTI_voidEnable(EXTI_Line9);
 8003a86:	2009      	movs	r0, #9
 8003a88:	f7ff f8d8 	bl	8002c3c <MEXTI_voidEnable>

    // RESTART button - EXTI10 (PIN8)
    MEXTI_voidSetInterruptPort(EXTI_Line10, EXTI_PORTA);
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	200a      	movs	r0, #10
 8003a90:	f7ff f89a 	bl	8002bc8 <MEXTI_voidSetInterruptPort>
    MEXTI_voidSetTrigger(EXTI_Line10, EXTI_Falling);
 8003a94:	2100      	movs	r1, #0
 8003a96:	200a      	movs	r0, #10
 8003a98:	f7ff f8e8 	bl	8002c6c <MEXTI_voidSetTrigger>
    MEXTI_voidCallBack(Snake_btnRestartCallback, EXTI_Line10);
 8003a9c:	210a      	movs	r1, #10
 8003a9e:	4826      	ldr	r0, [pc, #152]	@ (8003b38 <Snake_voidInit+0xec>)
 8003aa0:	f7ff f940 	bl	8002d24 <MEXTI_voidCallBack>
    MEXTI_voidEnable(EXTI_Line10);
 8003aa4:	200a      	movs	r0, #10
 8003aa6:	f7ff f8c9 	bl	8002c3c <MEXTI_voidEnable>

    /* Enable NVIC interrupts */
    MNVIC_voidEnable(40); // EXTI15_10 (covers EXTI10)
 8003aaa:	2028      	movs	r0, #40	@ 0x28
 8003aac:	f7ff fd78 	bl	80035a0 <MNVIC_voidEnable>
    MNVIC_voidEnable(23); // EXTI9_5 (covers EXTI8, EXTI9)
 8003ab0:	2017      	movs	r0, #23
 8003ab2:	f7ff fd75 	bl	80035a0 <MNVIC_voidEnable>

    /* Clear the game state */
    game.length = 3;
 8003ab6:	4b21      	ldr	r3, [pc, #132]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003ab8:	2203      	movs	r2, #3
 8003aba:	f8a3 2258 	strh.w	r2, [r3, #600]	@ 0x258
    game.direction = DIR_RIGHT;
 8003abe:	4b1f      	ldr	r3, [pc, #124]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	f883 225a 	strb.w	r2, [r3, #602]	@ 0x25a
    game.next_direction = DIR_RIGHT;
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003ac8:	2203      	movs	r2, #3
 8003aca:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
    game.score = 0;
 8003ace:	4b1b      	ldr	r3, [pc, #108]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f8a3 225e 	strh.w	r2, [r3, #606]	@ 0x25e
    game.game_over = 0;
 8003ad6:	4b19      	ldr	r3, [pc, #100]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    game.food_eaten = 0;
 8003ade:	4b17      	ldr	r3, [pc, #92]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

    /* Initialize snake in the middle of the screen */
    game.snake[0].x = GRID_WIDTH / 2;
 8003ae6:	4b15      	ldr	r3, [pc, #84]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003ae8:	220a      	movs	r2, #10
 8003aea:	701a      	strb	r2, [r3, #0]
    game.snake[0].y = GRID_HEIGHT / 2;
 8003aec:	4b13      	ldr	r3, [pc, #76]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003aee:	2207      	movs	r2, #7
 8003af0:	705a      	strb	r2, [r3, #1]
    game.snake[1].x = game.snake[0].x - 1;
 8003af2:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	4b10      	ldr	r3, [pc, #64]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003afc:	709a      	strb	r2, [r3, #2]
    game.snake[1].y = game.snake[0].y;
 8003afe:	4b0f      	ldr	r3, [pc, #60]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003b00:	785a      	ldrb	r2, [r3, #1]
 8003b02:	4b0e      	ldr	r3, [pc, #56]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003b04:	70da      	strb	r2, [r3, #3]
    game.snake[2].x = game.snake[0].x - 2;
 8003b06:	4b0d      	ldr	r3, [pc, #52]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	3b02      	subs	r3, #2
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003b10:	711a      	strb	r2, [r3, #4]
    game.snake[2].y = game.snake[0].y;
 8003b12:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003b14:	785a      	ldrb	r2, [r3, #1]
 8003b16:	4b09      	ldr	r3, [pc, #36]	@ (8003b3c <Snake_voidInit+0xf0>)
 8003b18:	715a      	strb	r2, [r3, #5]

    /* Clear screen */
    Snake_voidFillScreen(COLOR_BLACK);
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f000 f986 	bl	8003e2c <Snake_voidFillScreen>

    /* Draw border */
    Snake_voidDrawBorder();
 8003b20:	f7ff ff62 	bl	80039e8 <Snake_voidDrawBorder>

    /* Generate first food */
    Snake_voidGenerateFood();
 8003b24:	f000 fa54 	bl	8003fd0 <Snake_voidGenerateFood>

    /* Draw initial game state */
    Snake_voidDrawInitialState();
 8003b28:	f000 fa00 	bl	8003f2c <Snake_voidDrawInitialState>
}
 8003b2c:	bf00      	nop
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	080039a1 	.word	0x080039a1
 8003b34:	080039b9 	.word	0x080039b9
 8003b38:	080039d1 	.word	0x080039d1
 8003b3c:	2000a124 	.word	0x2000a124

08003b40 <Snake_voidGameLoop>:

void Snake_voidGameLoop(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
    /* Initialize TFT display */
    HTFT_voidInit();
 8003b44:	f7fe fae0 	bl	8002108 <HTFT_voidInit>

    /* Initialize random seed */
    srand(1234);
 8003b48:	f240 40d2 	movw	r0, #1234	@ 0x4d2
 8003b4c:	f000 fd68 	bl	8004620 <srand>

    /* Initialize game */
    Snake_voidInit();
 8003b50:	f7ff ff7c 	bl	8003a4c <Snake_voidInit>

    /* Main game loop */
    while (1) {
        if (!game.game_over) {
 8003b54:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <Snake_voidGameLoop+0x4c>)
 8003b56:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d107      	bne.n	8003b6e <Snake_voidGameLoop+0x2e>
            Snake_voidUpdate();
 8003b5e:	f000 f81b 	bl	8003b98 <Snake_voidUpdate>
            MSTK_voidDelayms(GAME_SPEED);
 8003b62:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <Snake_voidGameLoop+0x50>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fe5c 	bl	8003824 <MSTK_voidDelayms>
 8003b6c:	e7f2      	b.n	8003b54 <Snake_voidGameLoop+0x14>
        } else {
            /* In game over state, wait for restart */
            if (btnRestartPressed) {
 8003b6e:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <Snake_voidGameLoop+0x54>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <Snake_voidGameLoop+0x42>
                btnRestartPressed = 0; // Clear flag
 8003b78:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <Snake_voidGameLoop+0x54>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
                Snake_voidInit(); // Restart the game
 8003b7e:	f7ff ff65 	bl	8003a4c <Snake_voidInit>
            }
            MSTK_voidDelayms(20);
 8003b82:	2014      	movs	r0, #20
 8003b84:	f7ff fe4e 	bl	8003824 <MSTK_voidDelayms>
        if (!game.game_over) {
 8003b88:	e7e4      	b.n	8003b54 <Snake_voidGameLoop+0x14>
 8003b8a:	bf00      	nop
 8003b8c:	2000a124 	.word	0x2000a124
 8003b90:	20000004 	.word	0x20000004
 8003b94:	2000a388 	.word	0x2000a388

08003b98 <Snake_voidUpdate>:
        }
    }
}

void Snake_voidUpdate(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
    if (game.game_over) {
 8003b9e:	4b68      	ldr	r3, [pc, #416]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003ba0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 80c6 	bne.w	8003d36 <Snake_voidUpdate+0x19e>
        return;
    }

    /* Handle input using interrupt flags */
    Snake_voidHandleInput();
 8003baa:	f000 f8cb 	bl	8003d44 <Snake_voidHandleInput>

    /* Update direction */
    game.direction = game.next_direction;
 8003bae:	4b64      	ldr	r3, [pc, #400]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003bb0:	f893 225b 	ldrb.w	r2, [r3, #603]	@ 0x25b
 8003bb4:	4b62      	ldr	r3, [pc, #392]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003bb6:	f883 225a 	strb.w	r2, [r3, #602]	@ 0x25a

    /* Calculate new head position */
    SnakeSegment_t new_head = game.snake[0];
 8003bba:	4b61      	ldr	r3, [pc, #388]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	803b      	strh	r3, [r7, #0]

    switch (game.direction) {
 8003bc0:	4b5f      	ldr	r3, [pc, #380]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003bc2:	f893 325a 	ldrb.w	r3, [r3, #602]	@ 0x25a
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d81e      	bhi.n	8003c08 <Snake_voidUpdate+0x70>
 8003bca:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd0 <Snake_voidUpdate+0x38>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003beb 	.word	0x08003beb
 8003bd8:	08003bf5 	.word	0x08003bf5
 8003bdc:	08003bff 	.word	0x08003bff
        case DIR_UP:    new_head.y--; break;
 8003be0:	787b      	ldrb	r3, [r7, #1]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	707b      	strb	r3, [r7, #1]
 8003be8:	e00e      	b.n	8003c08 <Snake_voidUpdate+0x70>
        case DIR_DOWN:  new_head.y++; break;
 8003bea:	787b      	ldrb	r3, [r7, #1]
 8003bec:	3301      	adds	r3, #1
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	707b      	strb	r3, [r7, #1]
 8003bf2:	e009      	b.n	8003c08 <Snake_voidUpdate+0x70>
        case DIR_LEFT:  new_head.x--; break;
 8003bf4:	783b      	ldrb	r3, [r7, #0]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	703b      	strb	r3, [r7, #0]
 8003bfc:	e004      	b.n	8003c08 <Snake_voidUpdate+0x70>
        case DIR_RIGHT: new_head.x++; break;
 8003bfe:	783b      	ldrb	r3, [r7, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	703b      	strb	r3, [r7, #0]
 8003c06:	bf00      	nop
    }

    /* Check wall collision (with blue border as walls) */
    if (new_head.x == 0 || new_head.x == GRID_WIDTH - 5 ||
 8003c08:	783b      	ldrb	r3, [r7, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <Snake_voidUpdate+0x88>
 8003c0e:	783b      	ldrb	r3, [r7, #0]
 8003c10:	2b0f      	cmp	r3, #15
 8003c12:	d005      	beq.n	8003c20 <Snake_voidUpdate+0x88>
        new_head.y == 0 || new_head.y == GRID_HEIGHT - 1) {
 8003c14:	787b      	ldrb	r3, [r7, #1]
    if (new_head.x == 0 || new_head.x == GRID_WIDTH - 5 ||
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <Snake_voidUpdate+0x88>
        new_head.y == 0 || new_head.y == GRID_HEIGHT - 1) {
 8003c1a:	787b      	ldrb	r3, [r7, #1]
 8003c1c:	2b0e      	cmp	r3, #14
 8003c1e:	d102      	bne.n	8003c26 <Snake_voidUpdate+0x8e>
        Snake_voidGameOver();
 8003c20:	f000 fa94 	bl	800414c <Snake_voidGameOver>
        return;
 8003c24:	e088      	b.n	8003d38 <Snake_voidUpdate+0x1a0>
    }

    /* Check self collision */
    if (Snake_u8CheckCollision(new_head.x, new_head.y)) {
 8003c26:	783b      	ldrb	r3, [r7, #0]
 8003c28:	787a      	ldrb	r2, [r7, #1]
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fa29 	bl	8004084 <Snake_u8CheckCollision>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <Snake_voidUpdate+0xa6>
        Snake_voidGameOver();
 8003c38:	f000 fa88 	bl	800414c <Snake_voidGameOver>
        return;
 8003c3c:	e07c      	b.n	8003d38 <Snake_voidUpdate+0x1a0>
    }

    /* Check food collision */
    if (new_head.x == game.food.x && new_head.y == game.food.y) {
 8003c3e:	783a      	ldrb	r2, [r7, #0]
 8003c40:	4b3f      	ldr	r3, [pc, #252]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003c42:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d11b      	bne.n	8003c82 <Snake_voidUpdate+0xea>
 8003c4a:	787a      	ldrb	r2, [r7, #1]
 8003c4c:	4b3c      	ldr	r3, [pc, #240]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003c4e:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d115      	bne.n	8003c82 <Snake_voidUpdate+0xea>
        game.food_eaten = 1;
 8003c56:	4b3a      	ldr	r3, [pc, #232]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
        game.score += 10;
 8003c5e:	4b38      	ldr	r3, [pc, #224]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003c60:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8003c64:	330a      	adds	r3, #10
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	4b35      	ldr	r3, [pc, #212]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003c6a:	f8a3 225e 	strh.w	r2, [r3, #606]	@ 0x25e
        game.length++;
 8003c6e:	4b34      	ldr	r3, [pc, #208]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003c70:	f8b3 3258 	ldrh.w	r3, [r3, #600]	@ 0x258
 8003c74:	3301      	adds	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	4b31      	ldr	r3, [pc, #196]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003c7a:	f8a3 2258 	strh.w	r2, [r3, #600]	@ 0x258
        Snake_voidGenerateFood();
 8003c7e:	f000 f9a7 	bl	8003fd0 <Snake_voidGenerateFood>
    }

    /* Move snake body */
    if (!game.food_eaten) {
 8003c82:	4b2f      	ldr	r3, [pc, #188]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003c84:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d128      	bne.n	8003cde <Snake_voidUpdate+0x146>
        /* Remove tail */
        Snake_voidDrawBlock(game.snake[game.length - 1].x,
 8003c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003c8e:	f8b3 3258 	ldrh.w	r3, [r3, #600]	@ 0x258
 8003c92:	3b01      	subs	r3, #1
 8003c94:	4a2a      	ldr	r2, [pc, #168]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003c96:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
                            game.snake[game.length - 1].y, COLOR_BLACK);
 8003c9a:	4b29      	ldr	r3, [pc, #164]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003c9c:	f8b3 3258 	ldrh.w	r3, [r3, #600]	@ 0x258
 8003ca0:	3b01      	subs	r3, #1
        Snake_voidDrawBlock(game.snake[game.length - 1].x,
 8003ca2:	4a27      	ldr	r2, [pc, #156]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	4413      	add	r3, r2
 8003ca8:	785b      	ldrb	r3, [r3, #1]
 8003caa:	2200      	movs	r2, #0
 8003cac:	4619      	mov	r1, r3
 8003cae:	f000 f971 	bl	8003f94 <Snake_voidDrawBlock>

        /* Shift body */
        u16 i;
        for (i = game.length - 1; i > 0; i--) {
 8003cb2:	4b23      	ldr	r3, [pc, #140]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003cb4:	f8b3 3258 	ldrh.w	r3, [r3, #600]	@ 0x258
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	80fb      	strh	r3, [r7, #6]
 8003cbc:	e00b      	b.n	8003cd6 <Snake_voidUpdate+0x13e>
            game.snake[i] = game.snake[i - 1];
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	1e5a      	subs	r2, r3, #1
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	491e      	ldr	r1, [pc, #120]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003cc6:	481e      	ldr	r0, [pc, #120]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003cc8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8003ccc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (i = game.length - 1; i > 0; i--) {
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	80fb      	strh	r3, [r7, #6]
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <Snake_voidUpdate+0x126>
 8003cdc:	e018      	b.n	8003d10 <Snake_voidUpdate+0x178>
        }
    } else {
        /* Shift body without removing tail */
        u16 i;
        for (i = game.length - 1; i > 0; i--) {
 8003cde:	4b18      	ldr	r3, [pc, #96]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003ce0:	f8b3 3258 	ldrh.w	r3, [r3, #600]	@ 0x258
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	80bb      	strh	r3, [r7, #4]
 8003ce8:	e00b      	b.n	8003d02 <Snake_voidUpdate+0x16a>
            game.snake[i] = game.snake[i - 1];
 8003cea:	88bb      	ldrh	r3, [r7, #4]
 8003cec:	1e5a      	subs	r2, r3, #1
 8003cee:	88bb      	ldrh	r3, [r7, #4]
 8003cf0:	4913      	ldr	r1, [pc, #76]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003cf2:	4813      	ldr	r0, [pc, #76]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003cf4:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8003cf8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (i = game.length - 1; i > 0; i--) {
 8003cfc:	88bb      	ldrh	r3, [r7, #4]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	80bb      	strh	r3, [r7, #4]
 8003d02:	88bb      	ldrh	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f0      	bne.n	8003cea <Snake_voidUpdate+0x152>
        }
        game.food_eaten = 0;
 8003d08:	4b0d      	ldr	r3, [pc, #52]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    }

    /* Add new head */
    game.snake[0] = new_head;
 8003d10:	4a0b      	ldr	r2, [pc, #44]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003d12:	883b      	ldrh	r3, [r7, #0]
 8003d14:	8013      	strh	r3, [r2, #0]

    /* Draw border again to prevent overwriting */
    Snake_voidDrawBorder();
 8003d16:	f7ff fe67 	bl	80039e8 <Snake_voidDrawBorder>

    /* Draw new head */
    Snake_voidDrawBlock(game.snake[0].x, game.snake[0].y, COLOR_GREEN);
 8003d1a:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	4a08      	ldr	r2, [pc, #32]	@ (8003d40 <Snake_voidUpdate+0x1a8>)
 8003d20:	7851      	ldrb	r1, [r2, #1]
 8003d22:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f934 	bl	8003f94 <Snake_voidDrawBlock>

    /* Update score display */
    Snake_voidDrawScore();
 8003d2c:	f000 f9d8 	bl	80040e0 <Snake_voidDrawScore>

    /* Update display */
    Snake_voidUpdateDisplay();
 8003d30:	f000 f8f2 	bl	8003f18 <Snake_voidUpdateDisplay>
 8003d34:	e000      	b.n	8003d38 <Snake_voidUpdate+0x1a0>
        return;
 8003d36:	bf00      	nop
}
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000a124 	.word	0x2000a124

08003d44 <Snake_voidHandleInput>:
u16 Snake_u16GetScore(void) { return game.score; }

u8 Snake_u8IsGameOver(void) { return game.game_over; }

void Snake_voidHandleInput(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
    /* Check button flags set by interrupts */
    /* BUTTON 1: Turn Left (counter-clockwise) */
    if (btnLeftPressed) {
 8003d48:	4b34      	ldr	r3, [pc, #208]	@ (8003e1c <Snake_voidHandleInput+0xd8>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d026      	beq.n	8003da0 <Snake_voidHandleInput+0x5c>
        btnLeftPressed = 0; // Clear flag
 8003d52:	4b32      	ldr	r3, [pc, #200]	@ (8003e1c <Snake_voidHandleInput+0xd8>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]
        switch (game.direction) {
 8003d58:	4b31      	ldr	r3, [pc, #196]	@ (8003e20 <Snake_voidHandleInput+0xdc>)
 8003d5a:	f893 325a 	ldrb.w	r3, [r3, #602]	@ 0x25a
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d85a      	bhi.n	8003e18 <Snake_voidHandleInput+0xd4>
 8003d62:	a201      	add	r2, pc, #4	@ (adr r2, 8003d68 <Snake_voidHandleInput+0x24>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003d79 	.word	0x08003d79
 8003d6c:	08003d8d 	.word	0x08003d8d
 8003d70:	08003d83 	.word	0x08003d83
 8003d74:	08003d97 	.word	0x08003d97
            case DIR_UP:    game.next_direction = DIR_LEFT;  break;
 8003d78:	4b29      	ldr	r3, [pc, #164]	@ (8003e20 <Snake_voidHandleInput+0xdc>)
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
 8003d80:	e04a      	b.n	8003e18 <Snake_voidHandleInput+0xd4>
            case DIR_LEFT:  game.next_direction = DIR_DOWN;  break;
 8003d82:	4b27      	ldr	r3, [pc, #156]	@ (8003e20 <Snake_voidHandleInput+0xdc>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
 8003d8a:	e045      	b.n	8003e18 <Snake_voidHandleInput+0xd4>
            case DIR_DOWN:  game.next_direction = DIR_RIGHT; break;
 8003d8c:	4b24      	ldr	r3, [pc, #144]	@ (8003e20 <Snake_voidHandleInput+0xdc>)
 8003d8e:	2203      	movs	r2, #3
 8003d90:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
 8003d94:	e040      	b.n	8003e18 <Snake_voidHandleInput+0xd4>
            case DIR_RIGHT: game.next_direction = DIR_UP;    break;
 8003d96:	4b22      	ldr	r3, [pc, #136]	@ (8003e20 <Snake_voidHandleInput+0xdc>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
 8003d9e:	e03b      	b.n	8003e18 <Snake_voidHandleInput+0xd4>
        }
    }
    /* BUTTON 2: Turn Right (clockwise) */
    else if (btnRightPressed) {
 8003da0:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <Snake_voidHandleInput+0xe0>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d026      	beq.n	8003df8 <Snake_voidHandleInput+0xb4>
        btnRightPressed = 0; // Clear flag
 8003daa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <Snake_voidHandleInput+0xe0>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
        switch (game.direction) {
 8003db0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e20 <Snake_voidHandleInput+0xdc>)
 8003db2:	f893 325a 	ldrb.w	r3, [r3, #602]	@ 0x25a
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d82e      	bhi.n	8003e18 <Snake_voidHandleInput+0xd4>
 8003dba:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc0 <Snake_voidHandleInput+0x7c>)
 8003dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc0:	08003dd1 	.word	0x08003dd1
 8003dc4:	08003de5 	.word	0x08003de5
 8003dc8:	08003def 	.word	0x08003def
 8003dcc:	08003ddb 	.word	0x08003ddb
            case DIR_UP:    game.next_direction = DIR_RIGHT; break;
 8003dd0:	4b13      	ldr	r3, [pc, #76]	@ (8003e20 <Snake_voidHandleInput+0xdc>)
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
 8003dd8:	e01e      	b.n	8003e18 <Snake_voidHandleInput+0xd4>
            case DIR_RIGHT: game.next_direction = DIR_DOWN;  break;
 8003dda:	4b11      	ldr	r3, [pc, #68]	@ (8003e20 <Snake_voidHandleInput+0xdc>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
 8003de2:	e019      	b.n	8003e18 <Snake_voidHandleInput+0xd4>
            case DIR_DOWN:  game.next_direction = DIR_LEFT;  break;
 8003de4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e20 <Snake_voidHandleInput+0xdc>)
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
 8003dec:	e014      	b.n	8003e18 <Snake_voidHandleInput+0xd4>
            case DIR_LEFT:  game.next_direction = DIR_UP;    break;
 8003dee:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <Snake_voidHandleInput+0xdc>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
 8003df6:	e00f      	b.n	8003e18 <Snake_voidHandleInput+0xd4>
        }
    }
    /* BUTTON 3: Restart */
    else if (btnRestartPressed && game.game_over) {
 8003df8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e28 <Snake_voidHandleInput+0xe4>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <Snake_voidHandleInput+0xd4>
 8003e02:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <Snake_voidHandleInput+0xdc>)
 8003e04:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <Snake_voidHandleInput+0xd4>
        btnRestartPressed = 0; // Clear flag
 8003e0c:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <Snake_voidHandleInput+0xe4>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
        Snake_voidInit(); // Restart the game
 8003e12:	f7ff fe1b 	bl	8003a4c <Snake_voidInit>
    }
}
 8003e16:	e7ff      	b.n	8003e18 <Snake_voidHandleInput+0xd4>
 8003e18:	bf00      	nop
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	2000a386 	.word	0x2000a386
 8003e20:	2000a124 	.word	0x2000a124
 8003e24:	2000a387 	.word	0x2000a387
 8003e28:	2000a388 	.word	0x2000a388

08003e2c <Snake_voidFillScreen>:

/***************************************************/
/*              Private Function Implementations   */
/***************************************************/
static void Snake_voidFillScreen(u16 color)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	80fb      	strh	r3, [r7, #6]
    u32 i;
    for (i = 0; i < (DISPLAY_WIDTH * DISPLAY_HEIGHT); i++) {
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	e007      	b.n	8003e4c <Snake_voidFillScreen+0x20>
        GlobalFrameBuffer[i] = color;
 8003e3c:	4909      	ldr	r1, [pc, #36]	@ (8003e64 <Snake_voidFillScreen+0x38>)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	88fa      	ldrh	r2, [r7, #6]
 8003e42:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (i = 0; i < (DISPLAY_WIDTH * DISPLAY_HEIGHT); i++) {
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e52:	d3f3      	bcc.n	8003e3c <Snake_voidFillScreen+0x10>
    }
    HTFT_voidDisplay(GlobalFrameBuffer);
 8003e54:	4803      	ldr	r0, [pc, #12]	@ (8003e64 <Snake_voidFillScreen+0x38>)
 8003e56:	f7fe f9ce 	bl	80021f6 <HTFT_voidDisplay>
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000080 	.word	0x20000080

08003e68 <Snake_voidDrawPixel>:

static void Snake_voidDrawPixel(u16 x, u16 y, u16 color)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	80fb      	strh	r3, [r7, #6]
 8003e72:	460b      	mov	r3, r1
 8003e74:	80bb      	strh	r3, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	807b      	strh	r3, [r7, #2]
    if (x < DISPLAY_WIDTH && y < DISPLAY_HEIGHT) {
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e7e:	d80a      	bhi.n	8003e96 <Snake_voidDrawPixel+0x2e>
 8003e80:	88bb      	ldrh	r3, [r7, #4]
 8003e82:	2b9f      	cmp	r3, #159	@ 0x9f
 8003e84:	d807      	bhi.n	8003e96 <Snake_voidDrawPixel+0x2e>
        GlobalFrameBuffer[y * DISPLAY_WIDTH + x] = color;
 8003e86:	88bb      	ldrh	r3, [r7, #4]
 8003e88:	01da      	lsls	r2, r3, #7
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	4905      	ldr	r1, [pc, #20]	@ (8003ea4 <Snake_voidDrawPixel+0x3c>)
 8003e90:	887a      	ldrh	r2, [r7, #2]
 8003e92:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000080 	.word	0x20000080

08003ea8 <Snake_voidDrawRect>:

static void Snake_voidDrawRect(u16 x, u16 y, u16 w, u16 h, u16 color)
{
 8003ea8:	b590      	push	{r4, r7, lr}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	80fb      	strh	r3, [r7, #6]
 8003eba:	4603      	mov	r3, r0
 8003ebc:	80bb      	strh	r3, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	807b      	strh	r3, [r7, #2]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	803b      	strh	r3, [r7, #0]
    u16 i, j;
    for (j = y; j < y + h && j < DISPLAY_HEIGHT; j++) {
 8003ec6:	88bb      	ldrh	r3, [r7, #4]
 8003ec8:	81bb      	strh	r3, [r7, #12]
 8003eca:	e017      	b.n	8003efc <Snake_voidDrawRect+0x54>
        for (i = x; i < x + w && i < DISPLAY_WIDTH; i++) {
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	81fb      	strh	r3, [r7, #14]
 8003ed0:	e008      	b.n	8003ee4 <Snake_voidDrawRect+0x3c>
            Snake_voidDrawPixel(i, j, color);
 8003ed2:	8c3a      	ldrh	r2, [r7, #32]
 8003ed4:	89b9      	ldrh	r1, [r7, #12]
 8003ed6:	89fb      	ldrh	r3, [r7, #14]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ffc5 	bl	8003e68 <Snake_voidDrawPixel>
        for (i = x; i < x + w && i < DISPLAY_WIDTH; i++) {
 8003ede:	89fb      	ldrh	r3, [r7, #14]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	81fb      	strh	r3, [r7, #14]
 8003ee4:	89fa      	ldrh	r2, [r7, #14]
 8003ee6:	88f9      	ldrh	r1, [r7, #6]
 8003ee8:	887b      	ldrh	r3, [r7, #2]
 8003eea:	440b      	add	r3, r1
 8003eec:	429a      	cmp	r2, r3
 8003eee:	da02      	bge.n	8003ef6 <Snake_voidDrawRect+0x4e>
 8003ef0:	89fb      	ldrh	r3, [r7, #14]
 8003ef2:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ef4:	d9ed      	bls.n	8003ed2 <Snake_voidDrawRect+0x2a>
    for (j = y; j < y + h && j < DISPLAY_HEIGHT; j++) {
 8003ef6:	89bb      	ldrh	r3, [r7, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	81bb      	strh	r3, [r7, #12]
 8003efc:	89ba      	ldrh	r2, [r7, #12]
 8003efe:	88b9      	ldrh	r1, [r7, #4]
 8003f00:	883b      	ldrh	r3, [r7, #0]
 8003f02:	440b      	add	r3, r1
 8003f04:	429a      	cmp	r2, r3
 8003f06:	da02      	bge.n	8003f0e <Snake_voidDrawRect+0x66>
 8003f08:	89bb      	ldrh	r3, [r7, #12]
 8003f0a:	2b9f      	cmp	r3, #159	@ 0x9f
 8003f0c:	d9de      	bls.n	8003ecc <Snake_voidDrawRect+0x24>
        }
    }
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd90      	pop	{r4, r7, pc}
	...

08003f18 <Snake_voidUpdateDisplay>:

static void Snake_voidUpdateDisplay(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
    HTFT_voidDisplay(GlobalFrameBuffer);
 8003f1c:	4802      	ldr	r0, [pc, #8]	@ (8003f28 <Snake_voidUpdateDisplay+0x10>)
 8003f1e:	f7fe f96a 	bl	80021f6 <HTFT_voidDisplay>
}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000080 	.word	0x20000080

08003f2c <Snake_voidDrawInitialState>:

static void Snake_voidDrawInitialState(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
    u16 i;

    /* Draw border */
    Snake_voidDrawBorder();
 8003f32:	f7ff fd59 	bl	80039e8 <Snake_voidDrawBorder>

    /* Draw snake */
    for (i = 0; i < game.length; i++) {
 8003f36:	2300      	movs	r3, #0
 8003f38:	80fb      	strh	r3, [r7, #6]
 8003f3a:	e010      	b.n	8003f5e <Snake_voidDrawInitialState+0x32>
        Snake_voidDrawBlock(game.snake[i].x, game.snake[i].y, COLOR_GREEN);
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	4a14      	ldr	r2, [pc, #80]	@ (8003f90 <Snake_voidDrawInitialState+0x64>)
 8003f40:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	4a12      	ldr	r2, [pc, #72]	@ (8003f90 <Snake_voidDrawInitialState+0x64>)
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	785b      	ldrb	r3, [r3, #1]
 8003f4e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003f52:	4619      	mov	r1, r3
 8003f54:	f000 f81e 	bl	8003f94 <Snake_voidDrawBlock>
    for (i = 0; i < game.length; i++) {
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	80fb      	strh	r3, [r7, #6]
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f90 <Snake_voidDrawInitialState+0x64>)
 8003f60:	f8b3 3258 	ldrh.w	r3, [r3, #600]	@ 0x258
 8003f64:	88fa      	ldrh	r2, [r7, #6]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d3e8      	bcc.n	8003f3c <Snake_voidDrawInitialState+0x10>
    }

    /* Draw food */
    Snake_voidDrawBlock(game.food.x, game.food.y, COLOR_RED);
 8003f6a:	4b09      	ldr	r3, [pc, #36]	@ (8003f90 <Snake_voidDrawInitialState+0x64>)
 8003f6c:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8003f70:	4a07      	ldr	r2, [pc, #28]	@ (8003f90 <Snake_voidDrawInitialState+0x64>)
 8003f72:	f892 125d 	ldrb.w	r1, [r2, #605]	@ 0x25d
 8003f76:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f80a 	bl	8003f94 <Snake_voidDrawBlock>

    /* Draw score */
    Snake_voidDrawScore();
 8003f80:	f000 f8ae 	bl	80040e0 <Snake_voidDrawScore>

    /* Update display */
    Snake_voidUpdateDisplay();
 8003f84:	f7ff ffc8 	bl	8003f18 <Snake_voidUpdateDisplay>
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	2000a124 	.word	0x2000a124

08003f94 <Snake_voidDrawBlock>:

static void Snake_voidDrawBlock(u8 x, u8 y, u16 color)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	71fb      	strb	r3, [r7, #7]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	71bb      	strb	r3, [r7, #6]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80bb      	strh	r3, [r7, #4]
    u16 pixel_x = x * BLOCK_SIZE;
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	81fb      	strh	r3, [r7, #14]
    u16 pixel_y = y * BLOCK_SIZE;
 8003fae:	79bb      	ldrb	r3, [r7, #6]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	81bb      	strh	r3, [r7, #12]

    /* Draw filled rectangle */
    Snake_voidDrawRect(pixel_x, pixel_y, BLOCK_SIZE - 1, BLOCK_SIZE - 1, color);
 8003fb6:	89b9      	ldrh	r1, [r7, #12]
 8003fb8:	89f8      	ldrh	r0, [r7, #14]
 8003fba:	88bb      	ldrh	r3, [r7, #4]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	2307      	movs	r3, #7
 8003fc0:	2207      	movs	r2, #7
 8003fc2:	f7ff ff71 	bl	8003ea8 <Snake_voidDrawRect>
}
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <Snake_voidGenerateFood>:

static void Snake_voidGenerateFood(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
    u8 valid_position = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	71fb      	strb	r3, [r7, #7]

    while (!valid_position) {
 8003fda:	e03a      	b.n	8004052 <Snake_voidGenerateFood+0x82>
        game.food.x = (rand() % (GRID_WIDTH - 6)) + 1;   // avoid border
 8003fdc:	f000 fb4e 	bl	800467c <rand>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	4b25      	ldr	r3, [pc, #148]	@ (8004078 <Snake_voidGenerateFood+0xa8>)
 8003fe4:	fb83 1302 	smull	r1, r3, r3, r2
 8003fe8:	4413      	add	r3, r2
 8003fea:	10d9      	asrs	r1, r3, #3
 8003fec:	17d3      	asrs	r3, r2, #31
 8003fee:	1ac9      	subs	r1, r1, r3
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	1a5b      	subs	r3, r3, r1
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	1ad1      	subs	r1, r2, r3
 8003ffa:	b2cb      	uxtb	r3, r1
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	4b1e      	ldr	r3, [pc, #120]	@ (800407c <Snake_voidGenerateFood+0xac>)
 8004002:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
        game.food.y = (rand() % (GRID_HEIGHT - 2)) + 1;  // avoid border
 8004006:	f000 fb39 	bl	800467c <rand>
 800400a:	4601      	mov	r1, r0
 800400c:	4b1c      	ldr	r3, [pc, #112]	@ (8004080 <Snake_voidGenerateFood+0xb0>)
 800400e:	fb83 2301 	smull	r2, r3, r3, r1
 8004012:	109a      	asrs	r2, r3, #2
 8004014:	17cb      	asrs	r3, r1, #31
 8004016:	1ad2      	subs	r2, r2, r3
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	1aca      	subs	r2, r1, r3
 8004024:	b2d3      	uxtb	r3, r2
 8004026:	3301      	adds	r3, #1
 8004028:	b2da      	uxtb	r2, r3
 800402a:	4b14      	ldr	r3, [pc, #80]	@ (800407c <Snake_voidGenerateFood+0xac>)
 800402c:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d

        /* Check if food position collides with snake */
        valid_position = !Snake_u8CheckCollision(game.food.x, game.food.y);
 8004030:	4b12      	ldr	r3, [pc, #72]	@ (800407c <Snake_voidGenerateFood+0xac>)
 8004032:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8004036:	4a11      	ldr	r2, [pc, #68]	@ (800407c <Snake_voidGenerateFood+0xac>)
 8004038:	f892 225d 	ldrb.w	r2, [r2, #605]	@ 0x25d
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f820 	bl	8004084 <Snake_u8CheckCollision>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	71fb      	strb	r3, [r7, #7]
    while (!valid_position) {
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0c1      	beq.n	8003fdc <Snake_voidGenerateFood+0xc>
    }

    /* Draw the food */
    Snake_voidDrawBlock(game.food.x, game.food.y, COLOR_RED);
 8004058:	4b08      	ldr	r3, [pc, #32]	@ (800407c <Snake_voidGenerateFood+0xac>)
 800405a:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 800405e:	4a07      	ldr	r2, [pc, #28]	@ (800407c <Snake_voidGenerateFood+0xac>)
 8004060:	f892 125d 	ldrb.w	r1, [r2, #605]	@ 0x25d
 8004064:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ff93 	bl	8003f94 <Snake_voidDrawBlock>
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	92492493 	.word	0x92492493
 800407c:	2000a124 	.word	0x2000a124
 8004080:	4ec4ec4f 	.word	0x4ec4ec4f

08004084 <Snake_u8CheckCollision>:

static u8 Snake_u8CheckCollision(u8 x, u8 y)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	460a      	mov	r2, r1
 800408e:	71fb      	strb	r3, [r7, #7]
 8004090:	4613      	mov	r3, r2
 8004092:	71bb      	strb	r3, [r7, #6]
    u16 i;
    for (i = 0; i < game.length; i++) {
 8004094:	2300      	movs	r3, #0
 8004096:	81fb      	strh	r3, [r7, #14]
 8004098:	e013      	b.n	80040c2 <Snake_u8CheckCollision+0x3e>
        if (game.snake[i].x == x && game.snake[i].y == y) {
 800409a:	89fb      	ldrh	r3, [r7, #14]
 800409c:	4a0f      	ldr	r2, [pc, #60]	@ (80040dc <Snake_u8CheckCollision+0x58>)
 800409e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80040a2:	79fa      	ldrb	r2, [r7, #7]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d109      	bne.n	80040bc <Snake_u8CheckCollision+0x38>
 80040a8:	89fb      	ldrh	r3, [r7, #14]
 80040aa:	4a0c      	ldr	r2, [pc, #48]	@ (80040dc <Snake_u8CheckCollision+0x58>)
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4413      	add	r3, r2
 80040b0:	785b      	ldrb	r3, [r3, #1]
 80040b2:	79ba      	ldrb	r2, [r7, #6]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d101      	bne.n	80040bc <Snake_u8CheckCollision+0x38>
            return 1;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e009      	b.n	80040d0 <Snake_u8CheckCollision+0x4c>
    for (i = 0; i < game.length; i++) {
 80040bc:	89fb      	ldrh	r3, [r7, #14]
 80040be:	3301      	adds	r3, #1
 80040c0:	81fb      	strh	r3, [r7, #14]
 80040c2:	4b06      	ldr	r3, [pc, #24]	@ (80040dc <Snake_u8CheckCollision+0x58>)
 80040c4:	f8b3 3258 	ldrh.w	r3, [r3, #600]	@ 0x258
 80040c8:	89fa      	ldrh	r2, [r7, #14]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d3e5      	bcc.n	800409a <Snake_u8CheckCollision+0x16>
        }
    }
    return 0;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	2000a124 	.word	0x2000a124

080040e0 <Snake_voidDrawScore>:

static void Snake_voidDrawScore(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af02      	add	r7, sp, #8
    /* Clear score area */
    Snake_voidDrawRect(0, GRID_HEIGHT * BLOCK_SIZE, DISPLAY_WIDTH, 20, COLOR_BLACK);
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2314      	movs	r3, #20
 80040ec:	2280      	movs	r2, #128	@ 0x80
 80040ee:	2178      	movs	r1, #120	@ 0x78
 80040f0:	2000      	movs	r0, #0
 80040f2:	f7ff fed9 	bl	8003ea8 <Snake_voidDrawRect>

    /* Draw score as colored blocks */
    u16 score_blocks = game.score / 10;
 80040f6:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <Snake_voidDrawScore+0x64>)
 80040f8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80040fc:	4a12      	ldr	r2, [pc, #72]	@ (8004148 <Snake_voidDrawScore+0x68>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	08db      	lsrs	r3, r3, #3
 8004104:	80bb      	strh	r3, [r7, #4]
    u16 i;

    for (i = 0; i < score_blocks && i < 15; i++) {
 8004106:	2300      	movs	r3, #0
 8004108:	80fb      	strh	r3, [r7, #6]
 800410a:	e00f      	b.n	800412c <Snake_voidDrawScore+0x4c>
        Snake_voidDrawRect(5 + i * 8, GRID_HEIGHT * BLOCK_SIZE + 5, 6, 6, COLOR_YELLOW);
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	b29b      	uxth	r3, r3
 8004112:	3305      	adds	r3, #5
 8004114:	b298      	uxth	r0, r3
 8004116:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2306      	movs	r3, #6
 800411e:	2206      	movs	r2, #6
 8004120:	217d      	movs	r1, #125	@ 0x7d
 8004122:	f7ff fec1 	bl	8003ea8 <Snake_voidDrawRect>
    for (i = 0; i < score_blocks && i < 15; i++) {
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	3301      	adds	r3, #1
 800412a:	80fb      	strh	r3, [r7, #6]
 800412c:	88fa      	ldrh	r2, [r7, #6]
 800412e:	88bb      	ldrh	r3, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d202      	bcs.n	800413a <Snake_voidDrawScore+0x5a>
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	2b0e      	cmp	r3, #14
 8004138:	d9e8      	bls.n	800410c <Snake_voidDrawScore+0x2c>
    }
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	2000a124 	.word	0x2000a124
 8004148:	cccccccd 	.word	0xcccccccd

0800414c <Snake_voidGameOver>:

static void Snake_voidGameOver(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af02      	add	r7, sp, #8
    game.game_over = 1;
 8004152:	4bb9      	ldr	r3, [pc, #740]	@ (8004438 <Snake_voidGameOver+0x2ec>)
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    /* Clear screen */
    Snake_voidFillScreen(COLOR_BLACK);
 800415a:	2000      	movs	r0, #0
 800415c:	f7ff fe66 	bl	8003e2c <Snake_voidFillScreen>

    /* Draw "GAME OVER" pattern */
    /* (same as your original code) */

    /* G */
    Snake_voidDrawRect(10, 30, 4, 20, COLOR_RED);
 8004160:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2314      	movs	r3, #20
 8004168:	2204      	movs	r2, #4
 800416a:	211e      	movs	r1, #30
 800416c:	200a      	movs	r0, #10
 800416e:	f7ff fe9b 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(10, 30, 15, 4, COLOR_RED);
 8004172:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2304      	movs	r3, #4
 800417a:	220f      	movs	r2, #15
 800417c:	211e      	movs	r1, #30
 800417e:	200a      	movs	r0, #10
 8004180:	f7ff fe92 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(10, 46, 15, 4, COLOR_RED);
 8004184:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	2304      	movs	r3, #4
 800418c:	220f      	movs	r2, #15
 800418e:	212e      	movs	r1, #46	@ 0x2e
 8004190:	200a      	movs	r0, #10
 8004192:	f7ff fe89 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(21, 38, 4, 12, COLOR_RED);
 8004196:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	230c      	movs	r3, #12
 800419e:	2204      	movs	r2, #4
 80041a0:	2126      	movs	r1, #38	@ 0x26
 80041a2:	2015      	movs	r0, #21
 80041a4:	f7ff fe80 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(17, 38, 8, 4, COLOR_RED);
 80041a8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2304      	movs	r3, #4
 80041b0:	2208      	movs	r2, #8
 80041b2:	2126      	movs	r1, #38	@ 0x26
 80041b4:	2011      	movs	r0, #17
 80041b6:	f7ff fe77 	bl	8003ea8 <Snake_voidDrawRect>

    /* A */
    Snake_voidDrawRect(30, 30, 4, 20, COLOR_RED);
 80041ba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2314      	movs	r3, #20
 80041c2:	2204      	movs	r2, #4
 80041c4:	211e      	movs	r1, #30
 80041c6:	201e      	movs	r0, #30
 80041c8:	f7ff fe6e 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(30, 30, 15, 4, COLOR_RED);
 80041cc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	2304      	movs	r3, #4
 80041d4:	220f      	movs	r2, #15
 80041d6:	211e      	movs	r1, #30
 80041d8:	201e      	movs	r0, #30
 80041da:	f7ff fe65 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(30, 38, 15, 4, COLOR_RED);
 80041de:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	2304      	movs	r3, #4
 80041e6:	220f      	movs	r2, #15
 80041e8:	2126      	movs	r1, #38	@ 0x26
 80041ea:	201e      	movs	r0, #30
 80041ec:	f7ff fe5c 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(41, 34, 4, 16, COLOR_RED);
 80041f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	2310      	movs	r3, #16
 80041f8:	2204      	movs	r2, #4
 80041fa:	2122      	movs	r1, #34	@ 0x22
 80041fc:	2029      	movs	r0, #41	@ 0x29
 80041fe:	f7ff fe53 	bl	8003ea8 <Snake_voidDrawRect>

    /* M */
    Snake_voidDrawRect(50, 30, 4, 20, COLOR_RED);
 8004202:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2314      	movs	r3, #20
 800420a:	2204      	movs	r2, #4
 800420c:	211e      	movs	r1, #30
 800420e:	2032      	movs	r0, #50	@ 0x32
 8004210:	f7ff fe4a 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(50, 30, 15, 4, COLOR_RED);
 8004214:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	2304      	movs	r3, #4
 800421c:	220f      	movs	r2, #15
 800421e:	211e      	movs	r1, #30
 8004220:	2032      	movs	r0, #50	@ 0x32
 8004222:	f7ff fe41 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(57, 34, 4, 8, COLOR_RED);
 8004226:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	2308      	movs	r3, #8
 800422e:	2204      	movs	r2, #4
 8004230:	2122      	movs	r1, #34	@ 0x22
 8004232:	2039      	movs	r0, #57	@ 0x39
 8004234:	f7ff fe38 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(61, 30, 4, 20, COLOR_RED);
 8004238:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	2314      	movs	r3, #20
 8004240:	2204      	movs	r2, #4
 8004242:	211e      	movs	r1, #30
 8004244:	203d      	movs	r0, #61	@ 0x3d
 8004246:	f7ff fe2f 	bl	8003ea8 <Snake_voidDrawRect>

    /* E */
    Snake_voidDrawRect(70, 30, 4, 20, COLOR_RED);
 800424a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	2314      	movs	r3, #20
 8004252:	2204      	movs	r2, #4
 8004254:	211e      	movs	r1, #30
 8004256:	2046      	movs	r0, #70	@ 0x46
 8004258:	f7ff fe26 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(70, 30, 15, 4, COLOR_RED);
 800425c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	2304      	movs	r3, #4
 8004264:	220f      	movs	r2, #15
 8004266:	211e      	movs	r1, #30
 8004268:	2046      	movs	r0, #70	@ 0x46
 800426a:	f7ff fe1d 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(70, 38, 10, 4, COLOR_RED);
 800426e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2304      	movs	r3, #4
 8004276:	220a      	movs	r2, #10
 8004278:	2126      	movs	r1, #38	@ 0x26
 800427a:	2046      	movs	r0, #70	@ 0x46
 800427c:	f7ff fe14 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(70, 46, 15, 4, COLOR_RED);
 8004280:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	2304      	movs	r3, #4
 8004288:	220f      	movs	r2, #15
 800428a:	212e      	movs	r1, #46	@ 0x2e
 800428c:	2046      	movs	r0, #70	@ 0x46
 800428e:	f7ff fe0b 	bl	8003ea8 <Snake_voidDrawRect>

    /* O */
    Snake_voidDrawRect(10, 60, 4, 20, COLOR_RED);
 8004292:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2314      	movs	r3, #20
 800429a:	2204      	movs	r2, #4
 800429c:	213c      	movs	r1, #60	@ 0x3c
 800429e:	200a      	movs	r0, #10
 80042a0:	f7ff fe02 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(10, 60, 15, 4, COLOR_RED);
 80042a4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	2304      	movs	r3, #4
 80042ac:	220f      	movs	r2, #15
 80042ae:	213c      	movs	r1, #60	@ 0x3c
 80042b0:	200a      	movs	r0, #10
 80042b2:	f7ff fdf9 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(10, 76, 15, 4, COLOR_RED);
 80042b6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2304      	movs	r3, #4
 80042be:	220f      	movs	r2, #15
 80042c0:	214c      	movs	r1, #76	@ 0x4c
 80042c2:	200a      	movs	r0, #10
 80042c4:	f7ff fdf0 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(21, 60, 4, 20, COLOR_RED);
 80042c8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	2314      	movs	r3, #20
 80042d0:	2204      	movs	r2, #4
 80042d2:	213c      	movs	r1, #60	@ 0x3c
 80042d4:	2015      	movs	r0, #21
 80042d6:	f7ff fde7 	bl	8003ea8 <Snake_voidDrawRect>

    /* V */
    Snake_voidDrawRect(30, 60, 4, 16, COLOR_RED);
 80042da:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	2310      	movs	r3, #16
 80042e2:	2204      	movs	r2, #4
 80042e4:	213c      	movs	r1, #60	@ 0x3c
 80042e6:	201e      	movs	r0, #30
 80042e8:	f7ff fdde 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(34, 72, 4, 4, COLOR_RED);
 80042ec:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	2304      	movs	r3, #4
 80042f4:	2204      	movs	r2, #4
 80042f6:	2148      	movs	r1, #72	@ 0x48
 80042f8:	2022      	movs	r0, #34	@ 0x22
 80042fa:	f7ff fdd5 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(38, 76, 4, 4, COLOR_RED);
 80042fe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2304      	movs	r3, #4
 8004306:	2204      	movs	r2, #4
 8004308:	214c      	movs	r1, #76	@ 0x4c
 800430a:	2026      	movs	r0, #38	@ 0x26
 800430c:	f7ff fdcc 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(42, 72, 4, 4, COLOR_RED);
 8004310:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	2304      	movs	r3, #4
 8004318:	2204      	movs	r2, #4
 800431a:	2148      	movs	r1, #72	@ 0x48
 800431c:	202a      	movs	r0, #42	@ 0x2a
 800431e:	f7ff fdc3 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(46, 60, 4, 16, COLOR_RED);
 8004322:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	2310      	movs	r3, #16
 800432a:	2204      	movs	r2, #4
 800432c:	213c      	movs	r1, #60	@ 0x3c
 800432e:	202e      	movs	r0, #46	@ 0x2e
 8004330:	f7ff fdba 	bl	8003ea8 <Snake_voidDrawRect>

    /* E */
    Snake_voidDrawRect(55, 60, 4, 20, COLOR_RED);
 8004334:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	2314      	movs	r3, #20
 800433c:	2204      	movs	r2, #4
 800433e:	213c      	movs	r1, #60	@ 0x3c
 8004340:	2037      	movs	r0, #55	@ 0x37
 8004342:	f7ff fdb1 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(55, 60, 15, 4, COLOR_RED);
 8004346:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	2304      	movs	r3, #4
 800434e:	220f      	movs	r2, #15
 8004350:	213c      	movs	r1, #60	@ 0x3c
 8004352:	2037      	movs	r0, #55	@ 0x37
 8004354:	f7ff fda8 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(55, 68, 10, 4, COLOR_RED);
 8004358:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2304      	movs	r3, #4
 8004360:	220a      	movs	r2, #10
 8004362:	2144      	movs	r1, #68	@ 0x44
 8004364:	2037      	movs	r0, #55	@ 0x37
 8004366:	f7ff fd9f 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(55, 76, 15, 4, COLOR_RED);
 800436a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2304      	movs	r3, #4
 8004372:	220f      	movs	r2, #15
 8004374:	214c      	movs	r1, #76	@ 0x4c
 8004376:	2037      	movs	r0, #55	@ 0x37
 8004378:	f7ff fd96 	bl	8003ea8 <Snake_voidDrawRect>

    /* R */
    Snake_voidDrawRect(75, 60, 4, 20, COLOR_RED);
 800437c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	2314      	movs	r3, #20
 8004384:	2204      	movs	r2, #4
 8004386:	213c      	movs	r1, #60	@ 0x3c
 8004388:	204b      	movs	r0, #75	@ 0x4b
 800438a:	f7ff fd8d 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(75, 60, 15, 4, COLOR_RED);
 800438e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2304      	movs	r3, #4
 8004396:	220f      	movs	r2, #15
 8004398:	213c      	movs	r1, #60	@ 0x3c
 800439a:	204b      	movs	r0, #75	@ 0x4b
 800439c:	f7ff fd84 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(75, 68, 10, 4, COLOR_RED);
 80043a0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	2304      	movs	r3, #4
 80043a8:	220a      	movs	r2, #10
 80043aa:	2144      	movs	r1, #68	@ 0x44
 80043ac:	204b      	movs	r0, #75	@ 0x4b
 80043ae:	f7ff fd7b 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(86, 60, 4, 12, COLOR_RED);
 80043b2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	230c      	movs	r3, #12
 80043ba:	2204      	movs	r2, #4
 80043bc:	213c      	movs	r1, #60	@ 0x3c
 80043be:	2056      	movs	r0, #86	@ 0x56
 80043c0:	f7ff fd72 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(82, 72, 4, 4, COLOR_RED);
 80043c4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	2304      	movs	r3, #4
 80043cc:	2204      	movs	r2, #4
 80043ce:	2148      	movs	r1, #72	@ 0x48
 80043d0:	2052      	movs	r0, #82	@ 0x52
 80043d2:	f7ff fd69 	bl	8003ea8 <Snake_voidDrawRect>
    Snake_voidDrawRect(86, 76, 4, 4, COLOR_RED);
 80043d6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	2304      	movs	r3, #4
 80043de:	2204      	movs	r2, #4
 80043e0:	214c      	movs	r1, #76	@ 0x4c
 80043e2:	2056      	movs	r0, #86	@ 0x56
 80043e4:	f7ff fd60 	bl	8003ea8 <Snake_voidDrawRect>

    /* Display final score as blocks */
    u16 final_score_blocks = game.score / 10;
 80043e8:	4b13      	ldr	r3, [pc, #76]	@ (8004438 <Snake_voidGameOver+0x2ec>)
 80043ea:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80043ee:	4a13      	ldr	r2, [pc, #76]	@ (800443c <Snake_voidGameOver+0x2f0>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	08db      	lsrs	r3, r3, #3
 80043f6:	80bb      	strh	r3, [r7, #4]
    u16 i;
    for (i = 0; i < final_score_blocks && i < 10; i++) {
 80043f8:	2300      	movs	r3, #0
 80043fa:	80fb      	strh	r3, [r7, #6]
 80043fc:	e00f      	b.n	800441e <Snake_voidGameOver+0x2d2>
        Snake_voidDrawRect(20 + i * 8, 90, 6, 6, COLOR_YELLOW);
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	b29b      	uxth	r3, r3
 8004404:	3314      	adds	r3, #20
 8004406:	b298      	uxth	r0, r3
 8004408:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2306      	movs	r3, #6
 8004410:	2206      	movs	r2, #6
 8004412:	215a      	movs	r1, #90	@ 0x5a
 8004414:	f7ff fd48 	bl	8003ea8 <Snake_voidDrawRect>
    for (i = 0; i < final_score_blocks && i < 10; i++) {
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	3301      	adds	r3, #1
 800441c:	80fb      	strh	r3, [r7, #6]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	88bb      	ldrh	r3, [r7, #4]
 8004422:	429a      	cmp	r2, r3
 8004424:	d202      	bcs.n	800442c <Snake_voidGameOver+0x2e0>
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	2b09      	cmp	r3, #9
 800442a:	d9e8      	bls.n	80043fe <Snake_voidGameOver+0x2b2>
    }

    Snake_voidUpdateDisplay();
 800442c:	f7ff fd74 	bl	8003f18 <Snake_voidUpdateDisplay>
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	2000a124 	.word	0x2000a124
 800443c:	cccccccd 	.word	0xcccccccd

08004440 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return 1;
 8004444:	2301      	movs	r3, #1
}
 8004446:	4618      	mov	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <_kill>:

int _kill(int pid, int sig)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800445a:	f000 faa1 	bl	80049a0 <__errno>
 800445e:	4603      	mov	r3, r0
 8004460:	2216      	movs	r2, #22
 8004462:	601a      	str	r2, [r3, #0]
  return -1;
 8004464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <_exit>:

void _exit (int status)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004478:	f04f 31ff 	mov.w	r1, #4294967295
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ffe7 	bl	8004450 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004482:	bf00      	nop
 8004484:	e7fd      	b.n	8004482 <_exit+0x12>

08004486 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	e00a      	b.n	80044ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004498:	f3af 8000 	nop.w
 800449c:	4601      	mov	r1, r0
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	60ba      	str	r2, [r7, #8]
 80044a4:	b2ca      	uxtb	r2, r1
 80044a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	3301      	adds	r3, #1
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	dbf0      	blt.n	8004498 <_read+0x12>
  }

  return len;
 80044b6:	687b      	ldr	r3, [r7, #4]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	e009      	b.n	80044e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	60ba      	str	r2, [r7, #8]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	3301      	adds	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	dbf1      	blt.n	80044d2 <_write+0x12>
  }
  return len;
 80044ee:	687b      	ldr	r3, [r7, #4]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_close>:

int _close(int file)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004520:	605a      	str	r2, [r3, #4]
  return 0;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <_isatty>:

int _isatty(int file)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004538:	2301      	movs	r3, #1
}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004568:	4a14      	ldr	r2, [pc, #80]	@ (80045bc <_sbrk+0x5c>)
 800456a:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <_sbrk+0x60>)
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004574:	4b13      	ldr	r3, [pc, #76]	@ (80045c4 <_sbrk+0x64>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800457c:	4b11      	ldr	r3, [pc, #68]	@ (80045c4 <_sbrk+0x64>)
 800457e:	4a12      	ldr	r2, [pc, #72]	@ (80045c8 <_sbrk+0x68>)
 8004580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004582:	4b10      	ldr	r3, [pc, #64]	@ (80045c4 <_sbrk+0x64>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4413      	add	r3, r2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	429a      	cmp	r2, r3
 800458e:	d207      	bcs.n	80045a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004590:	f000 fa06 	bl	80049a0 <__errno>
 8004594:	4603      	mov	r3, r0
 8004596:	220c      	movs	r2, #12
 8004598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800459a:	f04f 33ff 	mov.w	r3, #4294967295
 800459e:	e009      	b.n	80045b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045a0:	4b08      	ldr	r3, [pc, #32]	@ (80045c4 <_sbrk+0x64>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045a6:	4b07      	ldr	r3, [pc, #28]	@ (80045c4 <_sbrk+0x64>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4413      	add	r3, r2
 80045ae:	4a05      	ldr	r2, [pc, #20]	@ (80045c4 <_sbrk+0x64>)
 80045b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045b2:	68fb      	ldr	r3, [r7, #12]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20010000 	.word	0x20010000
 80045c0:	00000400 	.word	0x00000400
 80045c4:	2000a38c 	.word	0x2000a38c
 80045c8:	2000a4e0 	.word	0x2000a4e0

080045cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80045cc:	480d      	ldr	r0, [pc, #52]	@ (8004604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80045ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80045d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045d4:	480c      	ldr	r0, [pc, #48]	@ (8004608 <LoopForever+0x6>)
  ldr r1, =_edata
 80045d6:	490d      	ldr	r1, [pc, #52]	@ (800460c <LoopForever+0xa>)
  ldr r2, =_sidata
 80045d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004610 <LoopForever+0xe>)
  movs r3, #0
 80045da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045dc:	e002      	b.n	80045e4 <LoopCopyDataInit>

080045de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045e2:	3304      	adds	r3, #4

080045e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045e8:	d3f9      	bcc.n	80045de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80045ec:	4c0a      	ldr	r4, [pc, #40]	@ (8004618 <LoopForever+0x16>)
  movs r3, #0
 80045ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045f0:	e001      	b.n	80045f6 <LoopFillZerobss>

080045f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045f4:	3204      	adds	r2, #4

080045f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045f8:	d3fb      	bcc.n	80045f2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80045fa:	f000 f9d7 	bl	80049ac <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80045fe:	f7ff f969 	bl	80038d4 <main>

08004602 <LoopForever>:

LoopForever:
  b LoopForever
 8004602:	e7fe      	b.n	8004602 <LoopForever>
  ldr   r0, =_estack
 8004604:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800460c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8004610:	08005dc0 	.word	0x08005dc0
  ldr r2, =_sbss
 8004614:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8004618:	2000a4dc 	.word	0x2000a4dc

0800461c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800461c:	e7fe      	b.n	800461c <ADC_IRQHandler>
	...

08004620 <srand>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	4b10      	ldr	r3, [pc, #64]	@ (8004664 <srand+0x44>)
 8004624:	681d      	ldr	r5, [r3, #0]
 8004626:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004628:	4604      	mov	r4, r0
 800462a:	b9b3      	cbnz	r3, 800465a <srand+0x3a>
 800462c:	2018      	movs	r0, #24
 800462e:	f000 fa4d 	bl	8004acc <malloc>
 8004632:	4602      	mov	r2, r0
 8004634:	6328      	str	r0, [r5, #48]	@ 0x30
 8004636:	b920      	cbnz	r0, 8004642 <srand+0x22>
 8004638:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <srand+0x48>)
 800463a:	480c      	ldr	r0, [pc, #48]	@ (800466c <srand+0x4c>)
 800463c:	2146      	movs	r1, #70	@ 0x46
 800463e:	f000 f9dd 	bl	80049fc <__assert_func>
 8004642:	490b      	ldr	r1, [pc, #44]	@ (8004670 <srand+0x50>)
 8004644:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <srand+0x54>)
 8004646:	e9c0 1300 	strd	r1, r3, [r0]
 800464a:	4b0b      	ldr	r3, [pc, #44]	@ (8004678 <srand+0x58>)
 800464c:	6083      	str	r3, [r0, #8]
 800464e:	230b      	movs	r3, #11
 8004650:	8183      	strh	r3, [r0, #12]
 8004652:	2100      	movs	r1, #0
 8004654:	2001      	movs	r0, #1
 8004656:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800465a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800465c:	2200      	movs	r2, #0
 800465e:	611c      	str	r4, [r3, #16]
 8004660:	615a      	str	r2, [r3, #20]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	20000014 	.word	0x20000014
 8004668:	08005cd0 	.word	0x08005cd0
 800466c:	08005ce7 	.word	0x08005ce7
 8004670:	abcd330e 	.word	0xabcd330e
 8004674:	e66d1234 	.word	0xe66d1234
 8004678:	0005deec 	.word	0x0005deec

0800467c <rand>:
 800467c:	4b16      	ldr	r3, [pc, #88]	@ (80046d8 <rand+0x5c>)
 800467e:	b510      	push	{r4, lr}
 8004680:	681c      	ldr	r4, [r3, #0]
 8004682:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004684:	b9b3      	cbnz	r3, 80046b4 <rand+0x38>
 8004686:	2018      	movs	r0, #24
 8004688:	f000 fa20 	bl	8004acc <malloc>
 800468c:	4602      	mov	r2, r0
 800468e:	6320      	str	r0, [r4, #48]	@ 0x30
 8004690:	b920      	cbnz	r0, 800469c <rand+0x20>
 8004692:	4b12      	ldr	r3, [pc, #72]	@ (80046dc <rand+0x60>)
 8004694:	4812      	ldr	r0, [pc, #72]	@ (80046e0 <rand+0x64>)
 8004696:	2152      	movs	r1, #82	@ 0x52
 8004698:	f000 f9b0 	bl	80049fc <__assert_func>
 800469c:	4911      	ldr	r1, [pc, #68]	@ (80046e4 <rand+0x68>)
 800469e:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <rand+0x6c>)
 80046a0:	e9c0 1300 	strd	r1, r3, [r0]
 80046a4:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <rand+0x70>)
 80046a6:	6083      	str	r3, [r0, #8]
 80046a8:	230b      	movs	r3, #11
 80046aa:	8183      	strh	r3, [r0, #12]
 80046ac:	2100      	movs	r1, #0
 80046ae:	2001      	movs	r0, #1
 80046b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80046b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80046b6:	480e      	ldr	r0, [pc, #56]	@ (80046f0 <rand+0x74>)
 80046b8:	690b      	ldr	r3, [r1, #16]
 80046ba:	694c      	ldr	r4, [r1, #20]
 80046bc:	4a0d      	ldr	r2, [pc, #52]	@ (80046f4 <rand+0x78>)
 80046be:	4358      	muls	r0, r3
 80046c0:	fb02 0004 	mla	r0, r2, r4, r0
 80046c4:	fba3 3202 	umull	r3, r2, r3, r2
 80046c8:	3301      	adds	r3, #1
 80046ca:	eb40 0002 	adc.w	r0, r0, r2
 80046ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80046d2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80046d6:	bd10      	pop	{r4, pc}
 80046d8:	20000014 	.word	0x20000014
 80046dc:	08005cd0 	.word	0x08005cd0
 80046e0:	08005ce7 	.word	0x08005ce7
 80046e4:	abcd330e 	.word	0xabcd330e
 80046e8:	e66d1234 	.word	0xe66d1234
 80046ec:	0005deec 	.word	0x0005deec
 80046f0:	5851f42d 	.word	0x5851f42d
 80046f4:	4c957f2d 	.word	0x4c957f2d

080046f8 <std>:
 80046f8:	2300      	movs	r3, #0
 80046fa:	b510      	push	{r4, lr}
 80046fc:	4604      	mov	r4, r0
 80046fe:	e9c0 3300 	strd	r3, r3, [r0]
 8004702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004706:	6083      	str	r3, [r0, #8]
 8004708:	8181      	strh	r1, [r0, #12]
 800470a:	6643      	str	r3, [r0, #100]	@ 0x64
 800470c:	81c2      	strh	r2, [r0, #14]
 800470e:	6183      	str	r3, [r0, #24]
 8004710:	4619      	mov	r1, r3
 8004712:	2208      	movs	r2, #8
 8004714:	305c      	adds	r0, #92	@ 0x5c
 8004716:	f000 f8f4 	bl	8004902 <memset>
 800471a:	4b0d      	ldr	r3, [pc, #52]	@ (8004750 <std+0x58>)
 800471c:	6263      	str	r3, [r4, #36]	@ 0x24
 800471e:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <std+0x5c>)
 8004720:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004722:	4b0d      	ldr	r3, [pc, #52]	@ (8004758 <std+0x60>)
 8004724:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004726:	4b0d      	ldr	r3, [pc, #52]	@ (800475c <std+0x64>)
 8004728:	6323      	str	r3, [r4, #48]	@ 0x30
 800472a:	4b0d      	ldr	r3, [pc, #52]	@ (8004760 <std+0x68>)
 800472c:	6224      	str	r4, [r4, #32]
 800472e:	429c      	cmp	r4, r3
 8004730:	d006      	beq.n	8004740 <std+0x48>
 8004732:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004736:	4294      	cmp	r4, r2
 8004738:	d002      	beq.n	8004740 <std+0x48>
 800473a:	33d0      	adds	r3, #208	@ 0xd0
 800473c:	429c      	cmp	r4, r3
 800473e:	d105      	bne.n	800474c <std+0x54>
 8004740:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004748:	f000 b954 	b.w	80049f4 <__retarget_lock_init_recursive>
 800474c:	bd10      	pop	{r4, pc}
 800474e:	bf00      	nop
 8004750:	0800487d 	.word	0x0800487d
 8004754:	0800489f 	.word	0x0800489f
 8004758:	080048d7 	.word	0x080048d7
 800475c:	080048fb 	.word	0x080048fb
 8004760:	2000a390 	.word	0x2000a390

08004764 <stdio_exit_handler>:
 8004764:	4a02      	ldr	r2, [pc, #8]	@ (8004770 <stdio_exit_handler+0xc>)
 8004766:	4903      	ldr	r1, [pc, #12]	@ (8004774 <stdio_exit_handler+0x10>)
 8004768:	4803      	ldr	r0, [pc, #12]	@ (8004778 <stdio_exit_handler+0x14>)
 800476a:	f000 b869 	b.w	8004840 <_fwalk_sglue>
 800476e:	bf00      	nop
 8004770:	20000008 	.word	0x20000008
 8004774:	08004d41 	.word	0x08004d41
 8004778:	20000018 	.word	0x20000018

0800477c <cleanup_stdio>:
 800477c:	6841      	ldr	r1, [r0, #4]
 800477e:	4b0c      	ldr	r3, [pc, #48]	@ (80047b0 <cleanup_stdio+0x34>)
 8004780:	4299      	cmp	r1, r3
 8004782:	b510      	push	{r4, lr}
 8004784:	4604      	mov	r4, r0
 8004786:	d001      	beq.n	800478c <cleanup_stdio+0x10>
 8004788:	f000 fada 	bl	8004d40 <_fflush_r>
 800478c:	68a1      	ldr	r1, [r4, #8]
 800478e:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <cleanup_stdio+0x38>)
 8004790:	4299      	cmp	r1, r3
 8004792:	d002      	beq.n	800479a <cleanup_stdio+0x1e>
 8004794:	4620      	mov	r0, r4
 8004796:	f000 fad3 	bl	8004d40 <_fflush_r>
 800479a:	68e1      	ldr	r1, [r4, #12]
 800479c:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <cleanup_stdio+0x3c>)
 800479e:	4299      	cmp	r1, r3
 80047a0:	d004      	beq.n	80047ac <cleanup_stdio+0x30>
 80047a2:	4620      	mov	r0, r4
 80047a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a8:	f000 baca 	b.w	8004d40 <_fflush_r>
 80047ac:	bd10      	pop	{r4, pc}
 80047ae:	bf00      	nop
 80047b0:	2000a390 	.word	0x2000a390
 80047b4:	2000a3f8 	.word	0x2000a3f8
 80047b8:	2000a460 	.word	0x2000a460

080047bc <global_stdio_init.part.0>:
 80047bc:	b510      	push	{r4, lr}
 80047be:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <global_stdio_init.part.0+0x30>)
 80047c0:	4c0b      	ldr	r4, [pc, #44]	@ (80047f0 <global_stdio_init.part.0+0x34>)
 80047c2:	4a0c      	ldr	r2, [pc, #48]	@ (80047f4 <global_stdio_init.part.0+0x38>)
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	4620      	mov	r0, r4
 80047c8:	2200      	movs	r2, #0
 80047ca:	2104      	movs	r1, #4
 80047cc:	f7ff ff94 	bl	80046f8 <std>
 80047d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047d4:	2201      	movs	r2, #1
 80047d6:	2109      	movs	r1, #9
 80047d8:	f7ff ff8e 	bl	80046f8 <std>
 80047dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047e0:	2202      	movs	r2, #2
 80047e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e6:	2112      	movs	r1, #18
 80047e8:	f7ff bf86 	b.w	80046f8 <std>
 80047ec:	2000a4c8 	.word	0x2000a4c8
 80047f0:	2000a390 	.word	0x2000a390
 80047f4:	08004765 	.word	0x08004765

080047f8 <__sfp_lock_acquire>:
 80047f8:	4801      	ldr	r0, [pc, #4]	@ (8004800 <__sfp_lock_acquire+0x8>)
 80047fa:	f000 b8fc 	b.w	80049f6 <__retarget_lock_acquire_recursive>
 80047fe:	bf00      	nop
 8004800:	2000a4d1 	.word	0x2000a4d1

08004804 <__sfp_lock_release>:
 8004804:	4801      	ldr	r0, [pc, #4]	@ (800480c <__sfp_lock_release+0x8>)
 8004806:	f000 b8f7 	b.w	80049f8 <__retarget_lock_release_recursive>
 800480a:	bf00      	nop
 800480c:	2000a4d1 	.word	0x2000a4d1

08004810 <__sinit>:
 8004810:	b510      	push	{r4, lr}
 8004812:	4604      	mov	r4, r0
 8004814:	f7ff fff0 	bl	80047f8 <__sfp_lock_acquire>
 8004818:	6a23      	ldr	r3, [r4, #32]
 800481a:	b11b      	cbz	r3, 8004824 <__sinit+0x14>
 800481c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004820:	f7ff bff0 	b.w	8004804 <__sfp_lock_release>
 8004824:	4b04      	ldr	r3, [pc, #16]	@ (8004838 <__sinit+0x28>)
 8004826:	6223      	str	r3, [r4, #32]
 8004828:	4b04      	ldr	r3, [pc, #16]	@ (800483c <__sinit+0x2c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f5      	bne.n	800481c <__sinit+0xc>
 8004830:	f7ff ffc4 	bl	80047bc <global_stdio_init.part.0>
 8004834:	e7f2      	b.n	800481c <__sinit+0xc>
 8004836:	bf00      	nop
 8004838:	0800477d 	.word	0x0800477d
 800483c:	2000a4c8 	.word	0x2000a4c8

08004840 <_fwalk_sglue>:
 8004840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004844:	4607      	mov	r7, r0
 8004846:	4688      	mov	r8, r1
 8004848:	4614      	mov	r4, r2
 800484a:	2600      	movs	r6, #0
 800484c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004850:	f1b9 0901 	subs.w	r9, r9, #1
 8004854:	d505      	bpl.n	8004862 <_fwalk_sglue+0x22>
 8004856:	6824      	ldr	r4, [r4, #0]
 8004858:	2c00      	cmp	r4, #0
 800485a:	d1f7      	bne.n	800484c <_fwalk_sglue+0xc>
 800485c:	4630      	mov	r0, r6
 800485e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004862:	89ab      	ldrh	r3, [r5, #12]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d907      	bls.n	8004878 <_fwalk_sglue+0x38>
 8004868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800486c:	3301      	adds	r3, #1
 800486e:	d003      	beq.n	8004878 <_fwalk_sglue+0x38>
 8004870:	4629      	mov	r1, r5
 8004872:	4638      	mov	r0, r7
 8004874:	47c0      	blx	r8
 8004876:	4306      	orrs	r6, r0
 8004878:	3568      	adds	r5, #104	@ 0x68
 800487a:	e7e9      	b.n	8004850 <_fwalk_sglue+0x10>

0800487c <__sread>:
 800487c:	b510      	push	{r4, lr}
 800487e:	460c      	mov	r4, r1
 8004880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004884:	f000 f868 	bl	8004958 <_read_r>
 8004888:	2800      	cmp	r0, #0
 800488a:	bfab      	itete	ge
 800488c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800488e:	89a3      	ldrhlt	r3, [r4, #12]
 8004890:	181b      	addge	r3, r3, r0
 8004892:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004896:	bfac      	ite	ge
 8004898:	6563      	strge	r3, [r4, #84]	@ 0x54
 800489a:	81a3      	strhlt	r3, [r4, #12]
 800489c:	bd10      	pop	{r4, pc}

0800489e <__swrite>:
 800489e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a2:	461f      	mov	r7, r3
 80048a4:	898b      	ldrh	r3, [r1, #12]
 80048a6:	05db      	lsls	r3, r3, #23
 80048a8:	4605      	mov	r5, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	4616      	mov	r6, r2
 80048ae:	d505      	bpl.n	80048bc <__swrite+0x1e>
 80048b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048b4:	2302      	movs	r3, #2
 80048b6:	2200      	movs	r2, #0
 80048b8:	f000 f83c 	bl	8004934 <_lseek_r>
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048c6:	81a3      	strh	r3, [r4, #12]
 80048c8:	4632      	mov	r2, r6
 80048ca:	463b      	mov	r3, r7
 80048cc:	4628      	mov	r0, r5
 80048ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048d2:	f000 b853 	b.w	800497c <_write_r>

080048d6 <__sseek>:
 80048d6:	b510      	push	{r4, lr}
 80048d8:	460c      	mov	r4, r1
 80048da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048de:	f000 f829 	bl	8004934 <_lseek_r>
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	bf15      	itete	ne
 80048e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048f2:	81a3      	strheq	r3, [r4, #12]
 80048f4:	bf18      	it	ne
 80048f6:	81a3      	strhne	r3, [r4, #12]
 80048f8:	bd10      	pop	{r4, pc}

080048fa <__sclose>:
 80048fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048fe:	f000 b809 	b.w	8004914 <_close_r>

08004902 <memset>:
 8004902:	4402      	add	r2, r0
 8004904:	4603      	mov	r3, r0
 8004906:	4293      	cmp	r3, r2
 8004908:	d100      	bne.n	800490c <memset+0xa>
 800490a:	4770      	bx	lr
 800490c:	f803 1b01 	strb.w	r1, [r3], #1
 8004910:	e7f9      	b.n	8004906 <memset+0x4>
	...

08004914 <_close_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4d06      	ldr	r5, [pc, #24]	@ (8004930 <_close_r+0x1c>)
 8004918:	2300      	movs	r3, #0
 800491a:	4604      	mov	r4, r0
 800491c:	4608      	mov	r0, r1
 800491e:	602b      	str	r3, [r5, #0]
 8004920:	f7ff fdea 	bl	80044f8 <_close>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_close_r+0x1a>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	b103      	cbz	r3, 800492e <_close_r+0x1a>
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	2000a4cc 	.word	0x2000a4cc

08004934 <_lseek_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4d07      	ldr	r5, [pc, #28]	@ (8004954 <_lseek_r+0x20>)
 8004938:	4604      	mov	r4, r0
 800493a:	4608      	mov	r0, r1
 800493c:	4611      	mov	r1, r2
 800493e:	2200      	movs	r2, #0
 8004940:	602a      	str	r2, [r5, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	f7ff fdff 	bl	8004546 <_lseek>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d102      	bne.n	8004952 <_lseek_r+0x1e>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	b103      	cbz	r3, 8004952 <_lseek_r+0x1e>
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	2000a4cc 	.word	0x2000a4cc

08004958 <_read_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4d07      	ldr	r5, [pc, #28]	@ (8004978 <_read_r+0x20>)
 800495c:	4604      	mov	r4, r0
 800495e:	4608      	mov	r0, r1
 8004960:	4611      	mov	r1, r2
 8004962:	2200      	movs	r2, #0
 8004964:	602a      	str	r2, [r5, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	f7ff fd8d 	bl	8004486 <_read>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d102      	bne.n	8004976 <_read_r+0x1e>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	b103      	cbz	r3, 8004976 <_read_r+0x1e>
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	2000a4cc 	.word	0x2000a4cc

0800497c <_write_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4d07      	ldr	r5, [pc, #28]	@ (800499c <_write_r+0x20>)
 8004980:	4604      	mov	r4, r0
 8004982:	4608      	mov	r0, r1
 8004984:	4611      	mov	r1, r2
 8004986:	2200      	movs	r2, #0
 8004988:	602a      	str	r2, [r5, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	f7ff fd98 	bl	80044c0 <_write>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_write_r+0x1e>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_write_r+0x1e>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	2000a4cc 	.word	0x2000a4cc

080049a0 <__errno>:
 80049a0:	4b01      	ldr	r3, [pc, #4]	@ (80049a8 <__errno+0x8>)
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000014 	.word	0x20000014

080049ac <__libc_init_array>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	4d0d      	ldr	r5, [pc, #52]	@ (80049e4 <__libc_init_array+0x38>)
 80049b0:	4c0d      	ldr	r4, [pc, #52]	@ (80049e8 <__libc_init_array+0x3c>)
 80049b2:	1b64      	subs	r4, r4, r5
 80049b4:	10a4      	asrs	r4, r4, #2
 80049b6:	2600      	movs	r6, #0
 80049b8:	42a6      	cmp	r6, r4
 80049ba:	d109      	bne.n	80049d0 <__libc_init_array+0x24>
 80049bc:	4d0b      	ldr	r5, [pc, #44]	@ (80049ec <__libc_init_array+0x40>)
 80049be:	4c0c      	ldr	r4, [pc, #48]	@ (80049f0 <__libc_init_array+0x44>)
 80049c0:	f000 fe38 	bl	8005634 <_init>
 80049c4:	1b64      	subs	r4, r4, r5
 80049c6:	10a4      	asrs	r4, r4, #2
 80049c8:	2600      	movs	r6, #0
 80049ca:	42a6      	cmp	r6, r4
 80049cc:	d105      	bne.n	80049da <__libc_init_array+0x2e>
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d4:	4798      	blx	r3
 80049d6:	3601      	adds	r6, #1
 80049d8:	e7ee      	b.n	80049b8 <__libc_init_array+0xc>
 80049da:	f855 3b04 	ldr.w	r3, [r5], #4
 80049de:	4798      	blx	r3
 80049e0:	3601      	adds	r6, #1
 80049e2:	e7f2      	b.n	80049ca <__libc_init_array+0x1e>
 80049e4:	08005db8 	.word	0x08005db8
 80049e8:	08005db8 	.word	0x08005db8
 80049ec:	08005db8 	.word	0x08005db8
 80049f0:	08005dbc 	.word	0x08005dbc

080049f4 <__retarget_lock_init_recursive>:
 80049f4:	4770      	bx	lr

080049f6 <__retarget_lock_acquire_recursive>:
 80049f6:	4770      	bx	lr

080049f8 <__retarget_lock_release_recursive>:
 80049f8:	4770      	bx	lr
	...

080049fc <__assert_func>:
 80049fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049fe:	4614      	mov	r4, r2
 8004a00:	461a      	mov	r2, r3
 8004a02:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <__assert_func+0x2c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4605      	mov	r5, r0
 8004a08:	68d8      	ldr	r0, [r3, #12]
 8004a0a:	b14c      	cbz	r4, 8004a20 <__assert_func+0x24>
 8004a0c:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <__assert_func+0x30>)
 8004a0e:	9100      	str	r1, [sp, #0]
 8004a10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a14:	4906      	ldr	r1, [pc, #24]	@ (8004a30 <__assert_func+0x34>)
 8004a16:	462b      	mov	r3, r5
 8004a18:	f000 f9ba 	bl	8004d90 <fiprintf>
 8004a1c:	f000 f9da 	bl	8004dd4 <abort>
 8004a20:	4b04      	ldr	r3, [pc, #16]	@ (8004a34 <__assert_func+0x38>)
 8004a22:	461c      	mov	r4, r3
 8004a24:	e7f3      	b.n	8004a0e <__assert_func+0x12>
 8004a26:	bf00      	nop
 8004a28:	20000014 	.word	0x20000014
 8004a2c:	08005d3f 	.word	0x08005d3f
 8004a30:	08005d4c 	.word	0x08005d4c
 8004a34:	08005d7a 	.word	0x08005d7a

08004a38 <_free_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4605      	mov	r5, r0
 8004a3c:	2900      	cmp	r1, #0
 8004a3e:	d041      	beq.n	8004ac4 <_free_r+0x8c>
 8004a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a44:	1f0c      	subs	r4, r1, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bfb8      	it	lt
 8004a4a:	18e4      	addlt	r4, r4, r3
 8004a4c:	f000 f8e8 	bl	8004c20 <__malloc_lock>
 8004a50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac8 <_free_r+0x90>)
 8004a52:	6813      	ldr	r3, [r2, #0]
 8004a54:	b933      	cbnz	r3, 8004a64 <_free_r+0x2c>
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	6014      	str	r4, [r2, #0]
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a60:	f000 b8e4 	b.w	8004c2c <__malloc_unlock>
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	d908      	bls.n	8004a7a <_free_r+0x42>
 8004a68:	6820      	ldr	r0, [r4, #0]
 8004a6a:	1821      	adds	r1, r4, r0
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	bf01      	itttt	eq
 8004a70:	6819      	ldreq	r1, [r3, #0]
 8004a72:	685b      	ldreq	r3, [r3, #4]
 8004a74:	1809      	addeq	r1, r1, r0
 8004a76:	6021      	streq	r1, [r4, #0]
 8004a78:	e7ed      	b.n	8004a56 <_free_r+0x1e>
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	b10b      	cbz	r3, 8004a84 <_free_r+0x4c>
 8004a80:	42a3      	cmp	r3, r4
 8004a82:	d9fa      	bls.n	8004a7a <_free_r+0x42>
 8004a84:	6811      	ldr	r1, [r2, #0]
 8004a86:	1850      	adds	r0, r2, r1
 8004a88:	42a0      	cmp	r0, r4
 8004a8a:	d10b      	bne.n	8004aa4 <_free_r+0x6c>
 8004a8c:	6820      	ldr	r0, [r4, #0]
 8004a8e:	4401      	add	r1, r0
 8004a90:	1850      	adds	r0, r2, r1
 8004a92:	4283      	cmp	r3, r0
 8004a94:	6011      	str	r1, [r2, #0]
 8004a96:	d1e0      	bne.n	8004a5a <_free_r+0x22>
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	6053      	str	r3, [r2, #4]
 8004a9e:	4408      	add	r0, r1
 8004aa0:	6010      	str	r0, [r2, #0]
 8004aa2:	e7da      	b.n	8004a5a <_free_r+0x22>
 8004aa4:	d902      	bls.n	8004aac <_free_r+0x74>
 8004aa6:	230c      	movs	r3, #12
 8004aa8:	602b      	str	r3, [r5, #0]
 8004aaa:	e7d6      	b.n	8004a5a <_free_r+0x22>
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	1821      	adds	r1, r4, r0
 8004ab0:	428b      	cmp	r3, r1
 8004ab2:	bf04      	itt	eq
 8004ab4:	6819      	ldreq	r1, [r3, #0]
 8004ab6:	685b      	ldreq	r3, [r3, #4]
 8004ab8:	6063      	str	r3, [r4, #4]
 8004aba:	bf04      	itt	eq
 8004abc:	1809      	addeq	r1, r1, r0
 8004abe:	6021      	streq	r1, [r4, #0]
 8004ac0:	6054      	str	r4, [r2, #4]
 8004ac2:	e7ca      	b.n	8004a5a <_free_r+0x22>
 8004ac4:	bd38      	pop	{r3, r4, r5, pc}
 8004ac6:	bf00      	nop
 8004ac8:	2000a4d8 	.word	0x2000a4d8

08004acc <malloc>:
 8004acc:	4b02      	ldr	r3, [pc, #8]	@ (8004ad8 <malloc+0xc>)
 8004ace:	4601      	mov	r1, r0
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	f000 b825 	b.w	8004b20 <_malloc_r>
 8004ad6:	bf00      	nop
 8004ad8:	20000014 	.word	0x20000014

08004adc <sbrk_aligned>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	4e0f      	ldr	r6, [pc, #60]	@ (8004b1c <sbrk_aligned+0x40>)
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	6831      	ldr	r1, [r6, #0]
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	b911      	cbnz	r1, 8004aee <sbrk_aligned+0x12>
 8004ae8:	f000 f964 	bl	8004db4 <_sbrk_r>
 8004aec:	6030      	str	r0, [r6, #0]
 8004aee:	4621      	mov	r1, r4
 8004af0:	4628      	mov	r0, r5
 8004af2:	f000 f95f 	bl	8004db4 <_sbrk_r>
 8004af6:	1c43      	adds	r3, r0, #1
 8004af8:	d103      	bne.n	8004b02 <sbrk_aligned+0x26>
 8004afa:	f04f 34ff 	mov.w	r4, #4294967295
 8004afe:	4620      	mov	r0, r4
 8004b00:	bd70      	pop	{r4, r5, r6, pc}
 8004b02:	1cc4      	adds	r4, r0, #3
 8004b04:	f024 0403 	bic.w	r4, r4, #3
 8004b08:	42a0      	cmp	r0, r4
 8004b0a:	d0f8      	beq.n	8004afe <sbrk_aligned+0x22>
 8004b0c:	1a21      	subs	r1, r4, r0
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 f950 	bl	8004db4 <_sbrk_r>
 8004b14:	3001      	adds	r0, #1
 8004b16:	d1f2      	bne.n	8004afe <sbrk_aligned+0x22>
 8004b18:	e7ef      	b.n	8004afa <sbrk_aligned+0x1e>
 8004b1a:	bf00      	nop
 8004b1c:	2000a4d4 	.word	0x2000a4d4

08004b20 <_malloc_r>:
 8004b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b24:	1ccd      	adds	r5, r1, #3
 8004b26:	f025 0503 	bic.w	r5, r5, #3
 8004b2a:	3508      	adds	r5, #8
 8004b2c:	2d0c      	cmp	r5, #12
 8004b2e:	bf38      	it	cc
 8004b30:	250c      	movcc	r5, #12
 8004b32:	2d00      	cmp	r5, #0
 8004b34:	4606      	mov	r6, r0
 8004b36:	db01      	blt.n	8004b3c <_malloc_r+0x1c>
 8004b38:	42a9      	cmp	r1, r5
 8004b3a:	d904      	bls.n	8004b46 <_malloc_r+0x26>
 8004b3c:	230c      	movs	r3, #12
 8004b3e:	6033      	str	r3, [r6, #0]
 8004b40:	2000      	movs	r0, #0
 8004b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c1c <_malloc_r+0xfc>
 8004b4a:	f000 f869 	bl	8004c20 <__malloc_lock>
 8004b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b52:	461c      	mov	r4, r3
 8004b54:	bb44      	cbnz	r4, 8004ba8 <_malloc_r+0x88>
 8004b56:	4629      	mov	r1, r5
 8004b58:	4630      	mov	r0, r6
 8004b5a:	f7ff ffbf 	bl	8004adc <sbrk_aligned>
 8004b5e:	1c43      	adds	r3, r0, #1
 8004b60:	4604      	mov	r4, r0
 8004b62:	d158      	bne.n	8004c16 <_malloc_r+0xf6>
 8004b64:	f8d8 4000 	ldr.w	r4, [r8]
 8004b68:	4627      	mov	r7, r4
 8004b6a:	2f00      	cmp	r7, #0
 8004b6c:	d143      	bne.n	8004bf6 <_malloc_r+0xd6>
 8004b6e:	2c00      	cmp	r4, #0
 8004b70:	d04b      	beq.n	8004c0a <_malloc_r+0xea>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	4639      	mov	r1, r7
 8004b76:	4630      	mov	r0, r6
 8004b78:	eb04 0903 	add.w	r9, r4, r3
 8004b7c:	f000 f91a 	bl	8004db4 <_sbrk_r>
 8004b80:	4581      	cmp	r9, r0
 8004b82:	d142      	bne.n	8004c0a <_malloc_r+0xea>
 8004b84:	6821      	ldr	r1, [r4, #0]
 8004b86:	1a6d      	subs	r5, r5, r1
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f7ff ffa6 	bl	8004adc <sbrk_aligned>
 8004b90:	3001      	adds	r0, #1
 8004b92:	d03a      	beq.n	8004c0a <_malloc_r+0xea>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	442b      	add	r3, r5
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	bb62      	cbnz	r2, 8004bfc <_malloc_r+0xdc>
 8004ba2:	f8c8 7000 	str.w	r7, [r8]
 8004ba6:	e00f      	b.n	8004bc8 <_malloc_r+0xa8>
 8004ba8:	6822      	ldr	r2, [r4, #0]
 8004baa:	1b52      	subs	r2, r2, r5
 8004bac:	d420      	bmi.n	8004bf0 <_malloc_r+0xd0>
 8004bae:	2a0b      	cmp	r2, #11
 8004bb0:	d917      	bls.n	8004be2 <_malloc_r+0xc2>
 8004bb2:	1961      	adds	r1, r4, r5
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	6025      	str	r5, [r4, #0]
 8004bb8:	bf18      	it	ne
 8004bba:	6059      	strne	r1, [r3, #4]
 8004bbc:	6863      	ldr	r3, [r4, #4]
 8004bbe:	bf08      	it	eq
 8004bc0:	f8c8 1000 	streq.w	r1, [r8]
 8004bc4:	5162      	str	r2, [r4, r5]
 8004bc6:	604b      	str	r3, [r1, #4]
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f000 f82f 	bl	8004c2c <__malloc_unlock>
 8004bce:	f104 000b 	add.w	r0, r4, #11
 8004bd2:	1d23      	adds	r3, r4, #4
 8004bd4:	f020 0007 	bic.w	r0, r0, #7
 8004bd8:	1ac2      	subs	r2, r0, r3
 8004bda:	bf1c      	itt	ne
 8004bdc:	1a1b      	subne	r3, r3, r0
 8004bde:	50a3      	strne	r3, [r4, r2]
 8004be0:	e7af      	b.n	8004b42 <_malloc_r+0x22>
 8004be2:	6862      	ldr	r2, [r4, #4]
 8004be4:	42a3      	cmp	r3, r4
 8004be6:	bf0c      	ite	eq
 8004be8:	f8c8 2000 	streq.w	r2, [r8]
 8004bec:	605a      	strne	r2, [r3, #4]
 8004bee:	e7eb      	b.n	8004bc8 <_malloc_r+0xa8>
 8004bf0:	4623      	mov	r3, r4
 8004bf2:	6864      	ldr	r4, [r4, #4]
 8004bf4:	e7ae      	b.n	8004b54 <_malloc_r+0x34>
 8004bf6:	463c      	mov	r4, r7
 8004bf8:	687f      	ldr	r7, [r7, #4]
 8004bfa:	e7b6      	b.n	8004b6a <_malloc_r+0x4a>
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	42a3      	cmp	r3, r4
 8004c02:	d1fb      	bne.n	8004bfc <_malloc_r+0xdc>
 8004c04:	2300      	movs	r3, #0
 8004c06:	6053      	str	r3, [r2, #4]
 8004c08:	e7de      	b.n	8004bc8 <_malloc_r+0xa8>
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	6033      	str	r3, [r6, #0]
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f000 f80c 	bl	8004c2c <__malloc_unlock>
 8004c14:	e794      	b.n	8004b40 <_malloc_r+0x20>
 8004c16:	6005      	str	r5, [r0, #0]
 8004c18:	e7d6      	b.n	8004bc8 <_malloc_r+0xa8>
 8004c1a:	bf00      	nop
 8004c1c:	2000a4d8 	.word	0x2000a4d8

08004c20 <__malloc_lock>:
 8004c20:	4801      	ldr	r0, [pc, #4]	@ (8004c28 <__malloc_lock+0x8>)
 8004c22:	f7ff bee8 	b.w	80049f6 <__retarget_lock_acquire_recursive>
 8004c26:	bf00      	nop
 8004c28:	2000a4d0 	.word	0x2000a4d0

08004c2c <__malloc_unlock>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	@ (8004c34 <__malloc_unlock+0x8>)
 8004c2e:	f7ff bee3 	b.w	80049f8 <__retarget_lock_release_recursive>
 8004c32:	bf00      	nop
 8004c34:	2000a4d0 	.word	0x2000a4d0

08004c38 <__sflush_r>:
 8004c38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c40:	0716      	lsls	r6, r2, #28
 8004c42:	4605      	mov	r5, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	d454      	bmi.n	8004cf2 <__sflush_r+0xba>
 8004c48:	684b      	ldr	r3, [r1, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dc02      	bgt.n	8004c54 <__sflush_r+0x1c>
 8004c4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	dd48      	ble.n	8004ce6 <__sflush_r+0xae>
 8004c54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	d045      	beq.n	8004ce6 <__sflush_r+0xae>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c60:	682f      	ldr	r7, [r5, #0]
 8004c62:	6a21      	ldr	r1, [r4, #32]
 8004c64:	602b      	str	r3, [r5, #0]
 8004c66:	d030      	beq.n	8004cca <__sflush_r+0x92>
 8004c68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	0759      	lsls	r1, r3, #29
 8004c6e:	d505      	bpl.n	8004c7c <__sflush_r+0x44>
 8004c70:	6863      	ldr	r3, [r4, #4]
 8004c72:	1ad2      	subs	r2, r2, r3
 8004c74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c76:	b10b      	cbz	r3, 8004c7c <__sflush_r+0x44>
 8004c78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c7a:	1ad2      	subs	r2, r2, r3
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c80:	6a21      	ldr	r1, [r4, #32]
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b0      	blx	r6
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	d106      	bne.n	8004c9a <__sflush_r+0x62>
 8004c8c:	6829      	ldr	r1, [r5, #0]
 8004c8e:	291d      	cmp	r1, #29
 8004c90:	d82b      	bhi.n	8004cea <__sflush_r+0xb2>
 8004c92:	4a2a      	ldr	r2, [pc, #168]	@ (8004d3c <__sflush_r+0x104>)
 8004c94:	40ca      	lsrs	r2, r1
 8004c96:	07d6      	lsls	r6, r2, #31
 8004c98:	d527      	bpl.n	8004cea <__sflush_r+0xb2>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	6062      	str	r2, [r4, #4]
 8004c9e:	04d9      	lsls	r1, r3, #19
 8004ca0:	6922      	ldr	r2, [r4, #16]
 8004ca2:	6022      	str	r2, [r4, #0]
 8004ca4:	d504      	bpl.n	8004cb0 <__sflush_r+0x78>
 8004ca6:	1c42      	adds	r2, r0, #1
 8004ca8:	d101      	bne.n	8004cae <__sflush_r+0x76>
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	b903      	cbnz	r3, 8004cb0 <__sflush_r+0x78>
 8004cae:	6560      	str	r0, [r4, #84]	@ 0x54
 8004cb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cb2:	602f      	str	r7, [r5, #0]
 8004cb4:	b1b9      	cbz	r1, 8004ce6 <__sflush_r+0xae>
 8004cb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cba:	4299      	cmp	r1, r3
 8004cbc:	d002      	beq.n	8004cc4 <__sflush_r+0x8c>
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f7ff feba 	bl	8004a38 <_free_r>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cc8:	e00d      	b.n	8004ce6 <__sflush_r+0xae>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b0      	blx	r6
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	1c50      	adds	r0, r2, #1
 8004cd4:	d1c9      	bne.n	8004c6a <__sflush_r+0x32>
 8004cd6:	682b      	ldr	r3, [r5, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0c6      	beq.n	8004c6a <__sflush_r+0x32>
 8004cdc:	2b1d      	cmp	r3, #29
 8004cde:	d001      	beq.n	8004ce4 <__sflush_r+0xac>
 8004ce0:	2b16      	cmp	r3, #22
 8004ce2:	d11e      	bne.n	8004d22 <__sflush_r+0xea>
 8004ce4:	602f      	str	r7, [r5, #0]
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	e022      	b.n	8004d30 <__sflush_r+0xf8>
 8004cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	e01b      	b.n	8004d2a <__sflush_r+0xf2>
 8004cf2:	690f      	ldr	r7, [r1, #16]
 8004cf4:	2f00      	cmp	r7, #0
 8004cf6:	d0f6      	beq.n	8004ce6 <__sflush_r+0xae>
 8004cf8:	0793      	lsls	r3, r2, #30
 8004cfa:	680e      	ldr	r6, [r1, #0]
 8004cfc:	bf08      	it	eq
 8004cfe:	694b      	ldreq	r3, [r1, #20]
 8004d00:	600f      	str	r7, [r1, #0]
 8004d02:	bf18      	it	ne
 8004d04:	2300      	movne	r3, #0
 8004d06:	eba6 0807 	sub.w	r8, r6, r7
 8004d0a:	608b      	str	r3, [r1, #8]
 8004d0c:	f1b8 0f00 	cmp.w	r8, #0
 8004d10:	dde9      	ble.n	8004ce6 <__sflush_r+0xae>
 8004d12:	6a21      	ldr	r1, [r4, #32]
 8004d14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004d16:	4643      	mov	r3, r8
 8004d18:	463a      	mov	r2, r7
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	47b0      	blx	r6
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	dc08      	bgt.n	8004d34 <__sflush_r+0xfc>
 8004d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d34:	4407      	add	r7, r0
 8004d36:	eba8 0800 	sub.w	r8, r8, r0
 8004d3a:	e7e7      	b.n	8004d0c <__sflush_r+0xd4>
 8004d3c:	20400001 	.word	0x20400001

08004d40 <_fflush_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	690b      	ldr	r3, [r1, #16]
 8004d44:	4605      	mov	r5, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	b913      	cbnz	r3, 8004d50 <_fflush_r+0x10>
 8004d4a:	2500      	movs	r5, #0
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	b118      	cbz	r0, 8004d5a <_fflush_r+0x1a>
 8004d52:	6a03      	ldr	r3, [r0, #32]
 8004d54:	b90b      	cbnz	r3, 8004d5a <_fflush_r+0x1a>
 8004d56:	f7ff fd5b 	bl	8004810 <__sinit>
 8004d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f3      	beq.n	8004d4a <_fflush_r+0xa>
 8004d62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d64:	07d0      	lsls	r0, r2, #31
 8004d66:	d404      	bmi.n	8004d72 <_fflush_r+0x32>
 8004d68:	0599      	lsls	r1, r3, #22
 8004d6a:	d402      	bmi.n	8004d72 <_fflush_r+0x32>
 8004d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d6e:	f7ff fe42 	bl	80049f6 <__retarget_lock_acquire_recursive>
 8004d72:	4628      	mov	r0, r5
 8004d74:	4621      	mov	r1, r4
 8004d76:	f7ff ff5f 	bl	8004c38 <__sflush_r>
 8004d7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d7c:	07da      	lsls	r2, r3, #31
 8004d7e:	4605      	mov	r5, r0
 8004d80:	d4e4      	bmi.n	8004d4c <_fflush_r+0xc>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	059b      	lsls	r3, r3, #22
 8004d86:	d4e1      	bmi.n	8004d4c <_fflush_r+0xc>
 8004d88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d8a:	f7ff fe35 	bl	80049f8 <__retarget_lock_release_recursive>
 8004d8e:	e7dd      	b.n	8004d4c <_fflush_r+0xc>

08004d90 <fiprintf>:
 8004d90:	b40e      	push	{r1, r2, r3}
 8004d92:	b503      	push	{r0, r1, lr}
 8004d94:	4601      	mov	r1, r0
 8004d96:	ab03      	add	r3, sp, #12
 8004d98:	4805      	ldr	r0, [pc, #20]	@ (8004db0 <fiprintf+0x20>)
 8004d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d9e:	6800      	ldr	r0, [r0, #0]
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	f000 f847 	bl	8004e34 <_vfiprintf_r>
 8004da6:	b002      	add	sp, #8
 8004da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dac:	b003      	add	sp, #12
 8004dae:	4770      	bx	lr
 8004db0:	20000014 	.word	0x20000014

08004db4 <_sbrk_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4d06      	ldr	r5, [pc, #24]	@ (8004dd0 <_sbrk_r+0x1c>)
 8004db8:	2300      	movs	r3, #0
 8004dba:	4604      	mov	r4, r0
 8004dbc:	4608      	mov	r0, r1
 8004dbe:	602b      	str	r3, [r5, #0]
 8004dc0:	f7ff fbce 	bl	8004560 <_sbrk>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d102      	bne.n	8004dce <_sbrk_r+0x1a>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	b103      	cbz	r3, 8004dce <_sbrk_r+0x1a>
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	2000a4cc 	.word	0x2000a4cc

08004dd4 <abort>:
 8004dd4:	b508      	push	{r3, lr}
 8004dd6:	2006      	movs	r0, #6
 8004dd8:	f000 fb8c 	bl	80054f4 <raise>
 8004ddc:	2001      	movs	r0, #1
 8004dde:	f7ff fb47 	bl	8004470 <_exit>

08004de2 <__sfputc_r>:
 8004de2:	6893      	ldr	r3, [r2, #8]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	b410      	push	{r4}
 8004dea:	6093      	str	r3, [r2, #8]
 8004dec:	da08      	bge.n	8004e00 <__sfputc_r+0x1e>
 8004dee:	6994      	ldr	r4, [r2, #24]
 8004df0:	42a3      	cmp	r3, r4
 8004df2:	db01      	blt.n	8004df8 <__sfputc_r+0x16>
 8004df4:	290a      	cmp	r1, #10
 8004df6:	d103      	bne.n	8004e00 <__sfputc_r+0x1e>
 8004df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dfc:	f000 babe 	b.w	800537c <__swbuf_r>
 8004e00:	6813      	ldr	r3, [r2, #0]
 8004e02:	1c58      	adds	r0, r3, #1
 8004e04:	6010      	str	r0, [r2, #0]
 8004e06:	7019      	strb	r1, [r3, #0]
 8004e08:	4608      	mov	r0, r1
 8004e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <__sfputs_r>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	4606      	mov	r6, r0
 8004e14:	460f      	mov	r7, r1
 8004e16:	4614      	mov	r4, r2
 8004e18:	18d5      	adds	r5, r2, r3
 8004e1a:	42ac      	cmp	r4, r5
 8004e1c:	d101      	bne.n	8004e22 <__sfputs_r+0x12>
 8004e1e:	2000      	movs	r0, #0
 8004e20:	e007      	b.n	8004e32 <__sfputs_r+0x22>
 8004e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e26:	463a      	mov	r2, r7
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f7ff ffda 	bl	8004de2 <__sfputc_r>
 8004e2e:	1c43      	adds	r3, r0, #1
 8004e30:	d1f3      	bne.n	8004e1a <__sfputs_r+0xa>
 8004e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e34 <_vfiprintf_r>:
 8004e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e38:	460d      	mov	r5, r1
 8004e3a:	b09d      	sub	sp, #116	@ 0x74
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	4698      	mov	r8, r3
 8004e40:	4606      	mov	r6, r0
 8004e42:	b118      	cbz	r0, 8004e4c <_vfiprintf_r+0x18>
 8004e44:	6a03      	ldr	r3, [r0, #32]
 8004e46:	b90b      	cbnz	r3, 8004e4c <_vfiprintf_r+0x18>
 8004e48:	f7ff fce2 	bl	8004810 <__sinit>
 8004e4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e4e:	07d9      	lsls	r1, r3, #31
 8004e50:	d405      	bmi.n	8004e5e <_vfiprintf_r+0x2a>
 8004e52:	89ab      	ldrh	r3, [r5, #12]
 8004e54:	059a      	lsls	r2, r3, #22
 8004e56:	d402      	bmi.n	8004e5e <_vfiprintf_r+0x2a>
 8004e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e5a:	f7ff fdcc 	bl	80049f6 <__retarget_lock_acquire_recursive>
 8004e5e:	89ab      	ldrh	r3, [r5, #12]
 8004e60:	071b      	lsls	r3, r3, #28
 8004e62:	d501      	bpl.n	8004e68 <_vfiprintf_r+0x34>
 8004e64:	692b      	ldr	r3, [r5, #16]
 8004e66:	b99b      	cbnz	r3, 8004e90 <_vfiprintf_r+0x5c>
 8004e68:	4629      	mov	r1, r5
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f000 fac4 	bl	80053f8 <__swsetup_r>
 8004e70:	b170      	cbz	r0, 8004e90 <_vfiprintf_r+0x5c>
 8004e72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e74:	07dc      	lsls	r4, r3, #31
 8004e76:	d504      	bpl.n	8004e82 <_vfiprintf_r+0x4e>
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	b01d      	add	sp, #116	@ 0x74
 8004e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e82:	89ab      	ldrh	r3, [r5, #12]
 8004e84:	0598      	lsls	r0, r3, #22
 8004e86:	d4f7      	bmi.n	8004e78 <_vfiprintf_r+0x44>
 8004e88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e8a:	f7ff fdb5 	bl	80049f8 <__retarget_lock_release_recursive>
 8004e8e:	e7f3      	b.n	8004e78 <_vfiprintf_r+0x44>
 8004e90:	2300      	movs	r3, #0
 8004e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e94:	2320      	movs	r3, #32
 8004e96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e9e:	2330      	movs	r3, #48	@ 0x30
 8004ea0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005050 <_vfiprintf_r+0x21c>
 8004ea4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ea8:	f04f 0901 	mov.w	r9, #1
 8004eac:	4623      	mov	r3, r4
 8004eae:	469a      	mov	sl, r3
 8004eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eb4:	b10a      	cbz	r2, 8004eba <_vfiprintf_r+0x86>
 8004eb6:	2a25      	cmp	r2, #37	@ 0x25
 8004eb8:	d1f9      	bne.n	8004eae <_vfiprintf_r+0x7a>
 8004eba:	ebba 0b04 	subs.w	fp, sl, r4
 8004ebe:	d00b      	beq.n	8004ed8 <_vfiprintf_r+0xa4>
 8004ec0:	465b      	mov	r3, fp
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f7ff ffa2 	bl	8004e10 <__sfputs_r>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	f000 80a7 	beq.w	8005020 <_vfiprintf_r+0x1ec>
 8004ed2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ed4:	445a      	add	r2, fp
 8004ed6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 809f 	beq.w	8005020 <_vfiprintf_r+0x1ec>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eec:	f10a 0a01 	add.w	sl, sl, #1
 8004ef0:	9304      	str	r3, [sp, #16]
 8004ef2:	9307      	str	r3, [sp, #28]
 8004ef4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ef8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004efa:	4654      	mov	r4, sl
 8004efc:	2205      	movs	r2, #5
 8004efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f02:	4853      	ldr	r0, [pc, #332]	@ (8005050 <_vfiprintf_r+0x21c>)
 8004f04:	f7fb f96c 	bl	80001e0 <memchr>
 8004f08:	9a04      	ldr	r2, [sp, #16]
 8004f0a:	b9d8      	cbnz	r0, 8004f44 <_vfiprintf_r+0x110>
 8004f0c:	06d1      	lsls	r1, r2, #27
 8004f0e:	bf44      	itt	mi
 8004f10:	2320      	movmi	r3, #32
 8004f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f16:	0713      	lsls	r3, r2, #28
 8004f18:	bf44      	itt	mi
 8004f1a:	232b      	movmi	r3, #43	@ 0x2b
 8004f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f20:	f89a 3000 	ldrb.w	r3, [sl]
 8004f24:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f26:	d015      	beq.n	8004f54 <_vfiprintf_r+0x120>
 8004f28:	9a07      	ldr	r2, [sp, #28]
 8004f2a:	4654      	mov	r4, sl
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	f04f 0c0a 	mov.w	ip, #10
 8004f32:	4621      	mov	r1, r4
 8004f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f38:	3b30      	subs	r3, #48	@ 0x30
 8004f3a:	2b09      	cmp	r3, #9
 8004f3c:	d94b      	bls.n	8004fd6 <_vfiprintf_r+0x1a2>
 8004f3e:	b1b0      	cbz	r0, 8004f6e <_vfiprintf_r+0x13a>
 8004f40:	9207      	str	r2, [sp, #28]
 8004f42:	e014      	b.n	8004f6e <_vfiprintf_r+0x13a>
 8004f44:	eba0 0308 	sub.w	r3, r0, r8
 8004f48:	fa09 f303 	lsl.w	r3, r9, r3
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	9304      	str	r3, [sp, #16]
 8004f50:	46a2      	mov	sl, r4
 8004f52:	e7d2      	b.n	8004efa <_vfiprintf_r+0xc6>
 8004f54:	9b03      	ldr	r3, [sp, #12]
 8004f56:	1d19      	adds	r1, r3, #4
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	9103      	str	r1, [sp, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bfbb      	ittet	lt
 8004f60:	425b      	neglt	r3, r3
 8004f62:	f042 0202 	orrlt.w	r2, r2, #2
 8004f66:	9307      	strge	r3, [sp, #28]
 8004f68:	9307      	strlt	r3, [sp, #28]
 8004f6a:	bfb8      	it	lt
 8004f6c:	9204      	strlt	r2, [sp, #16]
 8004f6e:	7823      	ldrb	r3, [r4, #0]
 8004f70:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f72:	d10a      	bne.n	8004f8a <_vfiprintf_r+0x156>
 8004f74:	7863      	ldrb	r3, [r4, #1]
 8004f76:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f78:	d132      	bne.n	8004fe0 <_vfiprintf_r+0x1ac>
 8004f7a:	9b03      	ldr	r3, [sp, #12]
 8004f7c:	1d1a      	adds	r2, r3, #4
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	9203      	str	r2, [sp, #12]
 8004f82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f86:	3402      	adds	r4, #2
 8004f88:	9305      	str	r3, [sp, #20]
 8004f8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005060 <_vfiprintf_r+0x22c>
 8004f8e:	7821      	ldrb	r1, [r4, #0]
 8004f90:	2203      	movs	r2, #3
 8004f92:	4650      	mov	r0, sl
 8004f94:	f7fb f924 	bl	80001e0 <memchr>
 8004f98:	b138      	cbz	r0, 8004faa <_vfiprintf_r+0x176>
 8004f9a:	9b04      	ldr	r3, [sp, #16]
 8004f9c:	eba0 000a 	sub.w	r0, r0, sl
 8004fa0:	2240      	movs	r2, #64	@ 0x40
 8004fa2:	4082      	lsls	r2, r0
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	3401      	adds	r4, #1
 8004fa8:	9304      	str	r3, [sp, #16]
 8004faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fae:	4829      	ldr	r0, [pc, #164]	@ (8005054 <_vfiprintf_r+0x220>)
 8004fb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fb4:	2206      	movs	r2, #6
 8004fb6:	f7fb f913 	bl	80001e0 <memchr>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d03f      	beq.n	800503e <_vfiprintf_r+0x20a>
 8004fbe:	4b26      	ldr	r3, [pc, #152]	@ (8005058 <_vfiprintf_r+0x224>)
 8004fc0:	bb1b      	cbnz	r3, 800500a <_vfiprintf_r+0x1d6>
 8004fc2:	9b03      	ldr	r3, [sp, #12]
 8004fc4:	3307      	adds	r3, #7
 8004fc6:	f023 0307 	bic.w	r3, r3, #7
 8004fca:	3308      	adds	r3, #8
 8004fcc:	9303      	str	r3, [sp, #12]
 8004fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fd0:	443b      	add	r3, r7
 8004fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fd4:	e76a      	b.n	8004eac <_vfiprintf_r+0x78>
 8004fd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fda:	460c      	mov	r4, r1
 8004fdc:	2001      	movs	r0, #1
 8004fde:	e7a8      	b.n	8004f32 <_vfiprintf_r+0xfe>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	3401      	adds	r4, #1
 8004fe4:	9305      	str	r3, [sp, #20]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	f04f 0c0a 	mov.w	ip, #10
 8004fec:	4620      	mov	r0, r4
 8004fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ff2:	3a30      	subs	r2, #48	@ 0x30
 8004ff4:	2a09      	cmp	r2, #9
 8004ff6:	d903      	bls.n	8005000 <_vfiprintf_r+0x1cc>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0c6      	beq.n	8004f8a <_vfiprintf_r+0x156>
 8004ffc:	9105      	str	r1, [sp, #20]
 8004ffe:	e7c4      	b.n	8004f8a <_vfiprintf_r+0x156>
 8005000:	fb0c 2101 	mla	r1, ip, r1, r2
 8005004:	4604      	mov	r4, r0
 8005006:	2301      	movs	r3, #1
 8005008:	e7f0      	b.n	8004fec <_vfiprintf_r+0x1b8>
 800500a:	ab03      	add	r3, sp, #12
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	462a      	mov	r2, r5
 8005010:	4b12      	ldr	r3, [pc, #72]	@ (800505c <_vfiprintf_r+0x228>)
 8005012:	a904      	add	r1, sp, #16
 8005014:	4630      	mov	r0, r6
 8005016:	f3af 8000 	nop.w
 800501a:	4607      	mov	r7, r0
 800501c:	1c78      	adds	r0, r7, #1
 800501e:	d1d6      	bne.n	8004fce <_vfiprintf_r+0x19a>
 8005020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005022:	07d9      	lsls	r1, r3, #31
 8005024:	d405      	bmi.n	8005032 <_vfiprintf_r+0x1fe>
 8005026:	89ab      	ldrh	r3, [r5, #12]
 8005028:	059a      	lsls	r2, r3, #22
 800502a:	d402      	bmi.n	8005032 <_vfiprintf_r+0x1fe>
 800502c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800502e:	f7ff fce3 	bl	80049f8 <__retarget_lock_release_recursive>
 8005032:	89ab      	ldrh	r3, [r5, #12]
 8005034:	065b      	lsls	r3, r3, #25
 8005036:	f53f af1f 	bmi.w	8004e78 <_vfiprintf_r+0x44>
 800503a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800503c:	e71e      	b.n	8004e7c <_vfiprintf_r+0x48>
 800503e:	ab03      	add	r3, sp, #12
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	462a      	mov	r2, r5
 8005044:	4b05      	ldr	r3, [pc, #20]	@ (800505c <_vfiprintf_r+0x228>)
 8005046:	a904      	add	r1, sp, #16
 8005048:	4630      	mov	r0, r6
 800504a:	f000 f879 	bl	8005140 <_printf_i>
 800504e:	e7e4      	b.n	800501a <_vfiprintf_r+0x1e6>
 8005050:	08005d7b 	.word	0x08005d7b
 8005054:	08005d85 	.word	0x08005d85
 8005058:	00000000 	.word	0x00000000
 800505c:	08004e11 	.word	0x08004e11
 8005060:	08005d81 	.word	0x08005d81

08005064 <_printf_common>:
 8005064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005068:	4616      	mov	r6, r2
 800506a:	4698      	mov	r8, r3
 800506c:	688a      	ldr	r2, [r1, #8]
 800506e:	690b      	ldr	r3, [r1, #16]
 8005070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005074:	4293      	cmp	r3, r2
 8005076:	bfb8      	it	lt
 8005078:	4613      	movlt	r3, r2
 800507a:	6033      	str	r3, [r6, #0]
 800507c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005080:	4607      	mov	r7, r0
 8005082:	460c      	mov	r4, r1
 8005084:	b10a      	cbz	r2, 800508a <_printf_common+0x26>
 8005086:	3301      	adds	r3, #1
 8005088:	6033      	str	r3, [r6, #0]
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	0699      	lsls	r1, r3, #26
 800508e:	bf42      	ittt	mi
 8005090:	6833      	ldrmi	r3, [r6, #0]
 8005092:	3302      	addmi	r3, #2
 8005094:	6033      	strmi	r3, [r6, #0]
 8005096:	6825      	ldr	r5, [r4, #0]
 8005098:	f015 0506 	ands.w	r5, r5, #6
 800509c:	d106      	bne.n	80050ac <_printf_common+0x48>
 800509e:	f104 0a19 	add.w	sl, r4, #25
 80050a2:	68e3      	ldr	r3, [r4, #12]
 80050a4:	6832      	ldr	r2, [r6, #0]
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	42ab      	cmp	r3, r5
 80050aa:	dc26      	bgt.n	80050fa <_printf_common+0x96>
 80050ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050b0:	6822      	ldr	r2, [r4, #0]
 80050b2:	3b00      	subs	r3, #0
 80050b4:	bf18      	it	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	0692      	lsls	r2, r2, #26
 80050ba:	d42b      	bmi.n	8005114 <_printf_common+0xb0>
 80050bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050c0:	4641      	mov	r1, r8
 80050c2:	4638      	mov	r0, r7
 80050c4:	47c8      	blx	r9
 80050c6:	3001      	adds	r0, #1
 80050c8:	d01e      	beq.n	8005108 <_printf_common+0xa4>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	6922      	ldr	r2, [r4, #16]
 80050ce:	f003 0306 	and.w	r3, r3, #6
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	bf02      	ittt	eq
 80050d6:	68e5      	ldreq	r5, [r4, #12]
 80050d8:	6833      	ldreq	r3, [r6, #0]
 80050da:	1aed      	subeq	r5, r5, r3
 80050dc:	68a3      	ldr	r3, [r4, #8]
 80050de:	bf0c      	ite	eq
 80050e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e4:	2500      	movne	r5, #0
 80050e6:	4293      	cmp	r3, r2
 80050e8:	bfc4      	itt	gt
 80050ea:	1a9b      	subgt	r3, r3, r2
 80050ec:	18ed      	addgt	r5, r5, r3
 80050ee:	2600      	movs	r6, #0
 80050f0:	341a      	adds	r4, #26
 80050f2:	42b5      	cmp	r5, r6
 80050f4:	d11a      	bne.n	800512c <_printf_common+0xc8>
 80050f6:	2000      	movs	r0, #0
 80050f8:	e008      	b.n	800510c <_printf_common+0xa8>
 80050fa:	2301      	movs	r3, #1
 80050fc:	4652      	mov	r2, sl
 80050fe:	4641      	mov	r1, r8
 8005100:	4638      	mov	r0, r7
 8005102:	47c8      	blx	r9
 8005104:	3001      	adds	r0, #1
 8005106:	d103      	bne.n	8005110 <_printf_common+0xac>
 8005108:	f04f 30ff 	mov.w	r0, #4294967295
 800510c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005110:	3501      	adds	r5, #1
 8005112:	e7c6      	b.n	80050a2 <_printf_common+0x3e>
 8005114:	18e1      	adds	r1, r4, r3
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	2030      	movs	r0, #48	@ 0x30
 800511a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800511e:	4422      	add	r2, r4
 8005120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005128:	3302      	adds	r3, #2
 800512a:	e7c7      	b.n	80050bc <_printf_common+0x58>
 800512c:	2301      	movs	r3, #1
 800512e:	4622      	mov	r2, r4
 8005130:	4641      	mov	r1, r8
 8005132:	4638      	mov	r0, r7
 8005134:	47c8      	blx	r9
 8005136:	3001      	adds	r0, #1
 8005138:	d0e6      	beq.n	8005108 <_printf_common+0xa4>
 800513a:	3601      	adds	r6, #1
 800513c:	e7d9      	b.n	80050f2 <_printf_common+0x8e>
	...

08005140 <_printf_i>:
 8005140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005144:	7e0f      	ldrb	r7, [r1, #24]
 8005146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005148:	2f78      	cmp	r7, #120	@ 0x78
 800514a:	4691      	mov	r9, r2
 800514c:	4680      	mov	r8, r0
 800514e:	460c      	mov	r4, r1
 8005150:	469a      	mov	sl, r3
 8005152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005156:	d807      	bhi.n	8005168 <_printf_i+0x28>
 8005158:	2f62      	cmp	r7, #98	@ 0x62
 800515a:	d80a      	bhi.n	8005172 <_printf_i+0x32>
 800515c:	2f00      	cmp	r7, #0
 800515e:	f000 80d1 	beq.w	8005304 <_printf_i+0x1c4>
 8005162:	2f58      	cmp	r7, #88	@ 0x58
 8005164:	f000 80b8 	beq.w	80052d8 <_printf_i+0x198>
 8005168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800516c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005170:	e03a      	b.n	80051e8 <_printf_i+0xa8>
 8005172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005176:	2b15      	cmp	r3, #21
 8005178:	d8f6      	bhi.n	8005168 <_printf_i+0x28>
 800517a:	a101      	add	r1, pc, #4	@ (adr r1, 8005180 <_printf_i+0x40>)
 800517c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005180:	080051d9 	.word	0x080051d9
 8005184:	080051ed 	.word	0x080051ed
 8005188:	08005169 	.word	0x08005169
 800518c:	08005169 	.word	0x08005169
 8005190:	08005169 	.word	0x08005169
 8005194:	08005169 	.word	0x08005169
 8005198:	080051ed 	.word	0x080051ed
 800519c:	08005169 	.word	0x08005169
 80051a0:	08005169 	.word	0x08005169
 80051a4:	08005169 	.word	0x08005169
 80051a8:	08005169 	.word	0x08005169
 80051ac:	080052eb 	.word	0x080052eb
 80051b0:	08005217 	.word	0x08005217
 80051b4:	080052a5 	.word	0x080052a5
 80051b8:	08005169 	.word	0x08005169
 80051bc:	08005169 	.word	0x08005169
 80051c0:	0800530d 	.word	0x0800530d
 80051c4:	08005169 	.word	0x08005169
 80051c8:	08005217 	.word	0x08005217
 80051cc:	08005169 	.word	0x08005169
 80051d0:	08005169 	.word	0x08005169
 80051d4:	080052ad 	.word	0x080052ad
 80051d8:	6833      	ldr	r3, [r6, #0]
 80051da:	1d1a      	adds	r2, r3, #4
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6032      	str	r2, [r6, #0]
 80051e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051e8:	2301      	movs	r3, #1
 80051ea:	e09c      	b.n	8005326 <_printf_i+0x1e6>
 80051ec:	6833      	ldr	r3, [r6, #0]
 80051ee:	6820      	ldr	r0, [r4, #0]
 80051f0:	1d19      	adds	r1, r3, #4
 80051f2:	6031      	str	r1, [r6, #0]
 80051f4:	0606      	lsls	r6, r0, #24
 80051f6:	d501      	bpl.n	80051fc <_printf_i+0xbc>
 80051f8:	681d      	ldr	r5, [r3, #0]
 80051fa:	e003      	b.n	8005204 <_printf_i+0xc4>
 80051fc:	0645      	lsls	r5, r0, #25
 80051fe:	d5fb      	bpl.n	80051f8 <_printf_i+0xb8>
 8005200:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005204:	2d00      	cmp	r5, #0
 8005206:	da03      	bge.n	8005210 <_printf_i+0xd0>
 8005208:	232d      	movs	r3, #45	@ 0x2d
 800520a:	426d      	negs	r5, r5
 800520c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005210:	4858      	ldr	r0, [pc, #352]	@ (8005374 <_printf_i+0x234>)
 8005212:	230a      	movs	r3, #10
 8005214:	e011      	b.n	800523a <_printf_i+0xfa>
 8005216:	6821      	ldr	r1, [r4, #0]
 8005218:	6833      	ldr	r3, [r6, #0]
 800521a:	0608      	lsls	r0, r1, #24
 800521c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005220:	d402      	bmi.n	8005228 <_printf_i+0xe8>
 8005222:	0649      	lsls	r1, r1, #25
 8005224:	bf48      	it	mi
 8005226:	b2ad      	uxthmi	r5, r5
 8005228:	2f6f      	cmp	r7, #111	@ 0x6f
 800522a:	4852      	ldr	r0, [pc, #328]	@ (8005374 <_printf_i+0x234>)
 800522c:	6033      	str	r3, [r6, #0]
 800522e:	bf14      	ite	ne
 8005230:	230a      	movne	r3, #10
 8005232:	2308      	moveq	r3, #8
 8005234:	2100      	movs	r1, #0
 8005236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800523a:	6866      	ldr	r6, [r4, #4]
 800523c:	60a6      	str	r6, [r4, #8]
 800523e:	2e00      	cmp	r6, #0
 8005240:	db05      	blt.n	800524e <_printf_i+0x10e>
 8005242:	6821      	ldr	r1, [r4, #0]
 8005244:	432e      	orrs	r6, r5
 8005246:	f021 0104 	bic.w	r1, r1, #4
 800524a:	6021      	str	r1, [r4, #0]
 800524c:	d04b      	beq.n	80052e6 <_printf_i+0x1a6>
 800524e:	4616      	mov	r6, r2
 8005250:	fbb5 f1f3 	udiv	r1, r5, r3
 8005254:	fb03 5711 	mls	r7, r3, r1, r5
 8005258:	5dc7      	ldrb	r7, [r0, r7]
 800525a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800525e:	462f      	mov	r7, r5
 8005260:	42bb      	cmp	r3, r7
 8005262:	460d      	mov	r5, r1
 8005264:	d9f4      	bls.n	8005250 <_printf_i+0x110>
 8005266:	2b08      	cmp	r3, #8
 8005268:	d10b      	bne.n	8005282 <_printf_i+0x142>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	07df      	lsls	r7, r3, #31
 800526e:	d508      	bpl.n	8005282 <_printf_i+0x142>
 8005270:	6923      	ldr	r3, [r4, #16]
 8005272:	6861      	ldr	r1, [r4, #4]
 8005274:	4299      	cmp	r1, r3
 8005276:	bfde      	ittt	le
 8005278:	2330      	movle	r3, #48	@ 0x30
 800527a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800527e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005282:	1b92      	subs	r2, r2, r6
 8005284:	6122      	str	r2, [r4, #16]
 8005286:	f8cd a000 	str.w	sl, [sp]
 800528a:	464b      	mov	r3, r9
 800528c:	aa03      	add	r2, sp, #12
 800528e:	4621      	mov	r1, r4
 8005290:	4640      	mov	r0, r8
 8005292:	f7ff fee7 	bl	8005064 <_printf_common>
 8005296:	3001      	adds	r0, #1
 8005298:	d14a      	bne.n	8005330 <_printf_i+0x1f0>
 800529a:	f04f 30ff 	mov.w	r0, #4294967295
 800529e:	b004      	add	sp, #16
 80052a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	f043 0320 	orr.w	r3, r3, #32
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	4832      	ldr	r0, [pc, #200]	@ (8005378 <_printf_i+0x238>)
 80052ae:	2778      	movs	r7, #120	@ 0x78
 80052b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	6831      	ldr	r1, [r6, #0]
 80052b8:	061f      	lsls	r7, r3, #24
 80052ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80052be:	d402      	bmi.n	80052c6 <_printf_i+0x186>
 80052c0:	065f      	lsls	r7, r3, #25
 80052c2:	bf48      	it	mi
 80052c4:	b2ad      	uxthmi	r5, r5
 80052c6:	6031      	str	r1, [r6, #0]
 80052c8:	07d9      	lsls	r1, r3, #31
 80052ca:	bf44      	itt	mi
 80052cc:	f043 0320 	orrmi.w	r3, r3, #32
 80052d0:	6023      	strmi	r3, [r4, #0]
 80052d2:	b11d      	cbz	r5, 80052dc <_printf_i+0x19c>
 80052d4:	2310      	movs	r3, #16
 80052d6:	e7ad      	b.n	8005234 <_printf_i+0xf4>
 80052d8:	4826      	ldr	r0, [pc, #152]	@ (8005374 <_printf_i+0x234>)
 80052da:	e7e9      	b.n	80052b0 <_printf_i+0x170>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	f023 0320 	bic.w	r3, r3, #32
 80052e2:	6023      	str	r3, [r4, #0]
 80052e4:	e7f6      	b.n	80052d4 <_printf_i+0x194>
 80052e6:	4616      	mov	r6, r2
 80052e8:	e7bd      	b.n	8005266 <_printf_i+0x126>
 80052ea:	6833      	ldr	r3, [r6, #0]
 80052ec:	6825      	ldr	r5, [r4, #0]
 80052ee:	6961      	ldr	r1, [r4, #20]
 80052f0:	1d18      	adds	r0, r3, #4
 80052f2:	6030      	str	r0, [r6, #0]
 80052f4:	062e      	lsls	r6, r5, #24
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	d501      	bpl.n	80052fe <_printf_i+0x1be>
 80052fa:	6019      	str	r1, [r3, #0]
 80052fc:	e002      	b.n	8005304 <_printf_i+0x1c4>
 80052fe:	0668      	lsls	r0, r5, #25
 8005300:	d5fb      	bpl.n	80052fa <_printf_i+0x1ba>
 8005302:	8019      	strh	r1, [r3, #0]
 8005304:	2300      	movs	r3, #0
 8005306:	6123      	str	r3, [r4, #16]
 8005308:	4616      	mov	r6, r2
 800530a:	e7bc      	b.n	8005286 <_printf_i+0x146>
 800530c:	6833      	ldr	r3, [r6, #0]
 800530e:	1d1a      	adds	r2, r3, #4
 8005310:	6032      	str	r2, [r6, #0]
 8005312:	681e      	ldr	r6, [r3, #0]
 8005314:	6862      	ldr	r2, [r4, #4]
 8005316:	2100      	movs	r1, #0
 8005318:	4630      	mov	r0, r6
 800531a:	f7fa ff61 	bl	80001e0 <memchr>
 800531e:	b108      	cbz	r0, 8005324 <_printf_i+0x1e4>
 8005320:	1b80      	subs	r0, r0, r6
 8005322:	6060      	str	r0, [r4, #4]
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	6123      	str	r3, [r4, #16]
 8005328:	2300      	movs	r3, #0
 800532a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800532e:	e7aa      	b.n	8005286 <_printf_i+0x146>
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	4632      	mov	r2, r6
 8005334:	4649      	mov	r1, r9
 8005336:	4640      	mov	r0, r8
 8005338:	47d0      	blx	sl
 800533a:	3001      	adds	r0, #1
 800533c:	d0ad      	beq.n	800529a <_printf_i+0x15a>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	079b      	lsls	r3, r3, #30
 8005342:	d413      	bmi.n	800536c <_printf_i+0x22c>
 8005344:	68e0      	ldr	r0, [r4, #12]
 8005346:	9b03      	ldr	r3, [sp, #12]
 8005348:	4298      	cmp	r0, r3
 800534a:	bfb8      	it	lt
 800534c:	4618      	movlt	r0, r3
 800534e:	e7a6      	b.n	800529e <_printf_i+0x15e>
 8005350:	2301      	movs	r3, #1
 8005352:	4632      	mov	r2, r6
 8005354:	4649      	mov	r1, r9
 8005356:	4640      	mov	r0, r8
 8005358:	47d0      	blx	sl
 800535a:	3001      	adds	r0, #1
 800535c:	d09d      	beq.n	800529a <_printf_i+0x15a>
 800535e:	3501      	adds	r5, #1
 8005360:	68e3      	ldr	r3, [r4, #12]
 8005362:	9903      	ldr	r1, [sp, #12]
 8005364:	1a5b      	subs	r3, r3, r1
 8005366:	42ab      	cmp	r3, r5
 8005368:	dcf2      	bgt.n	8005350 <_printf_i+0x210>
 800536a:	e7eb      	b.n	8005344 <_printf_i+0x204>
 800536c:	2500      	movs	r5, #0
 800536e:	f104 0619 	add.w	r6, r4, #25
 8005372:	e7f5      	b.n	8005360 <_printf_i+0x220>
 8005374:	08005d8c 	.word	0x08005d8c
 8005378:	08005d9d 	.word	0x08005d9d

0800537c <__swbuf_r>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	460e      	mov	r6, r1
 8005380:	4614      	mov	r4, r2
 8005382:	4605      	mov	r5, r0
 8005384:	b118      	cbz	r0, 800538e <__swbuf_r+0x12>
 8005386:	6a03      	ldr	r3, [r0, #32]
 8005388:	b90b      	cbnz	r3, 800538e <__swbuf_r+0x12>
 800538a:	f7ff fa41 	bl	8004810 <__sinit>
 800538e:	69a3      	ldr	r3, [r4, #24]
 8005390:	60a3      	str	r3, [r4, #8]
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	071a      	lsls	r2, r3, #28
 8005396:	d501      	bpl.n	800539c <__swbuf_r+0x20>
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	b943      	cbnz	r3, 80053ae <__swbuf_r+0x32>
 800539c:	4621      	mov	r1, r4
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 f82a 	bl	80053f8 <__swsetup_r>
 80053a4:	b118      	cbz	r0, 80053ae <__swbuf_r+0x32>
 80053a6:	f04f 37ff 	mov.w	r7, #4294967295
 80053aa:	4638      	mov	r0, r7
 80053ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	6922      	ldr	r2, [r4, #16]
 80053b2:	1a98      	subs	r0, r3, r2
 80053b4:	6963      	ldr	r3, [r4, #20]
 80053b6:	b2f6      	uxtb	r6, r6
 80053b8:	4283      	cmp	r3, r0
 80053ba:	4637      	mov	r7, r6
 80053bc:	dc05      	bgt.n	80053ca <__swbuf_r+0x4e>
 80053be:	4621      	mov	r1, r4
 80053c0:	4628      	mov	r0, r5
 80053c2:	f7ff fcbd 	bl	8004d40 <_fflush_r>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d1ed      	bne.n	80053a6 <__swbuf_r+0x2a>
 80053ca:	68a3      	ldr	r3, [r4, #8]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	60a3      	str	r3, [r4, #8]
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	6022      	str	r2, [r4, #0]
 80053d6:	701e      	strb	r6, [r3, #0]
 80053d8:	6962      	ldr	r2, [r4, #20]
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	429a      	cmp	r2, r3
 80053de:	d004      	beq.n	80053ea <__swbuf_r+0x6e>
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	07db      	lsls	r3, r3, #31
 80053e4:	d5e1      	bpl.n	80053aa <__swbuf_r+0x2e>
 80053e6:	2e0a      	cmp	r6, #10
 80053e8:	d1df      	bne.n	80053aa <__swbuf_r+0x2e>
 80053ea:	4621      	mov	r1, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	f7ff fca7 	bl	8004d40 <_fflush_r>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d0d9      	beq.n	80053aa <__swbuf_r+0x2e>
 80053f6:	e7d6      	b.n	80053a6 <__swbuf_r+0x2a>

080053f8 <__swsetup_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4b29      	ldr	r3, [pc, #164]	@ (80054a0 <__swsetup_r+0xa8>)
 80053fc:	4605      	mov	r5, r0
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	460c      	mov	r4, r1
 8005402:	b118      	cbz	r0, 800540c <__swsetup_r+0x14>
 8005404:	6a03      	ldr	r3, [r0, #32]
 8005406:	b90b      	cbnz	r3, 800540c <__swsetup_r+0x14>
 8005408:	f7ff fa02 	bl	8004810 <__sinit>
 800540c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005410:	0719      	lsls	r1, r3, #28
 8005412:	d422      	bmi.n	800545a <__swsetup_r+0x62>
 8005414:	06da      	lsls	r2, r3, #27
 8005416:	d407      	bmi.n	8005428 <__swsetup_r+0x30>
 8005418:	2209      	movs	r2, #9
 800541a:	602a      	str	r2, [r5, #0]
 800541c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	f04f 30ff 	mov.w	r0, #4294967295
 8005426:	e033      	b.n	8005490 <__swsetup_r+0x98>
 8005428:	0758      	lsls	r0, r3, #29
 800542a:	d512      	bpl.n	8005452 <__swsetup_r+0x5a>
 800542c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800542e:	b141      	cbz	r1, 8005442 <__swsetup_r+0x4a>
 8005430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005434:	4299      	cmp	r1, r3
 8005436:	d002      	beq.n	800543e <__swsetup_r+0x46>
 8005438:	4628      	mov	r0, r5
 800543a:	f7ff fafd 	bl	8004a38 <_free_r>
 800543e:	2300      	movs	r3, #0
 8005440:	6363      	str	r3, [r4, #52]	@ 0x34
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005448:	81a3      	strh	r3, [r4, #12]
 800544a:	2300      	movs	r3, #0
 800544c:	6063      	str	r3, [r4, #4]
 800544e:	6923      	ldr	r3, [r4, #16]
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	f043 0308 	orr.w	r3, r3, #8
 8005458:	81a3      	strh	r3, [r4, #12]
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	b94b      	cbnz	r3, 8005472 <__swsetup_r+0x7a>
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005468:	d003      	beq.n	8005472 <__swsetup_r+0x7a>
 800546a:	4621      	mov	r1, r4
 800546c:	4628      	mov	r0, r5
 800546e:	f000 f883 	bl	8005578 <__smakebuf_r>
 8005472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005476:	f013 0201 	ands.w	r2, r3, #1
 800547a:	d00a      	beq.n	8005492 <__swsetup_r+0x9a>
 800547c:	2200      	movs	r2, #0
 800547e:	60a2      	str	r2, [r4, #8]
 8005480:	6962      	ldr	r2, [r4, #20]
 8005482:	4252      	negs	r2, r2
 8005484:	61a2      	str	r2, [r4, #24]
 8005486:	6922      	ldr	r2, [r4, #16]
 8005488:	b942      	cbnz	r2, 800549c <__swsetup_r+0xa4>
 800548a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800548e:	d1c5      	bne.n	800541c <__swsetup_r+0x24>
 8005490:	bd38      	pop	{r3, r4, r5, pc}
 8005492:	0799      	lsls	r1, r3, #30
 8005494:	bf58      	it	pl
 8005496:	6962      	ldrpl	r2, [r4, #20]
 8005498:	60a2      	str	r2, [r4, #8]
 800549a:	e7f4      	b.n	8005486 <__swsetup_r+0x8e>
 800549c:	2000      	movs	r0, #0
 800549e:	e7f7      	b.n	8005490 <__swsetup_r+0x98>
 80054a0:	20000014 	.word	0x20000014

080054a4 <_raise_r>:
 80054a4:	291f      	cmp	r1, #31
 80054a6:	b538      	push	{r3, r4, r5, lr}
 80054a8:	4605      	mov	r5, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	d904      	bls.n	80054b8 <_raise_r+0x14>
 80054ae:	2316      	movs	r3, #22
 80054b0:	6003      	str	r3, [r0, #0]
 80054b2:	f04f 30ff 	mov.w	r0, #4294967295
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80054ba:	b112      	cbz	r2, 80054c2 <_raise_r+0x1e>
 80054bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80054c0:	b94b      	cbnz	r3, 80054d6 <_raise_r+0x32>
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 f830 	bl	8005528 <_getpid_r>
 80054c8:	4622      	mov	r2, r4
 80054ca:	4601      	mov	r1, r0
 80054cc:	4628      	mov	r0, r5
 80054ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054d2:	f000 b817 	b.w	8005504 <_kill_r>
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d00a      	beq.n	80054f0 <_raise_r+0x4c>
 80054da:	1c59      	adds	r1, r3, #1
 80054dc:	d103      	bne.n	80054e6 <_raise_r+0x42>
 80054de:	2316      	movs	r3, #22
 80054e0:	6003      	str	r3, [r0, #0]
 80054e2:	2001      	movs	r0, #1
 80054e4:	e7e7      	b.n	80054b6 <_raise_r+0x12>
 80054e6:	2100      	movs	r1, #0
 80054e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80054ec:	4620      	mov	r0, r4
 80054ee:	4798      	blx	r3
 80054f0:	2000      	movs	r0, #0
 80054f2:	e7e0      	b.n	80054b6 <_raise_r+0x12>

080054f4 <raise>:
 80054f4:	4b02      	ldr	r3, [pc, #8]	@ (8005500 <raise+0xc>)
 80054f6:	4601      	mov	r1, r0
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	f7ff bfd3 	b.w	80054a4 <_raise_r>
 80054fe:	bf00      	nop
 8005500:	20000014 	.word	0x20000014

08005504 <_kill_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d07      	ldr	r5, [pc, #28]	@ (8005524 <_kill_r+0x20>)
 8005508:	2300      	movs	r3, #0
 800550a:	4604      	mov	r4, r0
 800550c:	4608      	mov	r0, r1
 800550e:	4611      	mov	r1, r2
 8005510:	602b      	str	r3, [r5, #0]
 8005512:	f7fe ff9d 	bl	8004450 <_kill>
 8005516:	1c43      	adds	r3, r0, #1
 8005518:	d102      	bne.n	8005520 <_kill_r+0x1c>
 800551a:	682b      	ldr	r3, [r5, #0]
 800551c:	b103      	cbz	r3, 8005520 <_kill_r+0x1c>
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	bd38      	pop	{r3, r4, r5, pc}
 8005522:	bf00      	nop
 8005524:	2000a4cc 	.word	0x2000a4cc

08005528 <_getpid_r>:
 8005528:	f7fe bf8a 	b.w	8004440 <_getpid>

0800552c <__swhatbuf_r>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	460c      	mov	r4, r1
 8005530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005534:	2900      	cmp	r1, #0
 8005536:	b096      	sub	sp, #88	@ 0x58
 8005538:	4615      	mov	r5, r2
 800553a:	461e      	mov	r6, r3
 800553c:	da0d      	bge.n	800555a <__swhatbuf_r+0x2e>
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	bf14      	ite	ne
 800554a:	2340      	movne	r3, #64	@ 0x40
 800554c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005550:	2000      	movs	r0, #0
 8005552:	6031      	str	r1, [r6, #0]
 8005554:	602b      	str	r3, [r5, #0]
 8005556:	b016      	add	sp, #88	@ 0x58
 8005558:	bd70      	pop	{r4, r5, r6, pc}
 800555a:	466a      	mov	r2, sp
 800555c:	f000 f848 	bl	80055f0 <_fstat_r>
 8005560:	2800      	cmp	r0, #0
 8005562:	dbec      	blt.n	800553e <__swhatbuf_r+0x12>
 8005564:	9901      	ldr	r1, [sp, #4]
 8005566:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800556a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800556e:	4259      	negs	r1, r3
 8005570:	4159      	adcs	r1, r3
 8005572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005576:	e7eb      	b.n	8005550 <__swhatbuf_r+0x24>

08005578 <__smakebuf_r>:
 8005578:	898b      	ldrh	r3, [r1, #12]
 800557a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800557c:	079d      	lsls	r5, r3, #30
 800557e:	4606      	mov	r6, r0
 8005580:	460c      	mov	r4, r1
 8005582:	d507      	bpl.n	8005594 <__smakebuf_r+0x1c>
 8005584:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	6123      	str	r3, [r4, #16]
 800558c:	2301      	movs	r3, #1
 800558e:	6163      	str	r3, [r4, #20]
 8005590:	b003      	add	sp, #12
 8005592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005594:	ab01      	add	r3, sp, #4
 8005596:	466a      	mov	r2, sp
 8005598:	f7ff ffc8 	bl	800552c <__swhatbuf_r>
 800559c:	9f00      	ldr	r7, [sp, #0]
 800559e:	4605      	mov	r5, r0
 80055a0:	4639      	mov	r1, r7
 80055a2:	4630      	mov	r0, r6
 80055a4:	f7ff fabc 	bl	8004b20 <_malloc_r>
 80055a8:	b948      	cbnz	r0, 80055be <__smakebuf_r+0x46>
 80055aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ae:	059a      	lsls	r2, r3, #22
 80055b0:	d4ee      	bmi.n	8005590 <__smakebuf_r+0x18>
 80055b2:	f023 0303 	bic.w	r3, r3, #3
 80055b6:	f043 0302 	orr.w	r3, r3, #2
 80055ba:	81a3      	strh	r3, [r4, #12]
 80055bc:	e7e2      	b.n	8005584 <__smakebuf_r+0xc>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	6020      	str	r0, [r4, #0]
 80055c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	9b01      	ldr	r3, [sp, #4]
 80055ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055ce:	b15b      	cbz	r3, 80055e8 <__smakebuf_r+0x70>
 80055d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055d4:	4630      	mov	r0, r6
 80055d6:	f000 f81d 	bl	8005614 <_isatty_r>
 80055da:	b128      	cbz	r0, 80055e8 <__smakebuf_r+0x70>
 80055dc:	89a3      	ldrh	r3, [r4, #12]
 80055de:	f023 0303 	bic.w	r3, r3, #3
 80055e2:	f043 0301 	orr.w	r3, r3, #1
 80055e6:	81a3      	strh	r3, [r4, #12]
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	431d      	orrs	r5, r3
 80055ec:	81a5      	strh	r5, [r4, #12]
 80055ee:	e7cf      	b.n	8005590 <__smakebuf_r+0x18>

080055f0 <_fstat_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4d07      	ldr	r5, [pc, #28]	@ (8005610 <_fstat_r+0x20>)
 80055f4:	2300      	movs	r3, #0
 80055f6:	4604      	mov	r4, r0
 80055f8:	4608      	mov	r0, r1
 80055fa:	4611      	mov	r1, r2
 80055fc:	602b      	str	r3, [r5, #0]
 80055fe:	f7fe ff87 	bl	8004510 <_fstat>
 8005602:	1c43      	adds	r3, r0, #1
 8005604:	d102      	bne.n	800560c <_fstat_r+0x1c>
 8005606:	682b      	ldr	r3, [r5, #0]
 8005608:	b103      	cbz	r3, 800560c <_fstat_r+0x1c>
 800560a:	6023      	str	r3, [r4, #0]
 800560c:	bd38      	pop	{r3, r4, r5, pc}
 800560e:	bf00      	nop
 8005610:	2000a4cc 	.word	0x2000a4cc

08005614 <_isatty_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d06      	ldr	r5, [pc, #24]	@ (8005630 <_isatty_r+0x1c>)
 8005618:	2300      	movs	r3, #0
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	602b      	str	r3, [r5, #0]
 8005620:	f7fe ff86 	bl	8004530 <_isatty>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_isatty_r+0x1a>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	b103      	cbz	r3, 800562e <_isatty_r+0x1a>
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	2000a4cc 	.word	0x2000a4cc

08005634 <_init>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr

08005640 <_fini>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr
